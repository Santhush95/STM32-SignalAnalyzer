
Flow Sensor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001385c  080080d8  080080d8  000180d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b934  0801b934  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b934  0801b934  0002b934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b93c  0801b93c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b93c  0801b93c  0002b93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b940  0801b940  0002b940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801b944  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007148  200001e4  0801bb28  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000732c  0801bb28  0003732c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7c7  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e4  00000000  00000000  0003e9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  000412c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  00041d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178b3  00000000  00000000  00042700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e928  00000000  00000000  00059fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f55  00000000  00000000  000688db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  000fc830  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003928  00000000  00000000  000fc8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000330c  00000000  00000000  00100218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080bc 	.word	0x080080bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080080bc 	.word	0x080080bc

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	; 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <__aeabi_dmul>:
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006d6:	bf1d      	ittte	ne
 80006d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006dc:	ea94 0f0c 	teqne	r4, ip
 80006e0:	ea95 0f0c 	teqne	r5, ip
 80006e4:	f000 f8de 	bleq	80008a4 <__aeabi_dmul+0x1dc>
 80006e8:	442c      	add	r4, r5
 80006ea:	ea81 0603 	eor.w	r6, r1, r3
 80006ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006fa:	bf18      	it	ne
 80006fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000708:	d038      	beq.n	800077c <__aeabi_dmul+0xb4>
 800070a:	fba0 ce02 	umull	ip, lr, r0, r2
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000716:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800071a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800071e:	f04f 0600 	mov.w	r6, #0
 8000722:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000726:	f09c 0f00 	teq	ip, #0
 800072a:	bf18      	it	ne
 800072c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000730:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000734:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000738:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800073c:	d204      	bcs.n	8000748 <__aeabi_dmul+0x80>
 800073e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000742:	416d      	adcs	r5, r5
 8000744:	eb46 0606 	adc.w	r6, r6, r6
 8000748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800074c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800075c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000760:	bf88      	it	hi
 8000762:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000766:	d81e      	bhi.n	80007a6 <__aeabi_dmul+0xde>
 8000768:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800076c:	bf08      	it	eq
 800076e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000772:	f150 0000 	adcs.w	r0, r0, #0
 8000776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000780:	ea46 0101 	orr.w	r1, r6, r1
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000790:	bfc2      	ittt	gt
 8000792:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800079a:	bd70      	popgt	{r4, r5, r6, pc}
 800079c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a0:	f04f 0e00 	mov.w	lr, #0
 80007a4:	3c01      	subs	r4, #1
 80007a6:	f300 80ab 	bgt.w	8000900 <__aeabi_dmul+0x238>
 80007aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ae:	bfde      	ittt	le
 80007b0:	2000      	movle	r0, #0
 80007b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007b6:	bd70      	pople	{r4, r5, r6, pc}
 80007b8:	f1c4 0400 	rsb	r4, r4, #0
 80007bc:	3c20      	subs	r4, #32
 80007be:	da35      	bge.n	800082c <__aeabi_dmul+0x164>
 80007c0:	340c      	adds	r4, #12
 80007c2:	dc1b      	bgt.n	80007fc <__aeabi_dmul+0x134>
 80007c4:	f104 0414 	add.w	r4, r4, #20
 80007c8:	f1c4 0520 	rsb	r5, r4, #32
 80007cc:	fa00 f305 	lsl.w	r3, r0, r5
 80007d0:	fa20 f004 	lsr.w	r0, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea40 0002 	orr.w	r0, r0, r2
 80007dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007e8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ec:	eb42 0106 	adc.w	r1, r2, r6
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 040c 	rsb	r4, r4, #12
 8000800:	f1c4 0520 	rsb	r5, r4, #32
 8000804:	fa00 f304 	lsl.w	r3, r0, r4
 8000808:	fa20 f005 	lsr.w	r0, r0, r5
 800080c:	fa01 f204 	lsl.w	r2, r1, r4
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800081c:	f141 0100 	adc.w	r1, r1, #0
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f205 	lsl.w	r2, r0, r5
 8000834:	ea4e 0e02 	orr.w	lr, lr, r2
 8000838:	fa20 f304 	lsr.w	r3, r0, r4
 800083c:	fa01 f205 	lsl.w	r2, r1, r5
 8000840:	ea43 0302 	orr.w	r3, r3, r2
 8000844:	fa21 f004 	lsr.w	r0, r1, r4
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	fa21 f204 	lsr.w	r2, r1, r4
 8000850:	ea20 0002 	bic.w	r0, r0, r2
 8000854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f094 0f00 	teq	r4, #0
 8000868:	d10f      	bne.n	800088a <__aeabi_dmul+0x1c2>
 800086a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800086e:	0040      	lsls	r0, r0, #1
 8000870:	eb41 0101 	adc.w	r1, r1, r1
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3c01      	subeq	r4, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1a6>
 800087e:	ea41 0106 	orr.w	r1, r1, r6
 8000882:	f095 0f00 	teq	r5, #0
 8000886:	bf18      	it	ne
 8000888:	4770      	bxne	lr
 800088a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	eb43 0303 	adc.w	r3, r3, r3
 8000894:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3d01      	subeq	r5, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1c6>
 800089e:	ea43 0306 	orr.w	r3, r3, r6
 80008a2:	4770      	bx	lr
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ac:	bf18      	it	ne
 80008ae:	ea95 0f0c 	teqne	r5, ip
 80008b2:	d00c      	beq.n	80008ce <__aeabi_dmul+0x206>
 80008b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b8:	bf18      	it	ne
 80008ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008be:	d1d1      	bne.n	8000864 <__aeabi_dmul+0x19c>
 80008c0:	ea81 0103 	eor.w	r1, r1, r3
 80008c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	bd70      	pop	{r4, r5, r6, pc}
 80008ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d2:	bf06      	itte	eq
 80008d4:	4610      	moveq	r0, r2
 80008d6:	4619      	moveq	r1, r3
 80008d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008dc:	d019      	beq.n	8000912 <__aeabi_dmul+0x24a>
 80008de:	ea94 0f0c 	teq	r4, ip
 80008e2:	d102      	bne.n	80008ea <__aeabi_dmul+0x222>
 80008e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008e8:	d113      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	d105      	bne.n	80008fc <__aeabi_dmul+0x234>
 80008f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008f4:	bf1c      	itt	ne
 80008f6:	4610      	movne	r0, r2
 80008f8:	4619      	movne	r1, r3
 80008fa:	d10a      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008fc:	ea81 0103 	eor.w	r1, r1, r3
 8000900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000904:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000908:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	bd70      	pop	{r4, r5, r6, pc}
 8000912:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000916:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800091a:	bd70      	pop	{r4, r5, r6, pc}

0800091c <__aeabi_ddiv>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000922:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800092a:	bf1d      	ittte	ne
 800092c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000930:	ea94 0f0c 	teqne	r4, ip
 8000934:	ea95 0f0c 	teqne	r5, ip
 8000938:	f000 f8a7 	bleq	8000a8a <__aeabi_ddiv+0x16e>
 800093c:	eba4 0405 	sub.w	r4, r4, r5
 8000940:	ea81 0e03 	eor.w	lr, r1, r3
 8000944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000948:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800094c:	f000 8088 	beq.w	8000a60 <__aeabi_ddiv+0x144>
 8000950:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000954:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800095c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000960:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800096c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000970:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000974:	429d      	cmp	r5, r3
 8000976:	bf08      	it	eq
 8000978:	4296      	cmpeq	r6, r2
 800097a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800097e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000982:	d202      	bcs.n	800098a <__aeabi_ddiv+0x6e>
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	1ab6      	subs	r6, r6, r2
 800098c:	eb65 0503 	sbc.w	r5, r5, r3
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800099a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009fc:	d018      	beq.n	8000a30 <__aeabi_ddiv+0x114>
 80009fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a1a:	d1c0      	bne.n	800099e <__aeabi_ddiv+0x82>
 8000a1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a20:	d10b      	bne.n	8000a3a <__aeabi_ddiv+0x11e>
 8000a22:	ea41 0100 	orr.w	r1, r1, r0
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a2e:	e7b6      	b.n	800099e <__aeabi_ddiv+0x82>
 8000a30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a34:	bf04      	itt	eq
 8000a36:	4301      	orreq	r1, r0
 8000a38:	2000      	moveq	r0, #0
 8000a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a3e:	bf88      	it	hi
 8000a40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a44:	f63f aeaf 	bhi.w	80007a6 <__aeabi_dmul+0xde>
 8000a48:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a4c:	bf04      	itt	eq
 8000a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a56:	f150 0000 	adcs.w	r0, r0, #0
 8000a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a6c:	bfc2      	ittt	gt
 8000a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a76:	bd70      	popgt	{r4, r5, r6, pc}
 8000a78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7c:	f04f 0e00 	mov.w	lr, #0
 8000a80:	3c01      	subs	r4, #1
 8000a82:	e690      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a84:	ea45 0e06 	orr.w	lr, r5, r6
 8000a88:	e68d      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a8e:	ea94 0f0c 	teq	r4, ip
 8000a92:	bf08      	it	eq
 8000a94:	ea95 0f0c 	teqeq	r5, ip
 8000a98:	f43f af3b 	beq.w	8000912 <__aeabi_dmul+0x24a>
 8000a9c:	ea94 0f0c 	teq	r4, ip
 8000aa0:	d10a      	bne.n	8000ab8 <__aeabi_ddiv+0x19c>
 8000aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aa6:	f47f af34 	bne.w	8000912 <__aeabi_dmul+0x24a>
 8000aaa:	ea95 0f0c 	teq	r5, ip
 8000aae:	f47f af25 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	e72c      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000ab8:	ea95 0f0c 	teq	r5, ip
 8000abc:	d106      	bne.n	8000acc <__aeabi_ddiv+0x1b0>
 8000abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ac2:	f43f aefd 	beq.w	80008c0 <__aeabi_dmul+0x1f8>
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4619      	mov	r1, r3
 8000aca:	e722      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ad6:	f47f aec5 	bne.w	8000864 <__aeabi_dmul+0x19c>
 8000ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ade:	f47f af0d 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ae6:	f47f aeeb 	bne.w	80008c0 <__aeabi_dmul+0x1f8>
 8000aea:	e712      	b.n	8000912 <__aeabi_dmul+0x24a>

08000aec <__gedf2>:
 8000aec:	f04f 3cff 	mov.w	ip, #4294967295
 8000af0:	e006      	b.n	8000b00 <__cmpdf2+0x4>
 8000af2:	bf00      	nop

08000af4 <__ledf2>:
 8000af4:	f04f 0c01 	mov.w	ip, #1
 8000af8:	e002      	b.n	8000b00 <__cmpdf2+0x4>
 8000afa:	bf00      	nop

08000afc <__cmpdf2>:
 8000afc:	f04f 0c01 	mov.w	ip, #1
 8000b00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b16:	d01b      	beq.n	8000b50 <__cmpdf2+0x54>
 8000b18:	b001      	add	sp, #4
 8000b1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b1e:	bf0c      	ite	eq
 8000b20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b24:	ea91 0f03 	teqne	r1, r3
 8000b28:	bf02      	ittt	eq
 8000b2a:	ea90 0f02 	teqeq	r0, r2
 8000b2e:	2000      	moveq	r0, #0
 8000b30:	4770      	bxeq	lr
 8000b32:	f110 0f00 	cmn.w	r0, #0
 8000b36:	ea91 0f03 	teq	r1, r3
 8000b3a:	bf58      	it	pl
 8000b3c:	4299      	cmppl	r1, r3
 8000b3e:	bf08      	it	eq
 8000b40:	4290      	cmpeq	r0, r2
 8000b42:	bf2c      	ite	cs
 8000b44:	17d8      	asrcs	r0, r3, #31
 8000b46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b4a:	f040 0001 	orr.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__cmpdf2+0x64>
 8000b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5e:	d107      	bne.n	8000b70 <__cmpdf2+0x74>
 8000b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d1d6      	bne.n	8000b18 <__cmpdf2+0x1c>
 8000b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6e:	d0d3      	beq.n	8000b18 <__cmpdf2+0x1c>
 8000b70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdrcmple>:
 8000b78:	4684      	mov	ip, r0
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4662      	mov	r2, ip
 8000b7e:	468c      	mov	ip, r1
 8000b80:	4619      	mov	r1, r3
 8000b82:	4663      	mov	r3, ip
 8000b84:	e000      	b.n	8000b88 <__aeabi_cdcmpeq>
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdcmpeq>:
 8000b88:	b501      	push	{r0, lr}
 8000b8a:	f7ff ffb7 	bl	8000afc <__cmpdf2>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	bf48      	it	mi
 8000b92:	f110 0f00 	cmnmi.w	r0, #0
 8000b96:	bd01      	pop	{r0, pc}

08000b98 <__aeabi_dcmpeq>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff fff4 	bl	8000b88 <__aeabi_cdcmpeq>
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2001      	moveq	r0, #1
 8000ba4:	2000      	movne	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmplt>:
 8000bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb0:	f7ff ffea 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bb4:	bf34      	ite	cc
 8000bb6:	2001      	movcc	r0, #1
 8000bb8:	2000      	movcs	r0, #0
 8000bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_dcmple>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff ffe0 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bc8:	bf94      	ite	ls
 8000bca:	2001      	movls	r0, #1
 8000bcc:	2000      	movhi	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_dcmpge>:
 8000bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd8:	f7ff ffce 	bl	8000b78 <__aeabi_cdrcmple>
 8000bdc:	bf94      	ite	ls
 8000bde:	2001      	movls	r0, #1
 8000be0:	2000      	movhi	r0, #0
 8000be2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be6:	bf00      	nop

08000be8 <__aeabi_dcmpgt>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff ffc4 	bl	8000b78 <__aeabi_cdrcmple>
 8000bf0:	bf34      	ite	cc
 8000bf2:	2001      	movcc	r0, #1
 8000bf4:	2000      	movcs	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmpun>:
 8000bfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x10>
 8000c06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c0a:	d10a      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x20>
 8000c16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0001 	mov.w	r0, #1
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2iz>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c30:	d215      	bcs.n	8000c5e <__aeabi_d2iz+0x36>
 8000c32:	d511      	bpl.n	8000c58 <__aeabi_d2iz+0x30>
 8000c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c3c:	d912      	bls.n	8000c64 <__aeabi_d2iz+0x3c>
 8000c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	4770      	bx	lr
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c62:	d105      	bne.n	8000c70 <__aeabi_d2iz+0x48>
 8000c64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	bf08      	it	eq
 8000c6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_ADC1_Init+0x98>)
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <MX_ADC1_Init+0x9c>)
 8000f92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_ADC1_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_ADC1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <MX_ADC1_Init+0xa0>)
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fdc:	f000 fcc2 	bl	8001964 <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fe6:	f000 fa47 	bl	8001478 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_ADC1_Init+0x98>)
 8000ffc:	f000 ff14 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001006:	f000 fa37 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000200 	.word	0x20000200
 8001018:	40012000 	.word	0x40012000
 800101c:	0f000001 	.word	0x0f000001

08001020 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a33      	ldr	r2, [pc, #204]	; (800110c <HAL_ADC_MspInit+0xec>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d15f      	bne.n	8001102 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <HAL_ADC_MspInit+0xf0>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a31      	ldr	r2, [pc, #196]	; (8001110 <HAL_ADC_MspInit+0xf0>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <HAL_ADC_MspInit+0xf0>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <HAL_ADC_MspInit+0xf0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a2a      	ldr	r2, [pc, #168]	; (8001110 <HAL_ADC_MspInit+0xf0>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <HAL_ADC_MspInit+0xf0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800107a:	2301      	movs	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107e:	2303      	movs	r3, #3
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4821      	ldr	r0, [pc, #132]	; (8001114 <HAL_ADC_MspInit+0xf4>)
 800108e:	f001 fdf7 	bl	8002c80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 8001094:	4a21      	ldr	r2, [pc, #132]	; (800111c <HAL_ADC_MspInit+0xfc>)
 8001096:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 80010ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 80010b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 80010bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 80010c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010d6:	4810      	ldr	r0, [pc, #64]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 80010d8:	f001 fa62 	bl	80025a0 <HAL_DMA_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010e2:	f000 f9c9 	bl	8001478 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 80010ea:	639a      	str	r2, [r3, #56]	; 0x38
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_ADC_MspInit+0xf8>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2012      	movs	r0, #18
 80010f8:	f001 fa1b 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010fc:	2012      	movs	r0, #18
 80010fe:	f001 fa34 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40012000 	.word	0x40012000
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000
 8001118:	20000248 	.word	0x20000248
 800111c:	40026410 	.word	0x40026410

08001120 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_DMA_Init+0x3c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <MX_DMA_Init+0x3c>)
 8001130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_DMA_Init+0x3c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2038      	movs	r0, #56	; 0x38
 8001148:	f001 f9f3 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800114c:	2038      	movs	r0, #56	; 0x38
 800114e:	f001 fa0c 	bl	800256a <HAL_NVIC_EnableIRQ>

}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800

08001160 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_GPIO_Init+0x9c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <MX_GPIO_Init+0x9c>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_GPIO_Init+0x9c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_GPIO_Init+0x9c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a18      	ldr	r2, [pc, #96]	; (80011fc <MX_GPIO_Init+0x9c>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_GPIO_Init+0x9c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_GPIO_Init+0x9c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a11      	ldr	r2, [pc, #68]	; (80011fc <MX_GPIO_Init+0x9c>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_GPIO_Init+0x9c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <MX_GPIO_Init+0xa0>)
 80011d2:	f001 fed9 	bl	8002f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_GPIO_Init+0xa0>)
 80011f0:	f001 fd46 	bl	8002c80 <HAL_GPIO_Init>

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020400 	.word	0x40020400

08001204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b09c      	sub	sp, #112	; 0x70
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120a:	f000 fb15 	bl	8001838 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_USART1_UART_Init();
 800120e:	f000 fa77 	bl	8001700 <MX_USART1_UART_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001212:	f000 f857 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001216:	f7ff ffa3 	bl	8001160 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800121a:	f000 fa71 	bl	8001700 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800121e:	f7ff ff7f 	bl	8001120 <MX_DMA_Init>
  MX_ADC1_Init();
 8001222:	f7ff feab 	bl	8000f7c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 2048);
 8001226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800122a:	491f      	ldr	r1, [pc, #124]	; (80012a8 <main+0xa4>)
 800122c:	481f      	ldr	r0, [pc, #124]	; (80012ac <main+0xa8>)
 800122e:	f000 fced 	bl	8001c0c <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (txDone == 0) {
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <main+0xac>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1fb      	bne.n	8001232 <main+0x2e>
		  for (int i=0;i<(TEST_LENGTH_SAMPLES/2);i++) {
 800123a:	2300      	movs	r3, #0
 800123c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800123e:	e021      	b.n	8001284 <main+0x80>
			  char uart_buf[100] = {0};
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	2260      	movs	r2, #96	; 0x60
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f004 f829 	bl	80052a4 <memset>
			  int uart_buf_len;

			  uart_buf_len = sprintf(uart_buf, "%f,", magFFT[i] );
 8001252:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <main+0xb0>)
 8001254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f9db 	bl	8000618 <__aeabi_f2d>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	1d38      	adds	r0, r7, #4
 8001268:	4913      	ldr	r1, [pc, #76]	; (80012b8 <main+0xb4>)
 800126a:	f004 fc8d 	bl	8005b88 <siprintf>
 800126e:	66b8      	str	r0, [r7, #104]	; 0x68
			  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001272:	b29a      	uxth	r2, r3
 8001274:	1d39      	adds	r1, r7, #4
 8001276:	2364      	movs	r3, #100	; 0x64
 8001278:	4810      	ldr	r0, [pc, #64]	; (80012bc <main+0xb8>)
 800127a:	f002 fb44 	bl	8003906 <HAL_UART_Transmit>
		  for (int i=0;i<(TEST_LENGTH_SAMPLES/2);i++) {
 800127e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001280:	3301      	adds	r3, #1
 8001282:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128a:	dbd9      	blt.n	8001240 <main+0x3c>
		  }
		  HAL_UART_Transmit(&huart1, "\n", 5, 100);
 800128c:	2364      	movs	r3, #100	; 0x64
 800128e:	2205      	movs	r2, #5
 8001290:	490b      	ldr	r1, [pc, #44]	; (80012c0 <main+0xbc>)
 8001292:	480a      	ldr	r0, [pc, #40]	; (80012bc <main+0xb8>)
 8001294:	f002 fb37 	bl	8003906 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8001298:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129c:	f000 fb3e 	bl	800191c <HAL_Delay>
		  txDone = 1;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <main+0xac>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
	  if (txDone == 0) {
 80012a6:	e7c4      	b.n	8001232 <main+0x2e>
 80012a8:	200002a8 	.word	0x200002a8
 80012ac:	20000200 	.word	0x20000200
 80012b0:	20000004 	.word	0x20000004
 80012b4:	200042a8 	.word	0x200042a8
 80012b8:	080080d8 	.word	0x080080d8
 80012bc:	200072d4 	.word	0x200072d4
 80012c0:	080080dc 	.word	0x080080dc

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	; 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	2230      	movs	r2, #48	; 0x30
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 ffe6 	bl	80052a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	4b29      	ldr	r3, [pc, #164]	; (8001394 <SystemClock_Config+0xd0>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a28      	ldr	r2, [pc, #160]	; (8001394 <SystemClock_Config+0xd0>)
 80012f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <SystemClock_Config+0xd0>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <SystemClock_Config+0xd4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001310:	4a21      	ldr	r2, [pc, #132]	; (8001398 <SystemClock_Config+0xd4>)
 8001312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <SystemClock_Config+0xd4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001324:	2302      	movs	r3, #2
 8001326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001328:	2301      	movs	r3, #1
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800132c:	2310      	movs	r3, #16
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001330:	2302      	movs	r3, #2
 8001332:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001334:	2300      	movs	r3, #0
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001338:	2308      	movs	r3, #8
 800133a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800133c:	2340      	movs	r3, #64	; 0x40
 800133e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001340:	2302      	movs	r3, #2
 8001342:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001344:	2304      	movs	r3, #4
 8001346:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001348:	f107 0320 	add.w	r3, r7, #32
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fe35 	bl	8002fbc <HAL_RCC_OscConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001358:	f000 f88e 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135c:	230f      	movs	r3, #15
 800135e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001360:	2302      	movs	r3, #2
 8001362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800136e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001372:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2101      	movs	r1, #1
 800137a:	4618      	mov	r0, r3
 800137c:	f002 f896 	bl	80034ac <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001386:	f000 f877 	bl	8001478 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3750      	adds	r7, #80	; 0x50
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40007000 	.word	0x40007000

0800139c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	if (txDone == 1) {
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <HAL_ADC_ConvCpltCallback+0xa8>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d146      	bne.n	800143a <HAL_ADC_ConvCpltCallback+0x9e>
		for (int i = 0; i < 2048; ++i) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e014      	b.n	80013dc <HAL_ADC_ConvCpltCallback+0x40>
			fftInput_f32_adc1[i] = adc_buf[i]/ 1000.0f;
 80013b2:	4a25      	ldr	r2, [pc, #148]	; (8001448 <HAL_ADC_ConvCpltCallback+0xac>)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c2:	eddf 6a22 	vldr	s13, [pc, #136]	; 800144c <HAL_ADC_ConvCpltCallback+0xb0>
 80013c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ca:	4a21      	ldr	r2, [pc, #132]	; (8001450 <HAL_ADC_ConvCpltCallback+0xb4>)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 2048; ++i) {
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3301      	adds	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013e2:	dbe6      	blt.n	80013b2 <HAL_ADC_ConvCpltCallback+0x16>
		}

		  status = ARM_MATH_SUCCESS;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_ADC_ConvCpltCallback+0xb8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
		  status = arm_rfft_fast_init_f32(&S, fftSize);
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_ADC_ConvCpltCallback+0xbc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4619      	mov	r1, r3
 80013f2:	481a      	ldr	r0, [pc, #104]	; (800145c <HAL_ADC_ConvCpltCallback+0xc0>)
 80013f4:	f002 fe64 	bl	80040c0 <arm_rfft_fast_init_f32>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_ADC_ConvCpltCallback+0xb8>)
 80013fe:	701a      	strb	r2, [r3, #0]
	//	  // input is real, output is interleaved real and complex
		  arm_rfft_fast_f32(&S, fftInput_f32_adc1, complexFFT, ifftFlag);
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001408:	4911      	ldr	r1, [pc, #68]	; (8001450 <HAL_ADC_ConvCpltCallback+0xb4>)
 800140a:	4814      	ldr	r0, [pc, #80]	; (800145c <HAL_ADC_ConvCpltCallback+0xc0>)
 800140c:	f002 feda 	bl	80041c4 <arm_rfft_fast_f32>
		  arm_cmplx_mag_f32(complexFFT, magFFT, TEST_LENGTH_SAMPLES/2);
 8001410:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001414:	4914      	ldr	r1, [pc, #80]	; (8001468 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001416:	4813      	ldr	r0, [pc, #76]	; (8001464 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001418:	f003 fb40 	bl	8004a9c <arm_cmplx_mag_f32>
		  arm_max_f32(&magFFT[1], (TEST_LENGTH_SAMPLES/2) - 1, &maxValue, &maxIndex);
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_ADC_ConvCpltCallback+0xd0>)
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001420:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001424:	4813      	ldr	r0, [pc, #76]	; (8001474 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001426:	f002 fde3 	bl	8003ff0 <arm_max_f32>
	//	  correct index
		  maxIndex += 1;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_ADC_ConvCpltCallback+0xd0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_ADC_ConvCpltCallback+0xd0>)
 8001432:	6013      	str	r3, [r2, #0]
		  txDone = 0;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
//
//		  uart_buf_len = sprintf(uart_buf, "%i , %f ", i, magFFT[i] );
//		  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
//		  HAL_Delay(500);
//	  }
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000004 	.word	0x20000004
 8001448:	200002a8 	.word	0x200002a8
 800144c:	447a0000 	.word	0x447a0000
 8001450:	200052d0 	.word	0x200052d0
 8001454:	200052c8 	.word	0x200052c8
 8001458:	20000000 	.word	0x20000000
 800145c:	200052ac 	.word	0x200052ac
 8001460:	200052a8 	.word	0x200052a8
 8001464:	200022a8 	.word	0x200022a8
 8001468:	200042a8 	.word	0x200042a8
 800146c:	200052c4 	.word	0x200052c4
 8001470:	200052cc 	.word	0x200052cc
 8001474:	200042ac 	.word	0x200042ac

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <HAL_MspInit+0x4c>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_MspInit+0x4c>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <NMI_Handler+0x4>

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001520:	f000 f9dc 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <ADC_IRQHandler+0x10>)
 800152e:	f000 fa5c 	bl	80019ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000200 	.word	0x20000200

0800153c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <DMA2_Stream0_IRQHandler+0x10>)
 8001542:	f001 f933 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000248 	.word	0x20000248

08001550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	return 1;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_kill>:

int _kill(int pid, int sig)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800156a:	f003 fe71 	bl	8005250 <__errno>
 800156e:	4603      	mov	r3, r0
 8001570:	2216      	movs	r2, #22
 8001572:	601a      	str	r2, [r3, #0]
	return -1;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_exit>:

void _exit (int status)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ffe7 	bl	8001560 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001592:	e7fe      	b.n	8001592 <_exit+0x12>

08001594 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e00a      	b.n	80015bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015a6:	f3af 8000 	nop.w
 80015aa:	4601      	mov	r1, r0
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	60ba      	str	r2, [r7, #8]
 80015b2:	b2ca      	uxtb	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbf0      	blt.n	80015a6 <_read+0x12>
	}

return len;
 80015c4:	687b      	ldr	r3, [r7, #4]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e009      	b.n	80015f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	60ba      	str	r2, [r7, #8]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbf1      	blt.n	80015e0 <_write+0x12>
	}
	return len;
 80015fc:	687b      	ldr	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_close>:

int _close(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162e:	605a      	str	r2, [r3, #4]
	return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_isatty>:

int _isatty(int file)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	return 1;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f003 fdd6 	bl	8005250 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20010000 	.word	0x20010000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	200072d0 	.word	0x200072d0
 80016d8:	20007330 	.word	0x20007330

080016dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <MX_USART1_UART_Init+0x50>)
 8001708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <MX_USART1_UART_Init+0x4c>)
 800170c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_USART1_UART_Init+0x4c>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001738:	f002 f898 	bl	800386c <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001742:	f7ff fe99 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200072d4 	.word	0x200072d4
 8001750:	40011000 	.word	0x40011000

08001754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_UART_MspInit+0x84>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12c      	bne.n	80017d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_UART_MspInit+0x88>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_UART_MspInit+0x88>)
 8001780:	f043 0310 	orr.w	r3, r3, #16
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_UART_MspInit+0x88>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_UART_MspInit+0x88>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_UART_MspInit+0x88>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_UART_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017c0:	2307      	movs	r3, #7
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <HAL_UART_MspInit+0x8c>)
 80017cc:	f001 fa58 	bl	8002c80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40011000 	.word	0x40011000
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000

080017e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800181c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e8:	480d      	ldr	r0, [pc, #52]	; (8001820 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ea:	490e      	ldr	r1, [pc, #56]	; (8001824 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017ec:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001800:	4c0b      	ldr	r4, [pc, #44]	; (8001830 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800180e:	f7ff ff65 	bl	80016dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001812:	f003 fd23 	bl	800525c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001816:	f7ff fcf5 	bl	8001204 <main>
  bx  lr    
 800181a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800181c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001828:	0801b944 	.word	0x0801b944
  ldr r2, =_sbss
 800182c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001830:	2000732c 	.word	0x2000732c

08001834 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <DMA1_Stream0_IRQHandler>
	...

08001838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0d      	ldr	r2, [pc, #52]	; (8001878 <HAL_Init+0x40>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_Init+0x40>)
 800184e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_Init+0x40>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001860:	2003      	movs	r0, #3
 8001862:	f000 fe5b 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001866:	200f      	movs	r0, #15
 8001868:	f000 f808 	bl	800187c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800186c:	f7ff fe0a 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_InitTick+0x54>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x58>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fe73 	bl	8002586 <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d80a      	bhi.n	80018c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f000 fe3b 	bl	8002532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018bc:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <HAL_InitTick+0x5c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000010 	.word	0x20000010
 80018d8:	2000000c 	.word	0x2000000c

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000010 	.word	0x20000010
 8001900:	20007318 	.word	0x20007318

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20007318 	.word	0x20007318

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff ffee 	bl	8001904 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d005      	beq.n	8001942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_Delay+0x44>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001942:	bf00      	nop
 8001944:	f7ff ffde 	bl	8001904 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d8f7      	bhi.n	8001944 <HAL_Delay+0x28>
  {
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000010 	.word	0x20000010

08001964 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e033      	b.n	80019e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fb4c 	bl	8001020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d118      	bne.n	80019d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019aa:	f023 0302 	bic.w	r3, r3, #2
 80019ae:	f043 0202 	orr.w	r2, r3, #2
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 fb58 	bl	800206c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f023 0303 	bic.w	r3, r3, #3
 80019ca:	f043 0201 	orr.w	r2, r3, #1
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
 80019d2:	e001      	b.n	80019d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d049      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0xca>
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d046      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d12b      	bne.n	8001aa4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d127      	bne.n	8001aa4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d119      	bne.n	8001aa4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0220 	bic.w	r2, r2, #32
 8001a7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fc79 	bl	800139c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f06f 0212 	mvn.w	r2, #18
 8001ab2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d057      	beq.n	8001b7a <HAL_ADC_IRQHandler+0x190>
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d054      	beq.n	8001b7a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d139      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d12b      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d124      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d11d      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b44:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d105      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fbfc 	bl	8002368 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 020c 	mvn.w	r2, #12
 8001b78:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b88:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d017      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x1d6>
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d014      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d10d      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f925 	bl	8001e00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f06f 0201 	mvn.w	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bce:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d015      	beq.n	8001c02 <HAL_ADC_IRQHandler+0x218>
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d012      	beq.n	8001c02 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	f043 0202 	orr.w	r2, r3, #2
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0220 	mvn.w	r2, #32
 8001bf0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f90e 	bl	8001e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0220 	mvn.w	r2, #32
 8001c00:	601a      	str	r2, [r3, #0]
  }
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_Start_DMA+0x1e>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e0ce      	b.n	8001dc8 <HAL_ADC_Start_DMA+0x1bc>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d018      	beq.n	8001c72 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c50:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <HAL_ADC_Start_DMA+0x1c4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a5f      	ldr	r2, [pc, #380]	; (8001dd4 <HAL_ADC_Start_DMA+0x1c8>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	0c9a      	lsrs	r2, r3, #18
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c64:	e002      	b.n	8001c6c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f9      	bne.n	8001c66 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c80:	d107      	bne.n	8001c92 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c90:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	f040 8086 	bne.w	8001dae <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ccc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce0:	d106      	bne.n	8001cf0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f023 0206 	bic.w	r2, r3, #6
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44
 8001cee:	e002      	b.n	8001cf6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cfe:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <HAL_ADC_Start_DMA+0x1cc>)
 8001d00:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d06:	4a35      	ldr	r2, [pc, #212]	; (8001ddc <HAL_ADC_Start_DMA+0x1d0>)
 8001d08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0e:	4a34      	ldr	r2, [pc, #208]	; (8001de0 <HAL_ADC_Start_DMA+0x1d4>)
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d16:	4a33      	ldr	r2, [pc, #204]	; (8001de4 <HAL_ADC_Start_DMA+0x1d8>)
 8001d18:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d22:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d32:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d42:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	334c      	adds	r3, #76	; 0x4c
 8001d4e:	4619      	mov	r1, r3
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f000 fcd2 	bl	80026fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10f      	bne.n	8001d84 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d129      	bne.n	8001dc6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	e020      	b.n	8001dc6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <HAL_ADC_Start_DMA+0x1dc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d11b      	bne.n	8001dc6 <HAL_ADC_Start_DMA+0x1ba>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d114      	bne.n	8001dc6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	e00b      	b.n	8001dc6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f043 0210 	orr.w	r2, r3, #16
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	431bde83 	.word	0x431bde83
 8001dd8:	40012300 	.word	0x40012300
 8001ddc:	08002265 	.word	0x08002265
 8001de0:	0800231f 	.word	0x0800231f
 8001de4:	0800233b 	.word	0x0800233b
 8001de8:	40012000 	.word	0x40012000

08001dec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1c>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e105      	b.n	8002050 <HAL_ADC_ConfigChannel+0x228>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b09      	cmp	r3, #9
 8001e52:	d925      	bls.n	8001ea0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68d9      	ldr	r1, [r3, #12]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	3b1e      	subs	r3, #30
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43da      	mvns	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	400a      	ands	r2, r1
 8001e78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68d9      	ldr	r1, [r3, #12]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4403      	add	r3, r0
 8001e92:	3b1e      	subs	r3, #30
 8001e94:	409a      	lsls	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	e022      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6919      	ldr	r1, [r3, #16]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4403      	add	r3, r0
 8001edc:	409a      	lsls	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d824      	bhi.n	8001f38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3b05      	subs	r3, #5
 8001f00:	221f      	movs	r2, #31
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b05      	subs	r3, #5
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
 8001f36:	e04c      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b0c      	cmp	r3, #12
 8001f3e:	d824      	bhi.n	8001f8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b23      	subs	r3, #35	; 0x23
 8001f52:	221f      	movs	r2, #31
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	400a      	ands	r2, r1
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	3b23      	subs	r3, #35	; 0x23
 8001f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
 8001f88:	e023      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b41      	subs	r3, #65	; 0x41
 8001f9c:	221f      	movs	r2, #31
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b41      	subs	r3, #65	; 0x41
 8001fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <HAL_ADC_ConfigChannel+0x234>)
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a21      	ldr	r2, [pc, #132]	; (8002060 <HAL_ADC_ConfigChannel+0x238>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d109      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x1cc>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b12      	cmp	r3, #18
 8001fe6:	d105      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_ADC_ConfigChannel+0x238>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d123      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x21e>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b10      	cmp	r3, #16
 8002004:	d003      	beq.n	800200e <HAL_ADC_ConfigChannel+0x1e6>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b11      	cmp	r3, #17
 800200c:	d11b      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b10      	cmp	r3, #16
 8002020:	d111      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_ADC_ConfigChannel+0x23c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a10      	ldr	r2, [pc, #64]	; (8002068 <HAL_ADC_ConfigChannel+0x240>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	0c9a      	lsrs	r2, r3, #18
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002038:	e002      	b.n	8002040 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3b01      	subs	r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f9      	bne.n	800203a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40012300 	.word	0x40012300
 8002060:	40012000 	.word	0x40012000
 8002064:	20000008 	.word	0x20000008
 8002068:	431bde83 	.word	0x431bde83

0800206c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002074:	4b79      	ldr	r3, [pc, #484]	; (800225c <ADC_Init+0x1f0>)
 8002076:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	021a      	lsls	r2, r3, #8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6899      	ldr	r1, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	4a58      	ldr	r2, [pc, #352]	; (8002260 <ADC_Init+0x1f4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d022      	beq.n	800214a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002112:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6899      	ldr	r1, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	e00f      	b.n	800216a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002168:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0202 	bic.w	r2, r2, #2
 8002178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7e1b      	ldrb	r3, [r3, #24]
 8002184:	005a      	lsls	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01b      	beq.n	80021d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	3b01      	subs	r3, #1
 80021c4:	035a      	lsls	r2, r3, #13
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	e007      	b.n	80021e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	051a      	lsls	r2, r3, #20
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002222:	025a      	lsls	r2, r3, #9
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	029a      	lsls	r2, r3, #10
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40012300 	.word	0x40012300
 8002260:	0f000001 	.word	0x0f000001

08002264 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800227a:	2b00      	cmp	r3, #0
 800227c:	d13c      	bne.n	80022f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d12b      	bne.n	80022f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800229c:	2b00      	cmp	r3, #0
 800229e:	d127      	bne.n	80022f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d119      	bne.n	80022f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0220 	bic.w	r2, r2, #32
 80022ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7ff f853 	bl	800139c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022f6:	e00e      	b.n	8002316 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff fd85 	bl	8001e14 <HAL_ADC_ErrorCallback>
}
 800230a:	e004      	b.n	8002316 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fd5d 	bl	8001dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2240      	movs	r2, #64	; 0x40
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f043 0204 	orr.w	r2, r3, #4
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7ff fd5a 	bl	8001e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db0b      	blt.n	800240a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4907      	ldr	r1, [pc, #28]	; (8002418 <__NVIC_EnableIRQ+0x38>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100

0800241c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	db0a      	blt.n	8002446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	490c      	ldr	r1, [pc, #48]	; (8002468 <__NVIC_SetPriority+0x4c>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	440b      	add	r3, r1
 8002440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002444:	e00a      	b.n	800245c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4908      	ldr	r1, [pc, #32]	; (800246c <__NVIC_SetPriority+0x50>)
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	3b04      	subs	r3, #4
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	440b      	add	r3, r1
 800245a:	761a      	strb	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf28      	it	cs
 800248e:	2304      	movcs	r3, #4
 8002490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3304      	adds	r3, #4
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <NVIC_EncodePriority+0x30>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3b03      	subs	r3, #3
 800249e:	e000      	b.n	80024a2 <NVIC_EncodePriority+0x32>
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	401a      	ands	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	4313      	orrs	r3, r2
         );
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	; 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f7ff ff8e 	bl	800241c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff29 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff ff3e 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff8e 	bl	8002470 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff5d 	bl	800241c <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff31 	bl	80023e0 <__NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ffa2 	bl	80024d8 <SysTick_Config>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff f9aa 	bl	8001904 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e099      	b.n	80026f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025dc:	e00f      	b.n	80025fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025de:	f7ff f991 	bl	8001904 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b05      	cmp	r3, #5
 80025ea:	d908      	bls.n	80025fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2203      	movs	r2, #3
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e078      	b.n	80026f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1e8      	bne.n	80025de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <HAL_DMA_Init+0x158>)
 8002618:	4013      	ands	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800262a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	2b04      	cmp	r3, #4
 8002656:	d107      	bne.n	8002668 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	4313      	orrs	r3, r2
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f023 0307 	bic.w	r3, r3, #7
 800267e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	2b04      	cmp	r3, #4
 8002690:	d117      	bne.n	80026c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00e      	beq.n	80026c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fa6f 	bl	8002b88 <DMA_CheckFifoParam>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2240      	movs	r2, #64	; 0x40
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026be:	2301      	movs	r3, #1
 80026c0:	e016      	b.n	80026f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fa26 	bl	8002b1c <DMA_CalcBaseAndBitshift>
 80026d0:	4603      	mov	r3, r0
 80026d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	223f      	movs	r2, #63	; 0x3f
 80026da:	409a      	lsls	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	f010803f 	.word	0xf010803f

080026fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_DMA_Start_IT+0x26>
 800271e:	2302      	movs	r3, #2
 8002720:	e040      	b.n	80027a4 <HAL_DMA_Start_IT+0xa8>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d12f      	bne.n	8002796 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2202      	movs	r2, #2
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f9b8 	bl	8002ac0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	223f      	movs	r2, #63	; 0x3f
 8002756:	409a      	lsls	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0216 	orr.w	r2, r2, #22
 800276a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0208 	orr.w	r2, r2, #8
 8002782:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e005      	b.n	80027a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800279e:	2302      	movs	r3, #2
 80027a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027b8:	4b8e      	ldr	r3, [pc, #568]	; (80029f4 <HAL_DMA_IRQHandler+0x248>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a8e      	ldr	r2, [pc, #568]	; (80029f8 <HAL_DMA_IRQHandler+0x24c>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0a9b      	lsrs	r3, r3, #10
 80027c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2208      	movs	r2, #8
 80027d8:	409a      	lsls	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01a      	beq.n	8002818 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0204 	bic.w	r2, r2, #4
 80027fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	2208      	movs	r2, #8
 8002806:	409a      	lsls	r2, r3
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	2201      	movs	r2, #1
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	2201      	movs	r2, #1
 800283c:	409a      	lsls	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f043 0202 	orr.w	r2, r3, #2
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	2204      	movs	r2, #4
 8002854:	409a      	lsls	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d012      	beq.n	8002884 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002870:	2204      	movs	r2, #4
 8002872:	409a      	lsls	r2, r3
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f043 0204 	orr.w	r2, r3, #4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	2210      	movs	r2, #16
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d043      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d03c      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	2210      	movs	r2, #16
 80028a8:	409a      	lsls	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d018      	beq.n	80028ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d108      	bne.n	80028dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d024      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
 80028da:	e01f      	b.n	800291c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01b      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e016      	b.n	800291c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d107      	bne.n	800290c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0208 	bic.w	r2, r2, #8
 800290a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	2220      	movs	r2, #32
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 808f 	beq.w	8002a4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8087 	beq.w	8002a4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	2220      	movs	r2, #32
 8002944:	409a      	lsls	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b05      	cmp	r3, #5
 8002954:	d136      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0216 	bic.w	r2, r2, #22
 8002964:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002974:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <HAL_DMA_IRQHandler+0x1da>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0208 	bic.w	r2, r2, #8
 8002994:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	223f      	movs	r2, #63	; 0x3f
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d07e      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
        }
        return;
 80029c2:	e079      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01d      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10d      	bne.n	80029fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d031      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
 80029f0:	e02c      	b.n	8002a4c <HAL_DMA_IRQHandler+0x2a0>
 80029f2:	bf00      	nop
 80029f4:	20000008 	.word	0x20000008
 80029f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d023      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
 8002a0c:	e01e      	b.n	8002a4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10f      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0210 	bic.w	r2, r2, #16
 8002a2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d032      	beq.n	8002aba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d022      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2205      	movs	r2, #5
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d307      	bcc.n	8002a94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f2      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x2cc>
 8002a92:	e000      	b.n	8002a96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
 8002ab6:	e000      	b.n	8002aba <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ab8:	bf00      	nop
    }
  }
}
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002adc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d108      	bne.n	8002b00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002afe:	e007      	b.n	8002b10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	60da      	str	r2, [r3, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	3b10      	subs	r3, #16
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <DMA_CalcBaseAndBitshift+0x64>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b36:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <DMA_CalcBaseAndBitshift+0x68>)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d909      	bls.n	8002b5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	1d1a      	adds	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b5c:	e007      	b.n	8002b6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	aaaaaaab 	.word	0xaaaaaaab
 8002b84:	080080f8 	.word	0x080080f8

08002b88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d11f      	bne.n	8002be2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d856      	bhi.n	8002c56 <DMA_CheckFifoParam+0xce>
 8002ba8:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <DMA_CheckFifoParam+0x28>)
 8002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002bc1 	.word	0x08002bc1
 8002bb4:	08002bd3 	.word	0x08002bd3
 8002bb8:	08002bc1 	.word	0x08002bc1
 8002bbc:	08002c57 	.word	0x08002c57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d046      	beq.n	8002c5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd0:	e043      	b.n	8002c5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bda:	d140      	bne.n	8002c5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be0:	e03d      	b.n	8002c5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bea:	d121      	bne.n	8002c30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d837      	bhi.n	8002c62 <DMA_CheckFifoParam+0xda>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <DMA_CheckFifoParam+0x70>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c0f 	.word	0x08002c0f
 8002c00:	08002c09 	.word	0x08002c09
 8002c04:	08002c21 	.word	0x08002c21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0c:	e030      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d025      	beq.n	8002c66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1e:	e022      	b.n	8002c66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c28:	d11f      	bne.n	8002c6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c2e:	e01c      	b.n	8002c6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d903      	bls.n	8002c3e <DMA_CheckFifoParam+0xb6>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d003      	beq.n	8002c44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c3c:	e018      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
      break;
 8002c42:	e015      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00e      	beq.n	8002c6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      break;
 8002c54:	e00b      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c56:	bf00      	nop
 8002c58:	e00a      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e008      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e006      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
 8002c64:	e004      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c66:	bf00      	nop
 8002c68:	e002      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b089      	sub	sp, #36	; 0x24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e159      	b.n	8002f50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	f040 8148 	bne.w	8002f4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d005      	beq.n	8002cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d130      	bne.n	8002d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 0201 	and.w	r2, r3, #1
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d017      	beq.n	8002d70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d123      	bne.n	8002dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	08da      	lsrs	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3208      	adds	r2, #8
 8002d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	220f      	movs	r2, #15
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	08da      	lsrs	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3208      	adds	r2, #8
 8002dbe:	69b9      	ldr	r1, [r7, #24]
 8002dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0203 	and.w	r2, r3, #3
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a2 	beq.w	8002f4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	4b57      	ldr	r3, [pc, #348]	; (8002f68 <HAL_GPIO_Init+0x2e8>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	4a56      	ldr	r2, [pc, #344]	; (8002f68 <HAL_GPIO_Init+0x2e8>)
 8002e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e14:	6453      	str	r3, [r2, #68]	; 0x44
 8002e16:	4b54      	ldr	r3, [pc, #336]	; (8002f68 <HAL_GPIO_Init+0x2e8>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e22:	4a52      	ldr	r2, [pc, #328]	; (8002f6c <HAL_GPIO_Init+0x2ec>)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a49      	ldr	r2, [pc, #292]	; (8002f70 <HAL_GPIO_Init+0x2f0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x202>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a48      	ldr	r2, [pc, #288]	; (8002f74 <HAL_GPIO_Init+0x2f4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x1fe>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a47      	ldr	r2, [pc, #284]	; (8002f78 <HAL_GPIO_Init+0x2f8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x1fa>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a46      	ldr	r2, [pc, #280]	; (8002f7c <HAL_GPIO_Init+0x2fc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x1f6>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a45      	ldr	r2, [pc, #276]	; (8002f80 <HAL_GPIO_Init+0x300>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x1f2>
 8002e6e:	2304      	movs	r3, #4
 8002e70:	e008      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e72:	2307      	movs	r3, #7
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e76:	2303      	movs	r3, #3
 8002e78:	e004      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e002      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e82:	2300      	movs	r3, #0
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f002 0203 	and.w	r2, r2, #3
 8002e8a:	0092      	lsls	r2, r2, #2
 8002e8c:	4093      	lsls	r3, r2
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e94:	4935      	ldr	r1, [pc, #212]	; (8002f6c <HAL_GPIO_Init+0x2ec>)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea2:	4b38      	ldr	r3, [pc, #224]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef0:	4a24      	ldr	r2, [pc, #144]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f1a:	4a1a      	ldr	r2, [pc, #104]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f44:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b0f      	cmp	r3, #15
 8002f54:	f67f aea2 	bls.w	8002c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40013800 	.word	0x40013800
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40020400 	.word	0x40020400
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40020c00 	.word	0x40020c00
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40013c00 	.word	0x40013c00

08002f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	807b      	strh	r3, [r7, #2]
 8002f94:	4613      	mov	r3, r2
 8002f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f98:	787b      	ldrb	r3, [r7, #1]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9e:	887a      	ldrh	r2, [r7, #2]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa4:	e003      	b.n	8002fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	041a      	lsls	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	619a      	str	r2, [r3, #24]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e267      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d075      	beq.n	80030c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fda:	4b88      	ldr	r3, [pc, #544]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d00c      	beq.n	8003000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe6:	4b85      	ldr	r3, [pc, #532]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d112      	bne.n	8003018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff2:	4b82      	ldr	r3, [pc, #520]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffe:	d10b      	bne.n	8003018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	4b7e      	ldr	r3, [pc, #504]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d05b      	beq.n	80030c4 <HAL_RCC_OscConfig+0x108>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d157      	bne.n	80030c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e242      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d106      	bne.n	8003030 <HAL_RCC_OscConfig+0x74>
 8003022:	4b76      	ldr	r3, [pc, #472]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a75      	ldr	r2, [pc, #468]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e01d      	b.n	800306c <HAL_RCC_OscConfig+0xb0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x98>
 800303a:	4b70      	ldr	r3, [pc, #448]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a6f      	ldr	r2, [pc, #444]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b6d      	ldr	r3, [pc, #436]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6c      	ldr	r2, [pc, #432]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e00b      	b.n	800306c <HAL_RCC_OscConfig+0xb0>
 8003054:	4b69      	ldr	r3, [pc, #420]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a68      	ldr	r2, [pc, #416]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b66      	ldr	r3, [pc, #408]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a65      	ldr	r2, [pc, #404]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fc46 	bl	8001904 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe fc42 	bl	8001904 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e207      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4b5b      	ldr	r3, [pc, #364]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0xc0>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fc32 	bl	8001904 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe fc2e 	bl	8001904 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1f3      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	4b51      	ldr	r3, [pc, #324]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0xe8>
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d063      	beq.n	800319a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d2:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d11c      	bne.n	8003124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ea:	4b44      	ldr	r3, [pc, #272]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d116      	bne.n	8003124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f6:	4b41      	ldr	r3, [pc, #260]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_RCC_OscConfig+0x152>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e1c7      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310e:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4937      	ldr	r1, [pc, #220]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	e03a      	b.n	800319a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d020      	beq.n	800316e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800312c:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCC_OscConfig+0x244>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fe fbe7 	bl	8001904 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313a:	f7fe fbe3 	bl	8001904 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e1a8      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003158:	4b28      	ldr	r3, [pc, #160]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4925      	ldr	r1, [pc, #148]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]
 800316c:	e015      	b.n	800319a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316e:	4b24      	ldr	r3, [pc, #144]	; (8003200 <HAL_RCC_OscConfig+0x244>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe fbc6 	bl	8001904 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800317c:	f7fe fbc2 	bl	8001904 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e187      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d036      	beq.n	8003214 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <HAL_RCC_OscConfig+0x248>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe fba6 	bl	8001904 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031bc:	f7fe fba2 	bl	8001904 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e167      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80031d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x200>
 80031da:	e01b      	b.n	8003214 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_OscConfig+0x248>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e2:	f7fe fb8f 	bl	8001904 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e8:	e00e      	b.n	8003208 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ea:	f7fe fb8b 	bl	8001904 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d907      	bls.n	8003208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e150      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
 80031fc:	40023800 	.word	0x40023800
 8003200:	42470000 	.word	0x42470000
 8003204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003208:	4b88      	ldr	r3, [pc, #544]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800320a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ea      	bne.n	80031ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8097 	beq.w	8003350 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003226:	4b81      	ldr	r3, [pc, #516]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10f      	bne.n	8003252 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	4b7d      	ldr	r3, [pc, #500]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a7c      	ldr	r2, [pc, #496]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800323c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
 8003242:	4b7a      	ldr	r3, [pc, #488]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003252:	4b77      	ldr	r3, [pc, #476]	; (8003430 <HAL_RCC_OscConfig+0x474>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d118      	bne.n	8003290 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800325e:	4b74      	ldr	r3, [pc, #464]	; (8003430 <HAL_RCC_OscConfig+0x474>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a73      	ldr	r2, [pc, #460]	; (8003430 <HAL_RCC_OscConfig+0x474>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326a:	f7fe fb4b 	bl	8001904 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003272:	f7fe fb47 	bl	8001904 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e10c      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003284:	4b6a      	ldr	r3, [pc, #424]	; (8003430 <HAL_RCC_OscConfig+0x474>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x2ea>
 8003298:	4b64      	ldr	r3, [pc, #400]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4a63      	ldr	r2, [pc, #396]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	6713      	str	r3, [r2, #112]	; 0x70
 80032a4:	e01c      	b.n	80032e0 <HAL_RCC_OscConfig+0x324>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b05      	cmp	r3, #5
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x30c>
 80032ae:	4b5f      	ldr	r3, [pc, #380]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a5e      	ldr	r2, [pc, #376]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ba:	4b5c      	ldr	r3, [pc, #368]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a5b      	ldr	r2, [pc, #364]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	e00b      	b.n	80032e0 <HAL_RCC_OscConfig+0x324>
 80032c8:	4b58      	ldr	r3, [pc, #352]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	4a57      	ldr	r2, [pc, #348]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	6713      	str	r3, [r2, #112]	; 0x70
 80032d4:	4b55      	ldr	r3, [pc, #340]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a54      	ldr	r2, [pc, #336]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032da:	f023 0304 	bic.w	r3, r3, #4
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d015      	beq.n	8003314 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7fe fb0c 	bl	8001904 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fe fb08 	bl	8001904 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e0cb      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003306:	4b49      	ldr	r3, [pc, #292]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0ee      	beq.n	80032f0 <HAL_RCC_OscConfig+0x334>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003314:	f7fe faf6 	bl	8001904 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331a:	e00a      	b.n	8003332 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331c:	f7fe faf2 	bl	8001904 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0b5      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003332:	4b3e      	ldr	r3, [pc, #248]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1ee      	bne.n	800331c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800333e:	7dfb      	ldrb	r3, [r7, #23]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003344:	4b39      	ldr	r3, [pc, #228]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	4a38      	ldr	r2, [pc, #224]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800334a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80a1 	beq.w	800349c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800335a:	4b34      	ldr	r3, [pc, #208]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b08      	cmp	r3, #8
 8003364:	d05c      	beq.n	8003420 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d141      	bne.n	80033f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <HAL_RCC_OscConfig+0x478>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fac6 	bl	8001904 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe fac2 	bl	8001904 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e087      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338e:	4b27      	ldr	r3, [pc, #156]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69da      	ldr	r2, [r3, #28]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	019b      	lsls	r3, r3, #6
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	3b01      	subs	r3, #1
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	491b      	ldr	r1, [pc, #108]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_RCC_OscConfig+0x478>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7fe fa9b 	bl	8001904 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d2:	f7fe fa97 	bl	8001904 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e05c      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x416>
 80033f0:	e054      	b.n	800349c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_RCC_OscConfig+0x478>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe fa84 	bl	8001904 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fa80 	bl	8001904 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e045      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x444>
 800341e:	e03d      	b.n	800349c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e038      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
 800342c:	40023800 	.word	0x40023800
 8003430:	40007000 	.word	0x40007000
 8003434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_RCC_OscConfig+0x4ec>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d028      	beq.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d121      	bne.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d11a      	bne.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003468:	4013      	ands	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800346e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003470:	4293      	cmp	r3, r2
 8003472:	d111      	bne.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	085b      	lsrs	r3, r3, #1
 8003480:	3b01      	subs	r3, #1
 8003482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d107      	bne.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800

080034ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0cc      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c0:	4b68      	ldr	r3, [pc, #416]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d90c      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b63      	ldr	r3, [pc, #396]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0b8      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d020      	beq.n	8003536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003500:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a58      	ldr	r2, [pc, #352]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800350a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a52      	ldr	r2, [pc, #328]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003524:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	494d      	ldr	r1, [pc, #308]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d044      	beq.n	80035cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d119      	bne.n	800358a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d003      	beq.n	800356a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003566:	2b03      	cmp	r3, #3
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356a:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e06f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357a:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e067      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 0203 	bic.w	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4934      	ldr	r1, [pc, #208]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	4313      	orrs	r3, r2
 800359a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800359c:	f7fe f9b2 	bl	8001904 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a4:	f7fe f9ae 	bl	8001904 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e04f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 020c 	and.w	r2, r3, #12
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d1eb      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d20c      	bcs.n	80035f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b22      	ldr	r3, [pc, #136]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e032      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4916      	ldr	r1, [pc, #88]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	490e      	ldr	r1, [pc, #56]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003632:	f000 f821 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 8003636:	4602      	mov	r2, r0
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	490a      	ldr	r1, [pc, #40]	; (800366c <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	5ccb      	ldrb	r3, [r1, r3]
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	4a09      	ldr	r2, [pc, #36]	; (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe f912 	bl	800187c <HAL_InitTick>

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023c00 	.word	0x40023c00
 8003668:	40023800 	.word	0x40023800
 800366c:	080080e0 	.word	0x080080e0
 8003670:	20000008 	.word	0x20000008
 8003674:	2000000c 	.word	0x2000000c

08003678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367c:	b090      	sub	sp, #64	; 0x40
 800367e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
 8003684:	2300      	movs	r3, #0
 8003686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003688:	2300      	movs	r3, #0
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003690:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 030c 	and.w	r3, r3, #12
 8003698:	2b08      	cmp	r3, #8
 800369a:	d00d      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x40>
 800369c:	2b08      	cmp	r3, #8
 800369e:	f200 80a1 	bhi.w	80037e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x34>
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036aa:	e09b      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ac:	4b53      	ldr	r3, [pc, #332]	; (80037fc <HAL_RCC_GetSysClockFreq+0x184>)
 80036ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036b0:	e09b      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036b2:	4b53      	ldr	r3, [pc, #332]	; (8003800 <HAL_RCC_GetSysClockFreq+0x188>)
 80036b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036b6:	e098      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b8:	4b4f      	ldr	r3, [pc, #316]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036c2:	4b4d      	ldr	r3, [pc, #308]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d028      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ce:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	099b      	lsrs	r3, r3, #6
 80036d4:	2200      	movs	r2, #0
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	627a      	str	r2, [r7, #36]	; 0x24
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036e0:	2100      	movs	r1, #0
 80036e2:	4b47      	ldr	r3, [pc, #284]	; (8003800 <HAL_RCC_GetSysClockFreq+0x188>)
 80036e4:	fb03 f201 	mul.w	r2, r3, r1
 80036e8:	2300      	movs	r3, #0
 80036ea:	fb00 f303 	mul.w	r3, r0, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	4a43      	ldr	r2, [pc, #268]	; (8003800 <HAL_RCC_GetSysClockFreq+0x188>)
 80036f2:	fba0 1202 	umull	r1, r2, r0, r2
 80036f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036f8:	460a      	mov	r2, r1
 80036fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80036fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fe:	4413      	add	r3, r2
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003704:	2200      	movs	r2, #0
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	61fa      	str	r2, [r7, #28]
 800370a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800370e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003712:	f7fd fab1 	bl	8000c78 <__aeabi_uldivmod>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4613      	mov	r3, r2
 800371c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371e:	e053      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003720:	4b35      	ldr	r3, [pc, #212]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	099b      	lsrs	r3, r3, #6
 8003726:	2200      	movs	r2, #0
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	617a      	str	r2, [r7, #20]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003732:	f04f 0b00 	mov.w	fp, #0
 8003736:	4652      	mov	r2, sl
 8003738:	465b      	mov	r3, fp
 800373a:	f04f 0000 	mov.w	r0, #0
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	0159      	lsls	r1, r3, #5
 8003744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003748:	0150      	lsls	r0, r2, #5
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	ebb2 080a 	subs.w	r8, r2, sl
 8003752:	eb63 090b 	sbc.w	r9, r3, fp
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003762:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003766:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800376a:	ebb2 0408 	subs.w	r4, r2, r8
 800376e:	eb63 0509 	sbc.w	r5, r3, r9
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	00eb      	lsls	r3, r5, #3
 800377c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003780:	00e2      	lsls	r2, r4, #3
 8003782:	4614      	mov	r4, r2
 8003784:	461d      	mov	r5, r3
 8003786:	eb14 030a 	adds.w	r3, r4, sl
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	eb45 030b 	adc.w	r3, r5, fp
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800379e:	4629      	mov	r1, r5
 80037a0:	028b      	lsls	r3, r1, #10
 80037a2:	4621      	mov	r1, r4
 80037a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a8:	4621      	mov	r1, r4
 80037aa:	028a      	lsls	r2, r1, #10
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	2200      	movs	r2, #0
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	60fa      	str	r2, [r7, #12]
 80037b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037bc:	f7fd fa5c 	bl	8000c78 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4613      	mov	r3, r2
 80037c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	3301      	adds	r3, #1
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037e2:	e002      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_GetSysClockFreq+0x184>)
 80037e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3740      	adds	r7, #64	; 0x40
 80037f0:	46bd      	mov	sp, r7
 80037f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	00f42400 	.word	0x00f42400
 8003800:	017d7840 	.word	0x017d7840

08003804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_RCC_GetHCLKFreq+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000008 	.word	0x20000008

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003820:	f7ff fff0 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	0a9b      	lsrs	r3, r3, #10
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4903      	ldr	r1, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	080080f0 	.word	0x080080f0

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003848:	f7ff ffdc 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0b5b      	lsrs	r3, r3, #13
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	080080f0 	.word	0x080080f0

0800386c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e03f      	b.n	80038fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fd ff5e 	bl	8001754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	; 0x24
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f929 	bl	8003b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b08a      	sub	sp, #40	; 0x28
 800390a:	af02      	add	r7, sp, #8
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	603b      	str	r3, [r7, #0]
 8003912:	4613      	mov	r3, r2
 8003914:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b20      	cmp	r3, #32
 8003924:	d17c      	bne.n	8003a20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <HAL_UART_Transmit+0x2c>
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e075      	b.n	8003a22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_UART_Transmit+0x3e>
 8003940:	2302      	movs	r3, #2
 8003942:	e06e      	b.n	8003a22 <HAL_UART_Transmit+0x11c>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2221      	movs	r2, #33	; 0x21
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800395a:	f7fd ffd3 	bl	8001904 <HAL_GetTick>
 800395e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	88fa      	ldrh	r2, [r7, #6]
 800396a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003974:	d108      	bne.n	8003988 <HAL_UART_Transmit+0x82>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d104      	bne.n	8003988 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	e003      	b.n	8003990 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003998:	e02a      	b.n	80039f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f840 	bl	8003a2a <UART_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e036      	b.n	8003a22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	3302      	adds	r3, #2
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	e007      	b.n	80039e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	781a      	ldrb	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3301      	adds	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1cf      	bne.n	800399a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2140      	movs	r1, #64	; 0x40
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f810 	bl	8003a2a <UART_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e006      	b.n	8003a22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e000      	b.n	8003a22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b090      	sub	sp, #64	; 0x40
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a3a:	e050      	b.n	8003ade <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d04c      	beq.n	8003ade <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a4a:	f7fd ff5b 	bl	8001904 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d241      	bcs.n	8003ade <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	330c      	adds	r3, #12
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a7a:	637a      	str	r2, [r7, #52]	; 0x34
 8003a7c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e5      	bne.n	8003a5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3314      	adds	r3, #20
 8003a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aae:	623a      	str	r2, [r7, #32]
 8003ab0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	69f9      	ldr	r1, [r7, #28]
 8003ab4:	6a3a      	ldr	r2, [r7, #32]
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e5      	bne.n	8003a8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e00f      	b.n	8003afe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	bf0c      	ite	eq
 8003aee:	2301      	moveq	r3, #1
 8003af0:	2300      	movne	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d09f      	beq.n	8003a3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3740      	adds	r7, #64	; 0x40
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b0c:	b0c0      	sub	sp, #256	; 0x100
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	68d9      	ldr	r1, [r3, #12]
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	ea40 0301 	orr.w	r3, r0, r1
 8003b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b60:	f021 010c 	bic.w	r1, r1, #12
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b82:	6999      	ldr	r1, [r3, #24]
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	ea40 0301 	orr.w	r3, r0, r1
 8003b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b8f      	ldr	r3, [pc, #572]	; (8003dd4 <UART_SetConfig+0x2cc>)
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d005      	beq.n	8003ba8 <UART_SetConfig+0xa0>
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b8d      	ldr	r3, [pc, #564]	; (8003dd8 <UART_SetConfig+0x2d0>)
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d104      	bne.n	8003bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ba8:	f7ff fe4c 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 8003bac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bb0:	e003      	b.n	8003bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bb2:	f7ff fe33 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8003bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc4:	f040 810c 	bne.w	8003de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bda:	4622      	mov	r2, r4
 8003bdc:	462b      	mov	r3, r5
 8003bde:	1891      	adds	r1, r2, r2
 8003be0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003be2:	415b      	adcs	r3, r3
 8003be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bea:	4621      	mov	r1, r4
 8003bec:	eb12 0801 	adds.w	r8, r2, r1
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	eb43 0901 	adc.w	r9, r3, r1
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c0a:	4690      	mov	r8, r2
 8003c0c:	4699      	mov	r9, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	eb18 0303 	adds.w	r3, r8, r3
 8003c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c18:	462b      	mov	r3, r5
 8003c1a:	eb49 0303 	adc.w	r3, r9, r3
 8003c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c36:	460b      	mov	r3, r1
 8003c38:	18db      	adds	r3, r3, r3
 8003c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	eb42 0303 	adc.w	r3, r2, r3
 8003c42:	657b      	str	r3, [r7, #84]	; 0x54
 8003c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c4c:	f7fd f814 	bl	8000c78 <__aeabi_uldivmod>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4b61      	ldr	r3, [pc, #388]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003c56:	fba3 2302 	umull	r2, r3, r3, r2
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	011c      	lsls	r4, r3, #4
 8003c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c70:	4642      	mov	r2, r8
 8003c72:	464b      	mov	r3, r9
 8003c74:	1891      	adds	r1, r2, r2
 8003c76:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c78:	415b      	adcs	r3, r3
 8003c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c80:	4641      	mov	r1, r8
 8003c82:	eb12 0a01 	adds.w	sl, r2, r1
 8003c86:	4649      	mov	r1, r9
 8003c88:	eb43 0b01 	adc.w	fp, r3, r1
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ca0:	4692      	mov	sl, r2
 8003ca2:	469b      	mov	fp, r3
 8003ca4:	4643      	mov	r3, r8
 8003ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8003caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8003cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	18db      	adds	r3, r3, r3
 8003cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	eb42 0303 	adc.w	r3, r2, r3
 8003cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ce2:	f7fc ffc9 	bl	8000c78 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	4b3b      	ldr	r3, [pc, #236]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003cee:	fba3 2301 	umull	r2, r3, r3, r1
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2264      	movs	r2, #100	; 0x64
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	1acb      	subs	r3, r1, r3
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d02:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003d04:	fba3 2302 	umull	r2, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d10:	441c      	add	r4, r3
 8003d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d24:	4642      	mov	r2, r8
 8003d26:	464b      	mov	r3, r9
 8003d28:	1891      	adds	r1, r2, r2
 8003d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d2c:	415b      	adcs	r3, r3
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d34:	4641      	mov	r1, r8
 8003d36:	1851      	adds	r1, r2, r1
 8003d38:	6339      	str	r1, [r7, #48]	; 0x30
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	414b      	adcs	r3, r1
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	00cb      	lsls	r3, r1, #3
 8003d50:	4651      	mov	r1, sl
 8003d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d56:	4651      	mov	r1, sl
 8003d58:	00ca      	lsls	r2, r1, #3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4642      	mov	r2, r8
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d68:	464b      	mov	r3, r9
 8003d6a:	460a      	mov	r2, r1
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d88:	460b      	mov	r3, r1
 8003d8a:	18db      	adds	r3, r3, r3
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8e:	4613      	mov	r3, r2
 8003d90:	eb42 0303 	adc.w	r3, r2, r3
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d9e:	f7fc ff6b 	bl	8000c78 <__aeabi_uldivmod>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003da8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	2164      	movs	r1, #100	; 0x64
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	3332      	adds	r3, #50	; 0x32
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <UART_SetConfig+0x2d4>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	f003 0207 	and.w	r2, r3, #7
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4422      	add	r2, r4
 8003dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dd0:	e105      	b.n	8003fde <UART_SetConfig+0x4d6>
 8003dd2:	bf00      	nop
 8003dd4:	40011000 	.word	0x40011000
 8003dd8:	40011400 	.word	0x40011400
 8003ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003df2:	4642      	mov	r2, r8
 8003df4:	464b      	mov	r3, r9
 8003df6:	1891      	adds	r1, r2, r2
 8003df8:	6239      	str	r1, [r7, #32]
 8003dfa:	415b      	adcs	r3, r3
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e02:	4641      	mov	r1, r8
 8003e04:	1854      	adds	r4, r2, r1
 8003e06:	4649      	mov	r1, r9
 8003e08:	eb43 0501 	adc.w	r5, r3, r1
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	00eb      	lsls	r3, r5, #3
 8003e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e1a:	00e2      	lsls	r2, r4, #3
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	461d      	mov	r5, r3
 8003e20:	4643      	mov	r3, r8
 8003e22:	18e3      	adds	r3, r4, r3
 8003e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e28:	464b      	mov	r3, r9
 8003e2a:	eb45 0303 	adc.w	r3, r5, r3
 8003e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e4e:	4629      	mov	r1, r5
 8003e50:	008b      	lsls	r3, r1, #2
 8003e52:	4621      	mov	r1, r4
 8003e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e58:	4621      	mov	r1, r4
 8003e5a:	008a      	lsls	r2, r1, #2
 8003e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e60:	f7fc ff0a 	bl	8000c78 <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4b60      	ldr	r3, [pc, #384]	; (8003fec <UART_SetConfig+0x4e4>)
 8003e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	011c      	lsls	r4, r3, #4
 8003e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e84:	4642      	mov	r2, r8
 8003e86:	464b      	mov	r3, r9
 8003e88:	1891      	adds	r1, r2, r2
 8003e8a:	61b9      	str	r1, [r7, #24]
 8003e8c:	415b      	adcs	r3, r3
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e94:	4641      	mov	r1, r8
 8003e96:	1851      	adds	r1, r2, r1
 8003e98:	6139      	str	r1, [r7, #16]
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	414b      	adcs	r3, r1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eac:	4659      	mov	r1, fp
 8003eae:	00cb      	lsls	r3, r1, #3
 8003eb0:	4651      	mov	r1, sl
 8003eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	00ca      	lsls	r2, r1, #3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	189b      	adds	r3, r3, r2
 8003ec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ec8:	464b      	mov	r3, r9
 8003eca:	460a      	mov	r2, r1
 8003ecc:	eb42 0303 	adc.w	r3, r2, r3
 8003ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ede:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003eec:	4649      	mov	r1, r9
 8003eee:	008b      	lsls	r3, r1, #2
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef6:	4641      	mov	r1, r8
 8003ef8:	008a      	lsls	r2, r1, #2
 8003efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003efe:	f7fc febb 	bl	8000c78 <__aeabi_uldivmod>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4b39      	ldr	r3, [pc, #228]	; (8003fec <UART_SetConfig+0x4e4>)
 8003f08:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	2164      	movs	r1, #100	; 0x64
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	3332      	adds	r3, #50	; 0x32
 8003f1a:	4a34      	ldr	r2, [pc, #208]	; (8003fec <UART_SetConfig+0x4e4>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f26:	441c      	add	r4, r3
 8003f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f30:	677a      	str	r2, [r7, #116]	; 0x74
 8003f32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f36:	4642      	mov	r2, r8
 8003f38:	464b      	mov	r3, r9
 8003f3a:	1891      	adds	r1, r2, r2
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	415b      	adcs	r3, r3
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f46:	4641      	mov	r1, r8
 8003f48:	1851      	adds	r1, r2, r1
 8003f4a:	6039      	str	r1, [r7, #0]
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	414b      	adcs	r3, r1
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f5e:	4659      	mov	r1, fp
 8003f60:	00cb      	lsls	r3, r1, #3
 8003f62:	4651      	mov	r1, sl
 8003f64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f68:	4651      	mov	r1, sl
 8003f6a:	00ca      	lsls	r2, r1, #3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4603      	mov	r3, r0
 8003f72:	4642      	mov	r2, r8
 8003f74:	189b      	adds	r3, r3, r2
 8003f76:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f78:	464b      	mov	r3, r9
 8003f7a:	460a      	mov	r2, r1
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f8c:	667a      	str	r2, [r7, #100]	; 0x64
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	008b      	lsls	r3, r1, #2
 8003f9e:	4641      	mov	r1, r8
 8003fa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	008a      	lsls	r2, r1, #2
 8003fa8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fac:	f7fc fe64 	bl	8000c78 <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <UART_SetConfig+0x4e4>)
 8003fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2164      	movs	r1, #100	; 0x64
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	3332      	adds	r3, #50	; 0x32
 8003fc8:	4a08      	ldr	r2, [pc, #32]	; (8003fec <UART_SetConfig+0x4e4>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4422      	add	r2, r4
 8003fdc:	609a      	str	r2, [r3, #8]
}
 8003fde:	bf00      	nop
 8003fe0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fea:	bf00      	nop
 8003fec:	51eb851f 	.word	0x51eb851f

08003ff0 <arm_max_f32>:
 8003ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff4:	1e4f      	subs	r7, r1, #1
 8003ff6:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8003ffa:	f100 0e04 	add.w	lr, r0, #4
 8003ffe:	edd0 7a00 	vldr	s15, [r0]
 8004002:	d058      	beq.n	80040b6 <arm_max_f32+0xc6>
 8004004:	3014      	adds	r0, #20
 8004006:	46c4      	mov	ip, r8
 8004008:	2604      	movs	r6, #4
 800400a:	2400      	movs	r4, #0
 800400c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8004010:	ed50 6a03 	vldr	s13, [r0, #-12]
 8004014:	ed10 7a02 	vldr	s14, [r0, #-8]
 8004018:	ed50 5a01 	vldr	s11, [r0, #-4]
 800401c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8004020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004024:	bfc8      	it	gt
 8004026:	eef0 7a46 	vmovgt.f32	s15, s12
 800402a:	f1a6 0503 	sub.w	r5, r6, #3
 800402e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004032:	bfc8      	it	gt
 8004034:	462c      	movgt	r4, r5
 8004036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403a:	bf48      	it	mi
 800403c:	eef0 7a66 	vmovmi.f32	s15, s13
 8004040:	f1a6 0502 	sub.w	r5, r6, #2
 8004044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004048:	bf48      	it	mi
 800404a:	462c      	movmi	r4, r5
 800404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004050:	bf48      	it	mi
 8004052:	eef0 7a47 	vmovmi.f32	s15, s14
 8004056:	f106 35ff 	add.w	r5, r6, #4294967295
 800405a:	eef4 7ae5 	vcmpe.f32	s15, s11
 800405e:	bf48      	it	mi
 8004060:	462c      	movmi	r4, r5
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	bf48      	it	mi
 8004068:	4634      	movmi	r4, r6
 800406a:	bf48      	it	mi
 800406c:	eef0 7a65 	vmovmi.f32	s15, s11
 8004070:	f1bc 0c01 	subs.w	ip, ip, #1
 8004074:	f100 0010 	add.w	r0, r0, #16
 8004078:	f106 0604 	add.w	r6, r6, #4
 800407c:	d1c6      	bne.n	800400c <arm_max_f32+0x1c>
 800407e:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8004082:	f017 0003 	ands.w	r0, r7, #3
 8004086:	d018      	beq.n	80040ba <arm_max_f32+0xca>
 8004088:	1a08      	subs	r0, r1, r0
 800408a:	ecbe 7a01 	vldmia	lr!, {s14}
 800408e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004096:	bfc8      	it	gt
 8004098:	4604      	movgt	r4, r0
 800409a:	f100 0001 	add.w	r0, r0, #1
 800409e:	bfd8      	it	le
 80040a0:	eeb0 7a67 	vmovle.f32	s14, s15
 80040a4:	4281      	cmp	r1, r0
 80040a6:	eef0 7a47 	vmov.f32	s15, s14
 80040aa:	d1ee      	bne.n	800408a <arm_max_f32+0x9a>
 80040ac:	ed82 7a00 	vstr	s14, [r2]
 80040b0:	601c      	str	r4, [r3, #0]
 80040b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040b6:	4644      	mov	r4, r8
 80040b8:	e7e3      	b.n	8004082 <arm_max_f32+0x92>
 80040ba:	eeb0 7a67 	vmov.f32	s14, s15
 80040be:	e7f5      	b.n	80040ac <arm_max_f32+0xbc>

080040c0 <arm_rfft_fast_init_f32>:
 80040c0:	084b      	lsrs	r3, r1, #1
 80040c2:	2b80      	cmp	r3, #128	; 0x80
 80040c4:	b410      	push	{r4}
 80040c6:	8201      	strh	r1, [r0, #16]
 80040c8:	8003      	strh	r3, [r0, #0]
 80040ca:	d046      	beq.n	800415a <arm_rfft_fast_init_f32+0x9a>
 80040cc:	d916      	bls.n	80040fc <arm_rfft_fast_init_f32+0x3c>
 80040ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d2:	d03c      	beq.n	800414e <arm_rfft_fast_init_f32+0x8e>
 80040d4:	d928      	bls.n	8004128 <arm_rfft_fast_init_f32+0x68>
 80040d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040da:	d01f      	beq.n	800411c <arm_rfft_fast_init_f32+0x5c>
 80040dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e0:	d112      	bne.n	8004108 <arm_rfft_fast_init_f32+0x48>
 80040e2:	4920      	ldr	r1, [pc, #128]	; (8004164 <arm_rfft_fast_init_f32+0xa4>)
 80040e4:	4a20      	ldr	r2, [pc, #128]	; (8004168 <arm_rfft_fast_init_f32+0xa8>)
 80040e6:	4b21      	ldr	r3, [pc, #132]	; (800416c <arm_rfft_fast_init_f32+0xac>)
 80040e8:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80040ec:	8184      	strh	r4, [r0, #12]
 80040ee:	6081      	str	r1, [r0, #8]
 80040f0:	6042      	str	r2, [r0, #4]
 80040f2:	6143      	str	r3, [r0, #20]
 80040f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040f8:	2000      	movs	r0, #0
 80040fa:	4770      	bx	lr
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d01c      	beq.n	800413a <arm_rfft_fast_init_f32+0x7a>
 8004100:	2b40      	cmp	r3, #64	; 0x40
 8004102:	d006      	beq.n	8004112 <arm_rfft_fast_init_f32+0x52>
 8004104:	2b10      	cmp	r3, #16
 8004106:	d01d      	beq.n	8004144 <arm_rfft_fast_init_f32+0x84>
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
 800410c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	2438      	movs	r4, #56	; 0x38
 8004114:	4916      	ldr	r1, [pc, #88]	; (8004170 <arm_rfft_fast_init_f32+0xb0>)
 8004116:	4a17      	ldr	r2, [pc, #92]	; (8004174 <arm_rfft_fast_init_f32+0xb4>)
 8004118:	4b17      	ldr	r3, [pc, #92]	; (8004178 <arm_rfft_fast_init_f32+0xb8>)
 800411a:	e7e7      	b.n	80040ec <arm_rfft_fast_init_f32+0x2c>
 800411c:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004120:	4916      	ldr	r1, [pc, #88]	; (800417c <arm_rfft_fast_init_f32+0xbc>)
 8004122:	4a17      	ldr	r2, [pc, #92]	; (8004180 <arm_rfft_fast_init_f32+0xc0>)
 8004124:	4b17      	ldr	r3, [pc, #92]	; (8004184 <arm_rfft_fast_init_f32+0xc4>)
 8004126:	e7e1      	b.n	80040ec <arm_rfft_fast_init_f32+0x2c>
 8004128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412c:	d1ec      	bne.n	8004108 <arm_rfft_fast_init_f32+0x48>
 800412e:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004132:	4915      	ldr	r1, [pc, #84]	; (8004188 <arm_rfft_fast_init_f32+0xc8>)
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <arm_rfft_fast_init_f32+0xcc>)
 8004136:	4b16      	ldr	r3, [pc, #88]	; (8004190 <arm_rfft_fast_init_f32+0xd0>)
 8004138:	e7d8      	b.n	80040ec <arm_rfft_fast_init_f32+0x2c>
 800413a:	2430      	movs	r4, #48	; 0x30
 800413c:	4915      	ldr	r1, [pc, #84]	; (8004194 <arm_rfft_fast_init_f32+0xd4>)
 800413e:	4a16      	ldr	r2, [pc, #88]	; (8004198 <arm_rfft_fast_init_f32+0xd8>)
 8004140:	4b16      	ldr	r3, [pc, #88]	; (800419c <arm_rfft_fast_init_f32+0xdc>)
 8004142:	e7d3      	b.n	80040ec <arm_rfft_fast_init_f32+0x2c>
 8004144:	2414      	movs	r4, #20
 8004146:	4916      	ldr	r1, [pc, #88]	; (80041a0 <arm_rfft_fast_init_f32+0xe0>)
 8004148:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <arm_rfft_fast_init_f32+0xe4>)
 800414a:	4b17      	ldr	r3, [pc, #92]	; (80041a8 <arm_rfft_fast_init_f32+0xe8>)
 800414c:	e7ce      	b.n	80040ec <arm_rfft_fast_init_f32+0x2c>
 800414e:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004152:	4916      	ldr	r1, [pc, #88]	; (80041ac <arm_rfft_fast_init_f32+0xec>)
 8004154:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <arm_rfft_fast_init_f32+0xf0>)
 8004156:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <arm_rfft_fast_init_f32+0xf4>)
 8004158:	e7c8      	b.n	80040ec <arm_rfft_fast_init_f32+0x2c>
 800415a:	24d0      	movs	r4, #208	; 0xd0
 800415c:	4916      	ldr	r1, [pc, #88]	; (80041b8 <arm_rfft_fast_init_f32+0xf8>)
 800415e:	4a17      	ldr	r2, [pc, #92]	; (80041bc <arm_rfft_fast_init_f32+0xfc>)
 8004160:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <arm_rfft_fast_init_f32+0x100>)
 8004162:	e7c3      	b.n	80040ec <arm_rfft_fast_init_f32+0x2c>
 8004164:	08016f08 	.word	0x08016f08
 8004168:	08008100 	.word	0x08008100
 800416c:	0800e270 	.word	0x0800e270
 8004170:	0800c200 	.word	0x0800c200
 8004174:	08018cc8 	.word	0x08018cc8
 8004178:	0801b1b8 	.word	0x0801b1b8
 800417c:	08014bf0 	.word	0x08014bf0
 8004180:	08012af0 	.word	0x08012af0
 8004184:	0800c270 	.word	0x0800c270
 8004188:	0801ae48 	.word	0x0801ae48
 800418c:	08012270 	.word	0x08012270
 8004190:	08018ec8 	.word	0x08018ec8
 8004194:	08015aa8 	.word	0x08015aa8
 8004198:	08014af0 	.word	0x08014af0
 800419c:	0800c100 	.word	0x0800c100
 80041a0:	08015a00 	.word	0x08015a00
 80041a4:	08012a70 	.word	0x08012a70
 80041a8:	08015a28 	.word	0x08015a28
 80041ac:	080196c8 	.word	0x080196c8
 80041b0:	08015f08 	.word	0x08015f08
 80041b4:	08019a48 	.word	0x08019a48
 80041b8:	0801b3b8 	.word	0x0801b3b8
 80041bc:	08015b08 	.word	0x08015b08
 80041c0:	0801aa48 	.word	0x0801aa48

080041c4 <arm_rfft_fast_f32>:
 80041c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c8:	8a06      	ldrh	r6, [r0, #16]
 80041ca:	0876      	lsrs	r6, r6, #1
 80041cc:	4607      	mov	r7, r0
 80041ce:	4615      	mov	r5, r2
 80041d0:	8006      	strh	r6, [r0, #0]
 80041d2:	460c      	mov	r4, r1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d15c      	bne.n	8004292 <arm_rfft_fast_f32+0xce>
 80041d8:	461a      	mov	r2, r3
 80041da:	2301      	movs	r3, #1
 80041dc:	f000 fbe4 	bl	80049a8 <arm_cfft_f32>
 80041e0:	edd4 7a00 	vldr	s15, [r4]
 80041e4:	ed94 7a01 	vldr	s14, [r4, #4]
 80041e8:	883e      	ldrh	r6, [r7, #0]
 80041ea:	6978      	ldr	r0, [r7, #20]
 80041ec:	ee37 7a07 	vadd.f32	s14, s14, s14
 80041f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041f4:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 80041f8:	ee77 6a87 	vadd.f32	s13, s15, s14
 80041fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004200:	3e01      	subs	r6, #1
 8004202:	ee26 7a83 	vmul.f32	s14, s13, s6
 8004206:	ee67 7a83 	vmul.f32	s15, s15, s6
 800420a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800420e:	ed85 7a00 	vstr	s14, [r5]
 8004212:	edc5 7a01 	vstr	s15, [r5, #4]
 8004216:	3010      	adds	r0, #16
 8004218:	f105 0210 	add.w	r2, r5, #16
 800421c:	3b08      	subs	r3, #8
 800421e:	f104 0110 	add.w	r1, r4, #16
 8004222:	ed93 7a02 	vldr	s14, [r3, #8]
 8004226:	ed51 6a02 	vldr	s13, [r1, #-8]
 800422a:	ed10 6a02 	vldr	s12, [r0, #-8]
 800422e:	edd3 3a03 	vldr	s7, [r3, #12]
 8004232:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004236:	ed50 5a01 	vldr	s11, [r0, #-4]
 800423a:	ee77 7a66 	vsub.f32	s15, s14, s13
 800423e:	ee77 4a26 	vadd.f32	s9, s14, s13
 8004242:	ee33 4a85 	vadd.f32	s8, s7, s10
 8004246:	ee66 6a27 	vmul.f32	s13, s12, s15
 800424a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800424e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8004252:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004256:	ee77 7a05 	vadd.f32	s15, s14, s10
 800425a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800425e:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004262:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004266:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800426a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800426e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8004272:	3e01      	subs	r6, #1
 8004274:	ed02 7a02 	vstr	s14, [r2, #-8]
 8004278:	ed42 7a01 	vstr	s15, [r2, #-4]
 800427c:	f1a3 0308 	sub.w	r3, r3, #8
 8004280:	f101 0108 	add.w	r1, r1, #8
 8004284:	f100 0008 	add.w	r0, r0, #8
 8004288:	f102 0208 	add.w	r2, r2, #8
 800428c:	d1c9      	bne.n	8004222 <arm_rfft_fast_f32+0x5e>
 800428e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004292:	edd1 7a00 	vldr	s15, [r1]
 8004296:	edd1 6a01 	vldr	s13, [r1, #4]
 800429a:	6941      	ldr	r1, [r0, #20]
 800429c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80042a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80042a4:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80042a8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80042ac:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80042b0:	3e01      	subs	r6, #1
 80042b2:	ed82 7a00 	vstr	s14, [r2]
 80042b6:	edc2 7a01 	vstr	s15, [r2, #4]
 80042ba:	00f0      	lsls	r0, r6, #3
 80042bc:	b3ee      	cbz	r6, 800433a <arm_rfft_fast_f32+0x176>
 80042be:	3808      	subs	r0, #8
 80042c0:	f101 0e10 	add.w	lr, r1, #16
 80042c4:	4420      	add	r0, r4
 80042c6:	f104 0110 	add.w	r1, r4, #16
 80042ca:	f102 0c10 	add.w	ip, r2, #16
 80042ce:	ed90 7a02 	vldr	s14, [r0, #8]
 80042d2:	ed51 6a02 	vldr	s13, [r1, #-8]
 80042d6:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80042da:	ed90 4a03 	vldr	s8, [r0, #12]
 80042de:	ed11 5a01 	vldr	s10, [r1, #-4]
 80042e2:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80042e6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80042ea:	ee74 4a05 	vadd.f32	s9, s8, s10
 80042ee:	ee26 3a27 	vmul.f32	s6, s12, s15
 80042f2:	ee77 6a26 	vadd.f32	s13, s14, s13
 80042f6:	ee35 5a44 	vsub.f32	s10, s10, s8
 80042fa:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80042fe:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004302:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004306:	ee26 6a24 	vmul.f32	s12, s12, s9
 800430a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800430e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004312:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8004316:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800431a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800431e:	3e01      	subs	r6, #1
 8004320:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8004324:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8004328:	f1a0 0008 	sub.w	r0, r0, #8
 800432c:	f101 0108 	add.w	r1, r1, #8
 8004330:	f10e 0e08 	add.w	lr, lr, #8
 8004334:	f10c 0c08 	add.w	ip, ip, #8
 8004338:	d1c9      	bne.n	80042ce <arm_rfft_fast_f32+0x10a>
 800433a:	461a      	mov	r2, r3
 800433c:	4629      	mov	r1, r5
 800433e:	4638      	mov	r0, r7
 8004340:	2301      	movs	r3, #1
 8004342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004346:	f000 bb2f 	b.w	80049a8 <arm_cfft_f32>
 800434a:	bf00      	nop

0800434c <arm_cfft_radix8by2_f32>:
 800434c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004350:	ed2d 8b08 	vpush	{d8-d11}
 8004354:	4607      	mov	r7, r0
 8004356:	4608      	mov	r0, r1
 8004358:	f8b7 e000 	ldrh.w	lr, [r7]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8004362:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8004366:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800436a:	f000 80b0 	beq.w	80044ce <arm_cfft_radix8by2_f32+0x182>
 800436e:	008b      	lsls	r3, r1, #2
 8004370:	3310      	adds	r3, #16
 8004372:	18c6      	adds	r6, r0, r3
 8004374:	3210      	adds	r2, #16
 8004376:	4443      	add	r3, r8
 8004378:	f100 0510 	add.w	r5, r0, #16
 800437c:	f108 0410 	add.w	r4, r8, #16
 8004380:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004384:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004388:	ed13 4a04 	vldr	s8, [r3, #-16]
 800438c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004390:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004394:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004398:	ed14 0a02 	vldr	s0, [r4, #-8]
 800439c:	ed54 7a01 	vldr	s15, [r4, #-4]
 80043a0:	ed16 2a04 	vldr	s4, [r6, #-16]
 80043a4:	ed56 2a03 	vldr	s5, [r6, #-12]
 80043a8:	ed15 6a03 	vldr	s12, [r5, #-12]
 80043ac:	ed15 7a01 	vldr	s14, [r5, #-4]
 80043b0:	ed15 3a04 	vldr	s6, [r5, #-16]
 80043b4:	ed56 0a02 	vldr	s1, [r6, #-8]
 80043b8:	ed16 1a01 	vldr	s2, [r6, #-4]
 80043bc:	ed55 4a02 	vldr	s9, [r5, #-8]
 80043c0:	ee73 ba21 	vadd.f32	s23, s6, s3
 80043c4:	ee36 ba26 	vadd.f32	s22, s12, s13
 80043c8:	ee37 aa27 	vadd.f32	s20, s14, s15
 80043cc:	ee72 9a04 	vadd.f32	s19, s4, s8
 80043d0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80043d4:	ee31 8a05 	vadd.f32	s16, s2, s10
 80043d8:	ee74 aa80 	vadd.f32	s21, s9, s0
 80043dc:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80043e0:	ed45 ba04 	vstr	s23, [r5, #-16]
 80043e4:	ed05 ba03 	vstr	s22, [r5, #-12]
 80043e8:	ed45 aa02 	vstr	s21, [r5, #-8]
 80043ec:	ed05 aa01 	vstr	s20, [r5, #-4]
 80043f0:	ed06 8a01 	vstr	s16, [r6, #-4]
 80043f4:	ed46 9a04 	vstr	s19, [r6, #-16]
 80043f8:	ed06 9a03 	vstr	s18, [r6, #-12]
 80043fc:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004400:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004404:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004408:	ed12 6a03 	vldr	s12, [r2, #-12]
 800440c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8004410:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004414:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004418:	ee26 8a86 	vmul.f32	s16, s13, s12
 800441c:	ee24 2a06 	vmul.f32	s4, s8, s12
 8004420:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004424:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004428:	ee23 3a06 	vmul.f32	s6, s6, s12
 800442c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004430:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004434:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004438:	ee36 6a04 	vadd.f32	s12, s12, s8
 800443c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004440:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004444:	ee71 2a88 	vadd.f32	s5, s3, s16
 8004448:	ed44 6a03 	vstr	s13, [r4, #-12]
 800444c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004450:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004454:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800445c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004460:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004464:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004468:	ee35 6a41 	vsub.f32	s12, s10, s2
 800446c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004470:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004474:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004478:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800447c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004480:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004484:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004488:	ee26 7a07 	vmul.f32	s14, s12, s14
 800448c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004490:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004494:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004498:	ee35 6a46 	vsub.f32	s12, s10, s12
 800449c:	ee37 7a26 	vadd.f32	s14, s14, s13
 80044a0:	f1be 0e01 	subs.w	lr, lr, #1
 80044a4:	ed44 5a02 	vstr	s11, [r4, #-8]
 80044a8:	f105 0510 	add.w	r5, r5, #16
 80044ac:	ed44 7a01 	vstr	s15, [r4, #-4]
 80044b0:	f106 0610 	add.w	r6, r6, #16
 80044b4:	ed03 6a02 	vstr	s12, [r3, #-8]
 80044b8:	ed03 7a01 	vstr	s14, [r3, #-4]
 80044bc:	f102 0210 	add.w	r2, r2, #16
 80044c0:	f104 0410 	add.w	r4, r4, #16
 80044c4:	f103 0310 	add.w	r3, r3, #16
 80044c8:	f47f af5a 	bne.w	8004380 <arm_cfft_radix8by2_f32+0x34>
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	b28c      	uxth	r4, r1
 80044d0:	4621      	mov	r1, r4
 80044d2:	2302      	movs	r3, #2
 80044d4:	f000 fbca 	bl	8004c6c <arm_radix8_butterfly_f32>
 80044d8:	ecbd 8b08 	vpop	{d8-d11}
 80044dc:	4621      	mov	r1, r4
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	4640      	mov	r0, r8
 80044e2:	2302      	movs	r3, #2
 80044e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044e8:	f000 bbc0 	b.w	8004c6c <arm_radix8_butterfly_f32>

080044ec <arm_cfft_radix8by4_f32>:
 80044ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f0:	ed2d 8b0a 	vpush	{d8-d12}
 80044f4:	8802      	ldrh	r2, [r0, #0]
 80044f6:	ed91 6a00 	vldr	s12, [r1]
 80044fa:	b08f      	sub	sp, #60	; 0x3c
 80044fc:	460f      	mov	r7, r1
 80044fe:	0852      	lsrs	r2, r2, #1
 8004500:	6841      	ldr	r1, [r0, #4]
 8004502:	900c      	str	r0, [sp, #48]	; 0x30
 8004504:	0093      	lsls	r3, r2, #2
 8004506:	4638      	mov	r0, r7
 8004508:	4418      	add	r0, r3
 800450a:	4606      	mov	r6, r0
 800450c:	9009      	str	r0, [sp, #36]	; 0x24
 800450e:	4418      	add	r0, r3
 8004510:	edd0 6a00 	vldr	s13, [r0]
 8004514:	ed96 4a00 	vldr	s8, [r6]
 8004518:	edd6 2a01 	vldr	s5, [r6, #4]
 800451c:	edd0 7a01 	vldr	s15, [r0, #4]
 8004520:	900a      	str	r0, [sp, #40]	; 0x28
 8004522:	ee76 5a26 	vadd.f32	s11, s12, s13
 8004526:	4604      	mov	r4, r0
 8004528:	4625      	mov	r5, r4
 800452a:	441c      	add	r4, r3
 800452c:	edd4 4a00 	vldr	s9, [r4]
 8004530:	ed97 7a01 	vldr	s14, [r7, #4]
 8004534:	ed94 3a01 	vldr	s6, [r4, #4]
 8004538:	9401      	str	r4, [sp, #4]
 800453a:	ee35 5a84 	vadd.f32	s10, s11, s8
 800453e:	4630      	mov	r0, r6
 8004540:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004544:	463e      	mov	r6, r7
 8004546:	ee15 ea10 	vmov	lr, s10
 800454a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800454e:	f846 eb08 	str.w	lr, [r6], #8
 8004552:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004556:	ed90 5a01 	vldr	s10, [r0, #4]
 800455a:	9605      	str	r6, [sp, #20]
 800455c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004560:	9e01      	ldr	r6, [sp, #4]
 8004562:	9707      	str	r7, [sp, #28]
 8004564:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8004568:	ed96 2a01 	vldr	s4, [r6, #4]
 800456c:	ee36 7a05 	vadd.f32	s14, s12, s10
 8004570:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8004574:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8004578:	ee77 7a84 	vadd.f32	s15, s15, s8
 800457c:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8004580:	4604      	mov	r4, r0
 8004582:	46a3      	mov	fp, r4
 8004584:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004588:	ee35 5a24 	vadd.f32	s10, s10, s9
 800458c:	ee14 8a10 	vmov	r8, s8
 8004590:	46a4      	mov	ip, r4
 8004592:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8004596:	ed87 7a01 	vstr	s14, [r7, #4]
 800459a:	f84b 8b08 	str.w	r8, [fp], #8
 800459e:	f1ac 0704 	sub.w	r7, ip, #4
 80045a2:	ed8c 5a01 	vstr	s10, [ip, #4]
 80045a6:	f101 0c08 	add.w	ip, r1, #8
 80045aa:	462c      	mov	r4, r5
 80045ac:	f8cd c010 	str.w	ip, [sp, #16]
 80045b0:	ee15 ca90 	vmov	ip, s11
 80045b4:	ee36 6a62 	vsub.f32	s12, s12, s5
 80045b8:	f844 cb08 	str.w	ip, [r4], #8
 80045bc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80045c0:	ee36 6a43 	vsub.f32	s12, s12, s6
 80045c4:	9406      	str	r4, [sp, #24]
 80045c6:	ee76 6a83 	vadd.f32	s13, s13, s6
 80045ca:	f101 0410 	add.w	r4, r1, #16
 80045ce:	0852      	lsrs	r2, r2, #1
 80045d0:	9402      	str	r4, [sp, #8]
 80045d2:	ed85 6a01 	vstr	s12, [r5, #4]
 80045d6:	462c      	mov	r4, r5
 80045d8:	f101 0518 	add.w	r5, r1, #24
 80045dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80045de:	46b2      	mov	sl, r6
 80045e0:	9503      	str	r5, [sp, #12]
 80045e2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80045e6:	3a02      	subs	r2, #2
 80045e8:	ee16 5a90 	vmov	r5, s13
 80045ec:	46b6      	mov	lr, r6
 80045ee:	4630      	mov	r0, r6
 80045f0:	0852      	lsrs	r2, r2, #1
 80045f2:	f84a 5b08 	str.w	r5, [sl], #8
 80045f6:	f1a0 0604 	sub.w	r6, r0, #4
 80045fa:	edce 7a01 	vstr	s15, [lr, #4]
 80045fe:	9208      	str	r2, [sp, #32]
 8004600:	f000 8130 	beq.w	8004864 <arm_cfft_radix8by4_f32+0x378>
 8004604:	4691      	mov	r9, r2
 8004606:	9a07      	ldr	r2, [sp, #28]
 8004608:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800460c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004610:	3b08      	subs	r3, #8
 8004612:	f102 0510 	add.w	r5, r2, #16
 8004616:	f101 0c20 	add.w	ip, r1, #32
 800461a:	f1a4 020c 	sub.w	r2, r4, #12
 800461e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8004622:	4433      	add	r3, r6
 8004624:	3410      	adds	r4, #16
 8004626:	4650      	mov	r0, sl
 8004628:	4659      	mov	r1, fp
 800462a:	ed55 3a02 	vldr	s7, [r5, #-8]
 800462e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8004632:	ed91 7a00 	vldr	s14, [r1]
 8004636:	edd0 7a00 	vldr	s15, [r0]
 800463a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800463e:	ed15 4a01 	vldr	s8, [r5, #-4]
 8004642:	edd0 6a01 	vldr	s13, [r0, #4]
 8004646:	ed91 6a01 	vldr	s12, [r1, #4]
 800464a:	ee33 8a85 	vadd.f32	s16, s7, s10
 800464e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8004652:	ee78 4a07 	vadd.f32	s9, s16, s14
 8004656:	ee74 5a65 	vsub.f32	s11, s8, s11
 800465a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800465e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8004662:	ed45 4a02 	vstr	s9, [r5, #-8]
 8004666:	edd1 4a01 	vldr	s9, [r1, #4]
 800466a:	ed90 4a01 	vldr	s8, [r0, #4]
 800466e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8004672:	ee75 aa06 	vadd.f32	s21, s10, s12
 8004676:	ee74 4a84 	vadd.f32	s9, s9, s8
 800467a:	ee35 aac7 	vsub.f32	s20, s11, s14
 800467e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8004682:	edd6 1a00 	vldr	s3, [r6]
 8004686:	edd7 0a00 	vldr	s1, [r7]
 800468a:	ed92 4a02 	vldr	s8, [r2, #8]
 800468e:	edd3 3a02 	vldr	s7, [r3, #8]
 8004692:	ed93 2a01 	vldr	s4, [r3, #4]
 8004696:	ed16 1a01 	vldr	s2, [r6, #-4]
 800469a:	edd2 2a01 	vldr	s5, [r2, #4]
 800469e:	ed57 9a01 	vldr	s19, [r7, #-4]
 80046a2:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80046a6:	ee39 3a81 	vadd.f32	s6, s19, s2
 80046aa:	ee74 8a84 	vadd.f32	s17, s9, s8
 80046ae:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80046b2:	ee78 8aa3 	vadd.f32	s17, s17, s7
 80046b6:	ee7a aae6 	vsub.f32	s21, s21, s13
 80046ba:	ee18 aa90 	vmov	sl, s17
 80046be:	f847 a908 	str.w	sl, [r7], #-8
 80046c2:	edd2 8a01 	vldr	s17, [r2, #4]
 80046c6:	ed93 9a01 	vldr	s18, [r3, #4]
 80046ca:	ee73 8a28 	vadd.f32	s17, s6, s17
 80046ce:	ee3a aa27 	vadd.f32	s20, s20, s15
 80046d2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80046d6:	ee74 0a63 	vsub.f32	s1, s8, s7
 80046da:	edc7 8a01 	vstr	s17, [r7, #4]
 80046de:	ed18 ba02 	vldr	s22, [r8, #-8]
 80046e2:	ed58 8a01 	vldr	s17, [r8, #-4]
 80046e6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80046ea:	ee6a ba28 	vmul.f32	s23, s20, s17
 80046ee:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80046f2:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80046f6:	ee31 9a20 	vadd.f32	s18, s2, s1
 80046fa:	ee79 9a82 	vadd.f32	s19, s19, s4
 80046fe:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8004702:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8004706:	ee69 baa8 	vmul.f32	s23, s19, s17
 800470a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800470e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8004712:	ee69 8a28 	vmul.f32	s17, s18, s17
 8004716:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800471a:	ee1c aa10 	vmov	sl, s24
 800471e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8004722:	f841 ab08 	str.w	sl, [r1], #8
 8004726:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800472a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800472e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8004732:	ee33 3a62 	vsub.f32	s6, s6, s5
 8004736:	ed01 aa01 	vstr	s20, [r1, #-4]
 800473a:	edc2 8a01 	vstr	s17, [r2, #4]
 800473e:	ed82 ba02 	vstr	s22, [r2, #8]
 8004742:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8004746:	ee74 3a63 	vsub.f32	s7, s8, s7
 800474a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800474e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8004752:	ee30 0a46 	vsub.f32	s0, s0, s12
 8004756:	ee33 3a42 	vsub.f32	s6, s6, s4
 800475a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800475e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004762:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8004766:	ee63 8a04 	vmul.f32	s17, s6, s8
 800476a:	ee28 aa24 	vmul.f32	s20, s16, s9
 800476e:	ee60 9a04 	vmul.f32	s19, s0, s8
 8004772:	ee28 8a04 	vmul.f32	s16, s16, s8
 8004776:	ee20 0a24 	vmul.f32	s0, s0, s9
 800477a:	ee63 3a84 	vmul.f32	s7, s7, s8
 800477e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8004782:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8004786:	ee14 aa10 	vmov	sl, s8
 800478a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800478e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8004792:	ed44 9a02 	vstr	s19, [r4, #-8]
 8004796:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800479a:	ed04 0a01 	vstr	s0, [r4, #-4]
 800479e:	f846 a908 	str.w	sl, [r6], #-8
 80047a2:	ee35 6a46 	vsub.f32	s12, s10, s12
 80047a6:	ee35 7a87 	vadd.f32	s14, s11, s14
 80047aa:	edc6 3a01 	vstr	s7, [r6, #4]
 80047ae:	ee76 6a26 	vadd.f32	s13, s12, s13
 80047b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047b6:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80047ba:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80047be:	ee67 5a86 	vmul.f32	s11, s15, s12
 80047c2:	ee26 5a87 	vmul.f32	s10, s13, s14
 80047c6:	ee72 2a62 	vsub.f32	s5, s4, s5
 80047ca:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80047ce:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80047d2:	ee75 5a25 	vadd.f32	s11, s10, s11
 80047d6:	ee62 0a86 	vmul.f32	s1, s5, s12
 80047da:	ee66 6a86 	vmul.f32	s13, s13, s12
 80047de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047e2:	ee21 6a06 	vmul.f32	s12, s2, s12
 80047e6:	ee62 2a87 	vmul.f32	s5, s5, s14
 80047ea:	ee21 1a07 	vmul.f32	s2, s2, s14
 80047ee:	ee15 aa90 	vmov	sl, s11
 80047f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80047f6:	f840 ab08 	str.w	sl, [r0], #8
 80047fa:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80047fe:	ee76 2a22 	vadd.f32	s5, s12, s5
 8004802:	f1b9 0901 	subs.w	r9, r9, #1
 8004806:	ed40 7a01 	vstr	s15, [r0, #-4]
 800480a:	f105 0508 	add.w	r5, r5, #8
 800480e:	ed83 1a02 	vstr	s2, [r3, #8]
 8004812:	edc3 2a01 	vstr	s5, [r3, #4]
 8004816:	f108 0808 	add.w	r8, r8, #8
 800481a:	f1a2 0208 	sub.w	r2, r2, #8
 800481e:	f10c 0c10 	add.w	ip, ip, #16
 8004822:	f104 0408 	add.w	r4, r4, #8
 8004826:	f10e 0e18 	add.w	lr, lr, #24
 800482a:	f1a3 0308 	sub.w	r3, r3, #8
 800482e:	f47f aefc 	bne.w	800462a <arm_cfft_radix8by4_f32+0x13e>
 8004832:	9908      	ldr	r1, [sp, #32]
 8004834:	9802      	ldr	r0, [sp, #8]
 8004836:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800483a:	00cb      	lsls	r3, r1, #3
 800483c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004840:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004844:	9102      	str	r1, [sp, #8]
 8004846:	9905      	ldr	r1, [sp, #20]
 8004848:	4419      	add	r1, r3
 800484a:	9105      	str	r1, [sp, #20]
 800484c:	9904      	ldr	r1, [sp, #16]
 800484e:	4419      	add	r1, r3
 8004850:	9104      	str	r1, [sp, #16]
 8004852:	9906      	ldr	r1, [sp, #24]
 8004854:	449b      	add	fp, r3
 8004856:	4419      	add	r1, r3
 8004858:	449a      	add	sl, r3
 800485a:	9b03      	ldr	r3, [sp, #12]
 800485c:	9106      	str	r1, [sp, #24]
 800485e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004862:	9303      	str	r3, [sp, #12]
 8004864:	9a05      	ldr	r2, [sp, #20]
 8004866:	9806      	ldr	r0, [sp, #24]
 8004868:	ed92 4a00 	vldr	s8, [r2]
 800486c:	ed90 7a00 	vldr	s14, [r0]
 8004870:	ed9b 3a00 	vldr	s6, [fp]
 8004874:	edda 3a00 	vldr	s7, [sl]
 8004878:	edd2 4a01 	vldr	s9, [r2, #4]
 800487c:	edd0 6a01 	vldr	s13, [r0, #4]
 8004880:	ed9a 2a01 	vldr	s4, [sl, #4]
 8004884:	eddb 7a01 	vldr	s15, [fp, #4]
 8004888:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800488c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800488e:	ee34 6a07 	vadd.f32	s12, s8, s14
 8004892:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8004896:	ee36 5a03 	vadd.f32	s10, s12, s6
 800489a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800489e:	ee35 5a23 	vadd.f32	s10, s10, s7
 80048a2:	ee34 7a47 	vsub.f32	s14, s8, s14
 80048a6:	ed82 5a00 	vstr	s10, [r2]
 80048aa:	ed9b 5a01 	vldr	s10, [fp, #4]
 80048ae:	edda 4a01 	vldr	s9, [sl, #4]
 80048b2:	ee35 5a85 	vadd.f32	s10, s11, s10
 80048b6:	ee37 4a27 	vadd.f32	s8, s14, s15
 80048ba:	ee35 5a24 	vadd.f32	s10, s10, s9
 80048be:	ee76 4ac3 	vsub.f32	s9, s13, s6
 80048c2:	ed82 5a01 	vstr	s10, [r2, #4]
 80048c6:	9a04      	ldr	r2, [sp, #16]
 80048c8:	ee34 5aa3 	vadd.f32	s10, s9, s7
 80048cc:	edd2 1a00 	vldr	s3, [r2]
 80048d0:	edd2 2a01 	vldr	s5, [r2, #4]
 80048d4:	9a02      	ldr	r2, [sp, #8]
 80048d6:	ee34 4a42 	vsub.f32	s8, s8, s4
 80048da:	ee36 6a43 	vsub.f32	s12, s12, s6
 80048de:	ee64 4a21 	vmul.f32	s9, s8, s3
 80048e2:	ee24 4a22 	vmul.f32	s8, s8, s5
 80048e6:	ee65 2a22 	vmul.f32	s5, s10, s5
 80048ea:	ee25 5a21 	vmul.f32	s10, s10, s3
 80048ee:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80048f2:	ee35 5a44 	vsub.f32	s10, s10, s8
 80048f6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80048fa:	edcb 2a00 	vstr	s5, [fp]
 80048fe:	ed8b 5a01 	vstr	s10, [fp, #4]
 8004902:	ed92 4a01 	vldr	s8, [r2, #4]
 8004906:	ed92 5a00 	vldr	s10, [r2]
 800490a:	9a03      	ldr	r2, [sp, #12]
 800490c:	ee36 6a63 	vsub.f32	s12, s12, s7
 8004910:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8004914:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004918:	ee25 5a85 	vmul.f32	s10, s11, s10
 800491c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004920:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004924:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004928:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800492c:	ee76 6a83 	vadd.f32	s13, s13, s6
 8004930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004934:	ed80 6a01 	vstr	s12, [r0, #4]
 8004938:	edc0 5a00 	vstr	s11, [r0]
 800493c:	edd2 5a01 	vldr	s11, [r2, #4]
 8004940:	9807      	ldr	r0, [sp, #28]
 8004942:	ee77 7a02 	vadd.f32	s15, s14, s4
 8004946:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800494a:	edd2 6a00 	vldr	s13, [r2]
 800494e:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8004952:	ee67 6a26 	vmul.f32	s13, s14, s13
 8004956:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800495a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800495e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004962:	ee36 7a07 	vadd.f32	s14, s12, s14
 8004966:	edca 7a01 	vstr	s15, [sl, #4]
 800496a:	ed8a 7a00 	vstr	s14, [sl]
 800496e:	6872      	ldr	r2, [r6, #4]
 8004970:	4621      	mov	r1, r4
 8004972:	2304      	movs	r3, #4
 8004974:	f000 f97a 	bl	8004c6c <arm_radix8_butterfly_f32>
 8004978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800497a:	6872      	ldr	r2, [r6, #4]
 800497c:	4621      	mov	r1, r4
 800497e:	2304      	movs	r3, #4
 8004980:	f000 f974 	bl	8004c6c <arm_radix8_butterfly_f32>
 8004984:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004986:	6872      	ldr	r2, [r6, #4]
 8004988:	4621      	mov	r1, r4
 800498a:	2304      	movs	r3, #4
 800498c:	f000 f96e 	bl	8004c6c <arm_radix8_butterfly_f32>
 8004990:	6872      	ldr	r2, [r6, #4]
 8004992:	9801      	ldr	r0, [sp, #4]
 8004994:	4621      	mov	r1, r4
 8004996:	2304      	movs	r3, #4
 8004998:	b00f      	add	sp, #60	; 0x3c
 800499a:	ecbd 8b0a 	vpop	{d8-d12}
 800499e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a2:	f000 b963 	b.w	8004c6c <arm_radix8_butterfly_f32>
 80049a6:	bf00      	nop

080049a8 <arm_cfft_f32>:
 80049a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ac:	2a01      	cmp	r2, #1
 80049ae:	4606      	mov	r6, r0
 80049b0:	4617      	mov	r7, r2
 80049b2:	460c      	mov	r4, r1
 80049b4:	4698      	mov	r8, r3
 80049b6:	8805      	ldrh	r5, [r0, #0]
 80049b8:	d054      	beq.n	8004a64 <arm_cfft_f32+0xbc>
 80049ba:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80049be:	d04c      	beq.n	8004a5a <arm_cfft_f32+0xb2>
 80049c0:	d916      	bls.n	80049f0 <arm_cfft_f32+0x48>
 80049c2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80049c6:	d01a      	beq.n	80049fe <arm_cfft_f32+0x56>
 80049c8:	d95c      	bls.n	8004a84 <arm_cfft_f32+0xdc>
 80049ca:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80049ce:	d044      	beq.n	8004a5a <arm_cfft_f32+0xb2>
 80049d0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80049d4:	d105      	bne.n	80049e2 <arm_cfft_f32+0x3a>
 80049d6:	2301      	movs	r3, #1
 80049d8:	6872      	ldr	r2, [r6, #4]
 80049da:	4629      	mov	r1, r5
 80049dc:	4620      	mov	r0, r4
 80049de:	f000 f945 	bl	8004c6c <arm_radix8_butterfly_f32>
 80049e2:	f1b8 0f00 	cmp.w	r8, #0
 80049e6:	d111      	bne.n	8004a0c <arm_cfft_f32+0x64>
 80049e8:	2f01      	cmp	r7, #1
 80049ea:	d016      	beq.n	8004a1a <arm_cfft_f32+0x72>
 80049ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049f0:	2d20      	cmp	r5, #32
 80049f2:	d032      	beq.n	8004a5a <arm_cfft_f32+0xb2>
 80049f4:	d94a      	bls.n	8004a8c <arm_cfft_f32+0xe4>
 80049f6:	2d40      	cmp	r5, #64	; 0x40
 80049f8:	d0ed      	beq.n	80049d6 <arm_cfft_f32+0x2e>
 80049fa:	2d80      	cmp	r5, #128	; 0x80
 80049fc:	d1f1      	bne.n	80049e2 <arm_cfft_f32+0x3a>
 80049fe:	4621      	mov	r1, r4
 8004a00:	4630      	mov	r0, r6
 8004a02:	f7ff fca3 	bl	800434c <arm_cfft_radix8by2_f32>
 8004a06:	f1b8 0f00 	cmp.w	r8, #0
 8004a0a:	d0ed      	beq.n	80049e8 <arm_cfft_f32+0x40>
 8004a0c:	68b2      	ldr	r2, [r6, #8]
 8004a0e:	89b1      	ldrh	r1, [r6, #12]
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7fb fbe5 	bl	80001e0 <arm_bitreversal_32>
 8004a16:	2f01      	cmp	r7, #1
 8004a18:	d1e8      	bne.n	80049ec <arm_cfft_f32+0x44>
 8004a1a:	ee07 5a90 	vmov	s15, r5
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a26:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a2a:	2d00      	cmp	r5, #0
 8004a2c:	d0de      	beq.n	80049ec <arm_cfft_f32+0x44>
 8004a2e:	f104 0108 	add.w	r1, r4, #8
 8004a32:	2300      	movs	r3, #0
 8004a34:	3301      	adds	r3, #1
 8004a36:	429d      	cmp	r5, r3
 8004a38:	f101 0108 	add.w	r1, r1, #8
 8004a3c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004a40:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004a44:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004a48:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004a4c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004a50:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004a54:	d1ee      	bne.n	8004a34 <arm_cfft_f32+0x8c>
 8004a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f7ff fd45 	bl	80044ec <arm_cfft_radix8by4_f32>
 8004a62:	e7be      	b.n	80049e2 <arm_cfft_f32+0x3a>
 8004a64:	b1ad      	cbz	r5, 8004a92 <arm_cfft_f32+0xea>
 8004a66:	f101 030c 	add.w	r3, r1, #12
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004a70:	3201      	adds	r2, #1
 8004a72:	eef1 7a67 	vneg.f32	s15, s15
 8004a76:	4295      	cmp	r5, r2
 8004a78:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004a7c:	f103 0308 	add.w	r3, r3, #8
 8004a80:	d1f4      	bne.n	8004a6c <arm_cfft_f32+0xc4>
 8004a82:	e79a      	b.n	80049ba <arm_cfft_f32+0x12>
 8004a84:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8004a88:	d0a5      	beq.n	80049d6 <arm_cfft_f32+0x2e>
 8004a8a:	e7aa      	b.n	80049e2 <arm_cfft_f32+0x3a>
 8004a8c:	2d10      	cmp	r5, #16
 8004a8e:	d0b6      	beq.n	80049fe <arm_cfft_f32+0x56>
 8004a90:	e7a7      	b.n	80049e2 <arm_cfft_f32+0x3a>
 8004a92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004a96:	d894      	bhi.n	80049c2 <arm_cfft_f32+0x1a>
 8004a98:	e7aa      	b.n	80049f0 <arm_cfft_f32+0x48>
 8004a9a:	bf00      	nop

08004a9c <arm_cmplx_mag_f32>:
 8004a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	d07f      	beq.n	8004ba8 <arm_cmplx_mag_f32+0x10c>
 8004aa8:	2700      	movs	r7, #0
 8004aaa:	f100 0420 	add.w	r4, r0, #32
 8004aae:	f101 0510 	add.w	r5, r1, #16
 8004ab2:	4646      	mov	r6, r8
 8004ab4:	e05a      	b.n	8004b6c <arm_cmplx_mag_f32+0xd0>
 8004ab6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004aba:	eeb4 0a40 	vcmp.f32	s0, s0
 8004abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac2:	f040 80a4 	bne.w	8004c0e <arm_cmplx_mag_f32+0x172>
 8004ac6:	ed05 0a04 	vstr	s0, [r5, #-16]
 8004aca:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8004ace:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8004ad2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ad6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004ada:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004ade:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae6:	f2c0 808f 	blt.w	8004c08 <arm_cmplx_mag_f32+0x16c>
 8004aea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004aee:	eeb4 0a40 	vcmp.f32	s0, s0
 8004af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af6:	f040 80af 	bne.w	8004c58 <arm_cmplx_mag_f32+0x1bc>
 8004afa:	ed05 0a03 	vstr	s0, [r5, #-12]
 8004afe:	ed54 7a04 	vldr	s15, [r4, #-16]
 8004b02:	ed14 0a03 	vldr	s0, [r4, #-12]
 8004b06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004b0a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004b0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1a:	db72      	blt.n	8004c02 <arm_cmplx_mag_f32+0x166>
 8004b1c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004b20:	eeb4 0a40 	vcmp.f32	s0, s0
 8004b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b28:	f040 808c 	bne.w	8004c44 <arm_cmplx_mag_f32+0x1a8>
 8004b2c:	ed05 0a02 	vstr	s0, [r5, #-8]
 8004b30:	ed54 7a02 	vldr	s15, [r4, #-8]
 8004b34:	ed14 0a01 	vldr	s0, [r4, #-4]
 8004b38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004b3c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004b40:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004b44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4c:	db20      	blt.n	8004b90 <arm_cmplx_mag_f32+0xf4>
 8004b4e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004b52:	eeb4 0a40 	vcmp.f32	s0, s0
 8004b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5a:	d169      	bne.n	8004c30 <arm_cmplx_mag_f32+0x194>
 8004b5c:	3e01      	subs	r6, #1
 8004b5e:	ed05 0a01 	vstr	s0, [r5, #-4]
 8004b62:	f104 0420 	add.w	r4, r4, #32
 8004b66:	f105 0510 	add.w	r5, r5, #16
 8004b6a:	d019      	beq.n	8004ba0 <arm_cmplx_mag_f32+0x104>
 8004b6c:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8004b70:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8004b74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004b78:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004b7c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004b80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b88:	da95      	bge.n	8004ab6 <arm_cmplx_mag_f32+0x1a>
 8004b8a:	f845 7c10 	str.w	r7, [r5, #-16]
 8004b8e:	e79c      	b.n	8004aca <arm_cmplx_mag_f32+0x2e>
 8004b90:	3e01      	subs	r6, #1
 8004b92:	f845 7c04 	str.w	r7, [r5, #-4]
 8004b96:	f104 0420 	add.w	r4, r4, #32
 8004b9a:	f105 0510 	add.w	r5, r5, #16
 8004b9e:	d1e5      	bne.n	8004b6c <arm_cmplx_mag_f32+0xd0>
 8004ba0:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8004ba4:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8004ba8:	f012 0503 	ands.w	r5, r2, #3
 8004bac:	d026      	beq.n	8004bfc <arm_cmplx_mag_f32+0x160>
 8004bae:	2600      	movs	r6, #0
 8004bb0:	f100 0408 	add.w	r4, r0, #8
 8004bb4:	e00c      	b.n	8004bd0 <arm_cmplx_mag_f32+0x134>
 8004bb6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004bba:	eeb4 0a40 	vcmp.f32	s0, s0
 8004bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc2:	d12e      	bne.n	8004c22 <arm_cmplx_mag_f32+0x186>
 8004bc4:	3d01      	subs	r5, #1
 8004bc6:	ed01 0a01 	vstr	s0, [r1, #-4]
 8004bca:	f104 0408 	add.w	r4, r4, #8
 8004bce:	d015      	beq.n	8004bfc <arm_cmplx_mag_f32+0x160>
 8004bd0:	ed54 7a02 	vldr	s15, [r4, #-8]
 8004bd4:	ed14 0a01 	vldr	s0, [r4, #-4]
 8004bd8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004bdc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004be0:	3104      	adds	r1, #4
 8004be2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004be6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bee:	dae2      	bge.n	8004bb6 <arm_cmplx_mag_f32+0x11a>
 8004bf0:	3d01      	subs	r5, #1
 8004bf2:	f841 6c04 	str.w	r6, [r1, #-4]
 8004bf6:	f104 0408 	add.w	r4, r4, #8
 8004bfa:	d1e9      	bne.n	8004bd0 <arm_cmplx_mag_f32+0x134>
 8004bfc:	b004      	add	sp, #16
 8004bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c02:	f845 7c08 	str.w	r7, [r5, #-8]
 8004c06:	e793      	b.n	8004b30 <arm_cmplx_mag_f32+0x94>
 8004c08:	f845 7c0c 	str.w	r7, [r5, #-12]
 8004c0c:	e777      	b.n	8004afe <arm_cmplx_mag_f32+0x62>
 8004c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c12:	9203      	str	r2, [sp, #12]
 8004c14:	9102      	str	r1, [sp, #8]
 8004c16:	9001      	str	r0, [sp, #4]
 8004c18:	f003 fa2e 	bl	8008078 <sqrtf>
 8004c1c:	a801      	add	r0, sp, #4
 8004c1e:	c807      	ldmia	r0, {r0, r1, r2}
 8004c20:	e751      	b.n	8004ac6 <arm_cmplx_mag_f32+0x2a>
 8004c22:	eeb0 0a67 	vmov.f32	s0, s15
 8004c26:	9101      	str	r1, [sp, #4]
 8004c28:	f003 fa26 	bl	8008078 <sqrtf>
 8004c2c:	9901      	ldr	r1, [sp, #4]
 8004c2e:	e7c9      	b.n	8004bc4 <arm_cmplx_mag_f32+0x128>
 8004c30:	eeb0 0a67 	vmov.f32	s0, s15
 8004c34:	9203      	str	r2, [sp, #12]
 8004c36:	9102      	str	r1, [sp, #8]
 8004c38:	9001      	str	r0, [sp, #4]
 8004c3a:	f003 fa1d 	bl	8008078 <sqrtf>
 8004c3e:	a801      	add	r0, sp, #4
 8004c40:	c807      	ldmia	r0, {r0, r1, r2}
 8004c42:	e78b      	b.n	8004b5c <arm_cmplx_mag_f32+0xc0>
 8004c44:	eeb0 0a67 	vmov.f32	s0, s15
 8004c48:	9203      	str	r2, [sp, #12]
 8004c4a:	9102      	str	r1, [sp, #8]
 8004c4c:	9001      	str	r0, [sp, #4]
 8004c4e:	f003 fa13 	bl	8008078 <sqrtf>
 8004c52:	a801      	add	r0, sp, #4
 8004c54:	c807      	ldmia	r0, {r0, r1, r2}
 8004c56:	e769      	b.n	8004b2c <arm_cmplx_mag_f32+0x90>
 8004c58:	eeb0 0a67 	vmov.f32	s0, s15
 8004c5c:	9203      	str	r2, [sp, #12]
 8004c5e:	9102      	str	r1, [sp, #8]
 8004c60:	9001      	str	r0, [sp, #4]
 8004c62:	f003 fa09 	bl	8008078 <sqrtf>
 8004c66:	a801      	add	r0, sp, #4
 8004c68:	c807      	ldmia	r0, {r0, r1, r2}
 8004c6a:	e746      	b.n	8004afa <arm_cmplx_mag_f32+0x5e>

08004c6c <arm_radix8_butterfly_f32>:
 8004c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c70:	ed2d 8b10 	vpush	{d8-d15}
 8004c74:	461c      	mov	r4, r3
 8004c76:	b09d      	sub	sp, #116	; 0x74
 8004c78:	4603      	mov	r3, r0
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	ed9f bac4 	vldr	s22, [pc, #784]	; 8004f90 <arm_radix8_butterfly_f32+0x324>
 8004c80:	9019      	str	r0, [sp, #100]	; 0x64
 8004c82:	921a      	str	r2, [sp, #104]	; 0x68
 8004c84:	468b      	mov	fp, r1
 8004c86:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c88:	468a      	mov	sl, r1
 8004c8a:	46a1      	mov	r9, r4
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8004c92:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004c96:	eb03 0508 	add.w	r5, r3, r8
 8004c9a:	195c      	adds	r4, r3, r5
 8004c9c:	00de      	lsls	r6, r3, #3
 8004c9e:	191a      	adds	r2, r3, r4
 8004ca0:	9600      	str	r6, [sp, #0]
 8004ca2:	1898      	adds	r0, r3, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	9e00      	ldr	r6, [sp, #0]
 8004ca8:	9311      	str	r3, [sp, #68]	; 0x44
 8004caa:	4401      	add	r1, r0
 8004cac:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8004cb0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8004cb4:	19be      	adds	r6, r7, r6
 8004cb6:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8004cba:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8004cbe:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8004cc2:	9f00      	ldr	r7, [sp, #0]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	eb06 0e07 	add.w	lr, r6, r7
 8004cca:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004ccc:	9302      	str	r3, [sp, #8]
 8004cce:	3204      	adds	r2, #4
 8004cd0:	3104      	adds	r1, #4
 8004cd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cd6:	f04f 0c00 	mov.w	ip, #0
 8004cda:	edde 7a00 	vldr	s15, [lr]
 8004cde:	edd6 6a00 	vldr	s13, [r6]
 8004ce2:	ed95 2a00 	vldr	s4, [r5]
 8004ce6:	ed17 aa01 	vldr	s20, [r7, #-4]
 8004cea:	edd4 4a00 	vldr	s9, [r4]
 8004cee:	ed90 5a00 	vldr	s10, [r0]
 8004cf2:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004cf6:	ed51 0a01 	vldr	s1, [r1, #-4]
 8004cfa:	ee77 8a85 	vadd.f32	s17, s15, s10
 8004cfe:	ee76 3a87 	vadd.f32	s7, s13, s14
 8004d02:	ee32 4a20 	vadd.f32	s8, s4, s1
 8004d06:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8004d0a:	ee33 6a84 	vadd.f32	s12, s7, s8
 8004d0e:	ee73 5a28 	vadd.f32	s11, s6, s17
 8004d12:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004d16:	ee75 6a86 	vadd.f32	s13, s11, s12
 8004d1a:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8004d1e:	ed47 6a01 	vstr	s13, [r7, #-4]
 8004d22:	edc4 5a00 	vstr	s11, [r4]
 8004d26:	ed92 9a00 	vldr	s18, [r2]
 8004d2a:	ed95 1a01 	vldr	s2, [r5, #4]
 8004d2e:	edd6 5a01 	vldr	s11, [r6, #4]
 8004d32:	ed91 6a00 	vldr	s12, [r1]
 8004d36:	edd7 2a00 	vldr	s5, [r7]
 8004d3a:	edd4 1a01 	vldr	s3, [r4, #4]
 8004d3e:	edde 6a01 	vldr	s13, [lr, #4]
 8004d42:	edd0 9a01 	vldr	s19, [r0, #4]
 8004d46:	ee72 0a60 	vsub.f32	s1, s4, s1
 8004d4a:	ee71 aa46 	vsub.f32	s21, s2, s12
 8004d4e:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8004d52:	ee37 0a60 	vsub.f32	s0, s14, s1
 8004d56:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8004d5a:	ee37 7a20 	vadd.f32	s14, s14, s1
 8004d5e:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8004d62:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8004d66:	ee75 5a89 	vadd.f32	s11, s11, s18
 8004d6a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8004d6e:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8004d72:	ee31 6a06 	vadd.f32	s12, s2, s12
 8004d76:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004d7a:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8004d7e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8004d82:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8004d86:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004d8a:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8004d8e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8004d92:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004d96:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004d9a:	ee75 8a86 	vadd.f32	s17, s11, s12
 8004d9e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8004da2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004da6:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8004daa:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8004dae:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8004db2:	ee75 4a27 	vadd.f32	s9, s10, s15
 8004db6:	ee71 5a49 	vsub.f32	s11, s2, s18
 8004dba:	ee31 2a09 	vadd.f32	s4, s2, s18
 8004dbe:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004dc2:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8004dc6:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8004dca:	ee73 0a06 	vadd.f32	s1, s6, s12
 8004dce:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8004dd2:	ee36 5a87 	vadd.f32	s10, s13, s14
 8004dd6:	ee32 8a28 	vadd.f32	s16, s4, s17
 8004dda:	ee33 6a46 	vsub.f32	s12, s6, s12
 8004dde:	ee34 4a25 	vadd.f32	s8, s8, s11
 8004de2:	ee33 3a80 	vadd.f32	s6, s7, s0
 8004de6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004dea:	ee71 5a64 	vsub.f32	s11, s2, s9
 8004dee:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8004df2:	ee32 2a68 	vsub.f32	s4, s4, s17
 8004df6:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004dfa:	ee74 4a81 	vadd.f32	s9, s9, s2
 8004dfe:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8004e02:	44dc      	add	ip, fp
 8004e04:	45e2      	cmp	sl, ip
 8004e06:	ed87 8a00 	vstr	s16, [r7]
 8004e0a:	ed84 2a01 	vstr	s4, [r4, #4]
 8004e0e:	441f      	add	r7, r3
 8004e10:	edce 0a00 	vstr	s1, [lr]
 8004e14:	441c      	add	r4, r3
 8004e16:	ed80 6a00 	vstr	s12, [r0]
 8004e1a:	edce 1a01 	vstr	s3, [lr, #4]
 8004e1e:	ed80 4a01 	vstr	s8, [r0, #4]
 8004e22:	449e      	add	lr, r3
 8004e24:	ed86 3a00 	vstr	s6, [r6]
 8004e28:	4418      	add	r0, r3
 8004e2a:	ed41 3a01 	vstr	s7, [r1, #-4]
 8004e2e:	ed02 5a01 	vstr	s10, [r2, #-4]
 8004e32:	ed85 7a00 	vstr	s14, [r5]
 8004e36:	edc6 5a01 	vstr	s11, [r6, #4]
 8004e3a:	edc1 4a00 	vstr	s9, [r1]
 8004e3e:	441e      	add	r6, r3
 8004e40:	edc2 6a00 	vstr	s13, [r2]
 8004e44:	4419      	add	r1, r3
 8004e46:	edc5 7a01 	vstr	s15, [r5, #4]
 8004e4a:	441a      	add	r2, r3
 8004e4c:	441d      	add	r5, r3
 8004e4e:	f63f af44 	bhi.w	8004cda <arm_radix8_butterfly_f32+0x6e>
 8004e52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004e54:	2a07      	cmp	r2, #7
 8004e56:	f240 81f5 	bls.w	8005244 <arm_radix8_butterfly_f32+0x5d8>
 8004e5a:	f108 0101 	add.w	r1, r8, #1
 8004e5e:	188f      	adds	r7, r1, r2
 8004e60:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8004e64:	19d6      	adds	r6, r2, r7
 8004e66:	eb08 0c09 	add.w	ip, r8, r9
 8004e6a:	1994      	adds	r4, r2, r6
 8004e6c:	eb0c 0e09 	add.w	lr, ip, r9
 8004e70:	4610      	mov	r0, r2
 8004e72:	9701      	str	r7, [sp, #4]
 8004e74:	4420      	add	r0, r4
 8004e76:	eb0e 0709 	add.w	r7, lr, r9
 8004e7a:	1815      	adds	r5, r2, r0
 8004e7c:	eb07 0209 	add.w	r2, r7, r9
 8004e80:	9203      	str	r2, [sp, #12]
 8004e82:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004e84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e88:	9117      	str	r1, [sp, #92]	; 0x5c
 8004e8a:	440a      	add	r2, r1
 8004e8c:	9900      	ldr	r1, [sp, #0]
 8004e8e:	3108      	adds	r1, #8
 8004e90:	9100      	str	r1, [sp, #0]
 8004e92:	9902      	ldr	r1, [sp, #8]
 8004e94:	3108      	adds	r1, #8
 8004e96:	9102      	str	r1, [sp, #8]
 8004e98:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004e9a:	00ff      	lsls	r7, r7, #3
 8004e9c:	9715      	str	r7, [sp, #84]	; 0x54
 8004e9e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8004ea2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004ea6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8004eaa:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004eac:	9903      	ldr	r1, [sp, #12]
 8004eae:	19d7      	adds	r7, r2, r7
 8004eb0:	00c9      	lsls	r1, r1, #3
 8004eb2:	9114      	str	r1, [sp, #80]	; 0x50
 8004eb4:	9710      	str	r7, [sp, #64]	; 0x40
 8004eb6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004eb8:	9f00      	ldr	r7, [sp, #0]
 8004eba:	19cf      	adds	r7, r1, r7
 8004ebc:	970d      	str	r7, [sp, #52]	; 0x34
 8004ebe:	9f02      	ldr	r7, [sp, #8]
 8004ec0:	19cf      	adds	r7, r1, r7
 8004ec2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8004ec6:	970c      	str	r7, [sp, #48]	; 0x30
 8004ec8:	9f01      	ldr	r7, [sp, #4]
 8004eca:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8004ece:	3504      	adds	r5, #4
 8004ed0:	3004      	adds	r0, #4
 8004ed2:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8004ed6:	9508      	str	r5, [sp, #32]
 8004ed8:	9009      	str	r0, [sp, #36]	; 0x24
 8004eda:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8004edc:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004ede:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8004ee2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004ee6:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8004eea:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004eec:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8004ef0:	1945      	adds	r5, r0, r5
 8004ef2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004ef6:	460f      	mov	r7, r1
 8004ef8:	3404      	adds	r4, #4
 8004efa:	4641      	mov	r1, r8
 8004efc:	1841      	adds	r1, r0, r1
 8004efe:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8004f02:	940a      	str	r4, [sp, #40]	; 0x28
 8004f04:	eb00 0c06 	add.w	ip, r0, r6
 8004f08:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004f0c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004f0e:	9506      	str	r5, [sp, #24]
 8004f10:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004f12:	9105      	str	r1, [sp, #20]
 8004f14:	4639      	mov	r1, r7
 8004f16:	1905      	adds	r5, r0, r4
 8004f18:	3108      	adds	r1, #8
 8004f1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004f1c:	9507      	str	r5, [sp, #28]
 8004f1e:	910f      	str	r1, [sp, #60]	; 0x3c
 8004f20:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8004f24:	2101      	movs	r1, #1
 8004f26:	eb00 0e06 	add.w	lr, r0, r6
 8004f2a:	9518      	str	r5, [sp, #96]	; 0x60
 8004f2c:	9404      	str	r4, [sp, #16]
 8004f2e:	9103      	str	r1, [sp, #12]
 8004f30:	4620      	mov	r0, r4
 8004f32:	4689      	mov	r9, r1
 8004f34:	9e06      	ldr	r6, [sp, #24]
 8004f36:	ed90 fa00 	vldr	s30, [r0]
 8004f3a:	edd6 7a01 	vldr	s15, [r6, #4]
 8004f3e:	edd0 ba01 	vldr	s23, [r0, #4]
 8004f42:	edcd 7a00 	vstr	s15, [sp]
 8004f46:	a80d      	add	r0, sp, #52	; 0x34
 8004f48:	edde 7a01 	vldr	s15, [lr, #4]
 8004f4c:	9c05      	ldr	r4, [sp, #20]
 8004f4e:	9d07      	ldr	r5, [sp, #28]
 8004f50:	edd2 fa00 	vldr	s31, [r2]
 8004f54:	ed92 ca01 	vldr	s24, [r2, #4]
 8004f58:	edcd 7a01 	vstr	s15, [sp, #4]
 8004f5c:	c807      	ldmia	r0, {r0, r1, r2}
 8004f5e:	eddc 7a01 	vldr	s15, [ip, #4]
 8004f62:	edd4 ea00 	vldr	s29, [r4]
 8004f66:	ed95 ea00 	vldr	s28, [r5]
 8004f6a:	edd6 da00 	vldr	s27, [r6]
 8004f6e:	edd4 aa01 	vldr	s21, [r4, #4]
 8004f72:	ed95 aa01 	vldr	s20, [r5, #4]
 8004f76:	ed9e da00 	vldr	s26, [lr]
 8004f7a:	eddc ca00 	vldr	s25, [ip]
 8004f7e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004f84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004f86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004f88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004f8a:	edcd 7a02 	vstr	s15, [sp, #8]
 8004f8e:	e001      	b.n	8004f94 <arm_radix8_butterfly_f32+0x328>
 8004f90:	3f3504f3 	.word	0x3f3504f3
 8004f94:	ed16 6a01 	vldr	s12, [r6, #-4]
 8004f98:	ed91 5a00 	vldr	s10, [r1]
 8004f9c:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004fa0:	edd5 7a00 	vldr	s15, [r5]
 8004fa4:	ed18 7a01 	vldr	s14, [r8, #-4]
 8004fa8:	edd2 3a00 	vldr	s7, [r2]
 8004fac:	ed94 3a00 	vldr	s6, [r4]
 8004fb0:	ed90 2a00 	vldr	s4, [r0]
 8004fb4:	ed92 0a01 	vldr	s0, [r2, #4]
 8004fb8:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004fbc:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004fc0:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004fc4:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004fc8:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004fcc:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004fd0:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004fd4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fdc:	ed82 6a00 	vstr	s12, [r2]
 8004fe0:	edd5 8a01 	vldr	s17, [r5, #4]
 8004fe4:	ed90 9a01 	vldr	s18, [r0, #4]
 8004fe8:	edd6 2a00 	vldr	s5, [r6]
 8004fec:	ed98 7a00 	vldr	s14, [r8]
 8004ff0:	edd4 0a01 	vldr	s1, [r4, #4]
 8004ff4:	ed91 6a01 	vldr	s12, [r1, #4]
 8004ff8:	edd7 5a00 	vldr	s11, [r7]
 8004ffc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005000:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005004:	ee39 5a62 	vsub.f32	s10, s18, s5
 8005008:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800500c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8005010:	ee38 7a87 	vadd.f32	s14, s17, s14
 8005014:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8005018:	ee79 2a22 	vadd.f32	s5, s18, s5
 800501c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8005020:	ee32 9a27 	vadd.f32	s18, s4, s15
 8005024:	ee35 5a29 	vadd.f32	s10, s10, s19
 8005028:	ee72 7a67 	vsub.f32	s15, s4, s15
 800502c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8005030:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8005034:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005038:	ee32 9a08 	vadd.f32	s18, s4, s16
 800503c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8005040:	ee32 2a48 	vsub.f32	s4, s4, s16
 8005044:	ee71 4a64 	vsub.f32	s9, s2, s9
 8005048:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800504c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8005050:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8005054:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8005058:	ee30 6a46 	vsub.f32	s12, s0, s12
 800505c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8005060:	ee36 0a28 	vadd.f32	s0, s12, s17
 8005064:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005068:	ee32 7a64 	vsub.f32	s14, s4, s9
 800506c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8005070:	ee36 6a68 	vsub.f32	s12, s12, s17
 8005074:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8005078:	ee75 8a85 	vadd.f32	s17, s11, s10
 800507c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8005080:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8005084:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8005088:	ee79 1a41 	vsub.f32	s3, s18, s2
 800508c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8005090:	ee76 5a43 	vsub.f32	s11, s12, s6
 8005094:	ee74 2a62 	vsub.f32	s5, s8, s5
 8005098:	ee74 4a82 	vadd.f32	s9, s9, s4
 800509c:	ee30 4a60 	vsub.f32	s8, s0, s1
 80050a0:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80050a4:	ee30 0a80 	vadd.f32	s0, s1, s0
 80050a8:	ee77 9a85 	vadd.f32	s19, s15, s10
 80050ac:	ee33 6a06 	vadd.f32	s12, s6, s12
 80050b0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80050b4:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80050b8:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80050bc:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80050c0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80050c4:	ee39 1a01 	vadd.f32	s2, s18, s2
 80050c8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80050cc:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80050d0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80050d4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80050d8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80050dc:	ee35 3a03 	vadd.f32	s6, s10, s6
 80050e0:	ee72 6a66 	vsub.f32	s13, s4, s13
 80050e4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80050e8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80050ec:	ed9d 4a02 	vldr	s8, [sp, #8]
 80050f0:	ed82 1a01 	vstr	s2, [r2, #4]
 80050f4:	ee77 3a63 	vsub.f32	s7, s14, s7
 80050f8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80050fc:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005100:	ed81 3a00 	vstr	s6, [r1]
 8005104:	ee30 9a89 	vadd.f32	s18, s1, s18
 8005108:	ee32 2a05 	vadd.f32	s4, s4, s10
 800510c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8005110:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8005114:	ee67 2a22 	vmul.f32	s5, s14, s5
 8005118:	ee64 1a00 	vmul.f32	s3, s8, s0
 800511c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005120:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8005124:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8005128:	ee64 8a28 	vmul.f32	s17, s8, s17
 800512c:	ed9d 4a00 	vldr	s8, [sp]
 8005130:	edc1 6a01 	vstr	s13, [r1, #4]
 8005134:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005138:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800513c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8005140:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005144:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005148:	ee74 4a84 	vadd.f32	s9, s9, s8
 800514c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8005150:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8005154:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005158:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800515c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8005160:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005164:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005168:	ee30 0a68 	vsub.f32	s0, s0, s17
 800516c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8005170:	ee70 0a84 	vadd.f32	s1, s1, s8
 8005174:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005178:	44d9      	add	r9, fp
 800517a:	45ca      	cmp	sl, r9
 800517c:	ed84 9a00 	vstr	s18, [r4]
 8005180:	edc4 3a01 	vstr	s7, [r4, #4]
 8005184:	441a      	add	r2, r3
 8005186:	ed07 7a01 	vstr	s14, [r7, #-4]
 800518a:	edc7 2a00 	vstr	s5, [r7]
 800518e:	4419      	add	r1, r3
 8005190:	ed80 2a00 	vstr	s4, [r0]
 8005194:	ed80 8a01 	vstr	s16, [r0, #4]
 8005198:	441c      	add	r4, r3
 800519a:	ed48 1a01 	vstr	s3, [r8, #-4]
 800519e:	ed88 0a00 	vstr	s0, [r8]
 80051a2:	441f      	add	r7, r3
 80051a4:	ed46 4a01 	vstr	s9, [r6, #-4]
 80051a8:	4418      	add	r0, r3
 80051aa:	edc6 9a00 	vstr	s19, [r6]
 80051ae:	4498      	add	r8, r3
 80051b0:	edc5 0a00 	vstr	s1, [r5]
 80051b4:	ed85 6a01 	vstr	s12, [r5, #4]
 80051b8:	441e      	add	r6, r3
 80051ba:	441d      	add	r5, r3
 80051bc:	f63f aeea 	bhi.w	8004f94 <arm_radix8_butterfly_f32+0x328>
 80051c0:	9a03      	ldr	r2, [sp, #12]
 80051c2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80051c4:	3201      	adds	r2, #1
 80051c6:	4611      	mov	r1, r2
 80051c8:	9203      	str	r2, [sp, #12]
 80051ca:	9a04      	ldr	r2, [sp, #16]
 80051cc:	4402      	add	r2, r0
 80051ce:	9204      	str	r2, [sp, #16]
 80051d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80051d2:	9a05      	ldr	r2, [sp, #20]
 80051d4:	4402      	add	r2, r0
 80051d6:	9205      	str	r2, [sp, #20]
 80051d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80051da:	9a07      	ldr	r2, [sp, #28]
 80051dc:	4402      	add	r2, r0
 80051de:	9207      	str	r2, [sp, #28]
 80051e0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80051e2:	9a06      	ldr	r2, [sp, #24]
 80051e4:	4402      	add	r2, r0
 80051e6:	9206      	str	r2, [sp, #24]
 80051e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051ea:	4496      	add	lr, r2
 80051ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80051ee:	4494      	add	ip, r2
 80051f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051f2:	3208      	adds	r2, #8
 80051f4:	920f      	str	r2, [sp, #60]	; 0x3c
 80051f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051f8:	3208      	adds	r2, #8
 80051fa:	920e      	str	r2, [sp, #56]	; 0x38
 80051fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051fe:	3208      	adds	r2, #8
 8005200:	920d      	str	r2, [sp, #52]	; 0x34
 8005202:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005204:	3208      	adds	r2, #8
 8005206:	920c      	str	r2, [sp, #48]	; 0x30
 8005208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800520a:	3208      	adds	r2, #8
 800520c:	920b      	str	r2, [sp, #44]	; 0x2c
 800520e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005210:	3208      	adds	r2, #8
 8005212:	920a      	str	r2, [sp, #40]	; 0x28
 8005214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005216:	3208      	adds	r2, #8
 8005218:	9209      	str	r2, [sp, #36]	; 0x24
 800521a:	9a08      	ldr	r2, [sp, #32]
 800521c:	3208      	adds	r2, #8
 800521e:	9208      	str	r2, [sp, #32]
 8005220:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005222:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005224:	4288      	cmp	r0, r1
 8005226:	4622      	mov	r2, r4
 8005228:	d007      	beq.n	800523a <arm_radix8_butterfly_f32+0x5ce>
 800522a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800522c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005230:	4621      	mov	r1, r4
 8005232:	4401      	add	r1, r0
 8005234:	9110      	str	r1, [sp, #64]	; 0x40
 8005236:	9804      	ldr	r0, [sp, #16]
 8005238:	e67c      	b.n	8004f34 <arm_radix8_butterfly_f32+0x2c8>
 800523a:	4683      	mov	fp, r0
 800523c:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8005240:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8005242:	e524      	b.n	8004c8e <arm_radix8_butterfly_f32+0x22>
 8005244:	b01d      	add	sp, #116	; 0x74
 8005246:	ecbd 8b10 	vpop	{d8-d15}
 800524a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524e:	bf00      	nop

08005250 <__errno>:
 8005250:	4b01      	ldr	r3, [pc, #4]	; (8005258 <__errno+0x8>)
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	20000014 	.word	0x20000014

0800525c <__libc_init_array>:
 800525c:	b570      	push	{r4, r5, r6, lr}
 800525e:	4d0d      	ldr	r5, [pc, #52]	; (8005294 <__libc_init_array+0x38>)
 8005260:	4c0d      	ldr	r4, [pc, #52]	; (8005298 <__libc_init_array+0x3c>)
 8005262:	1b64      	subs	r4, r4, r5
 8005264:	10a4      	asrs	r4, r4, #2
 8005266:	2600      	movs	r6, #0
 8005268:	42a6      	cmp	r6, r4
 800526a:	d109      	bne.n	8005280 <__libc_init_array+0x24>
 800526c:	4d0b      	ldr	r5, [pc, #44]	; (800529c <__libc_init_array+0x40>)
 800526e:	4c0c      	ldr	r4, [pc, #48]	; (80052a0 <__libc_init_array+0x44>)
 8005270:	f002 ff24 	bl	80080bc <_init>
 8005274:	1b64      	subs	r4, r4, r5
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	2600      	movs	r6, #0
 800527a:	42a6      	cmp	r6, r4
 800527c:	d105      	bne.n	800528a <__libc_init_array+0x2e>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	f855 3b04 	ldr.w	r3, [r5], #4
 8005284:	4798      	blx	r3
 8005286:	3601      	adds	r6, #1
 8005288:	e7ee      	b.n	8005268 <__libc_init_array+0xc>
 800528a:	f855 3b04 	ldr.w	r3, [r5], #4
 800528e:	4798      	blx	r3
 8005290:	3601      	adds	r6, #1
 8005292:	e7f2      	b.n	800527a <__libc_init_array+0x1e>
 8005294:	0801b93c 	.word	0x0801b93c
 8005298:	0801b93c 	.word	0x0801b93c
 800529c:	0801b93c 	.word	0x0801b93c
 80052a0:	0801b940 	.word	0x0801b940

080052a4 <memset>:
 80052a4:	4402      	add	r2, r0
 80052a6:	4603      	mov	r3, r0
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d100      	bne.n	80052ae <memset+0xa>
 80052ac:	4770      	bx	lr
 80052ae:	f803 1b01 	strb.w	r1, [r3], #1
 80052b2:	e7f9      	b.n	80052a8 <memset+0x4>

080052b4 <__cvt>:
 80052b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b8:	ec55 4b10 	vmov	r4, r5, d0
 80052bc:	2d00      	cmp	r5, #0
 80052be:	460e      	mov	r6, r1
 80052c0:	4619      	mov	r1, r3
 80052c2:	462b      	mov	r3, r5
 80052c4:	bfbb      	ittet	lt
 80052c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052ca:	461d      	movlt	r5, r3
 80052cc:	2300      	movge	r3, #0
 80052ce:	232d      	movlt	r3, #45	; 0x2d
 80052d0:	700b      	strb	r3, [r1, #0]
 80052d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052d8:	4691      	mov	r9, r2
 80052da:	f023 0820 	bic.w	r8, r3, #32
 80052de:	bfbc      	itt	lt
 80052e0:	4622      	movlt	r2, r4
 80052e2:	4614      	movlt	r4, r2
 80052e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052e8:	d005      	beq.n	80052f6 <__cvt+0x42>
 80052ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052ee:	d100      	bne.n	80052f2 <__cvt+0x3e>
 80052f0:	3601      	adds	r6, #1
 80052f2:	2102      	movs	r1, #2
 80052f4:	e000      	b.n	80052f8 <__cvt+0x44>
 80052f6:	2103      	movs	r1, #3
 80052f8:	ab03      	add	r3, sp, #12
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	ab02      	add	r3, sp, #8
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	ec45 4b10 	vmov	d0, r4, r5
 8005304:	4653      	mov	r3, sl
 8005306:	4632      	mov	r2, r6
 8005308:	f000 fcea 	bl	8005ce0 <_dtoa_r>
 800530c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005310:	4607      	mov	r7, r0
 8005312:	d102      	bne.n	800531a <__cvt+0x66>
 8005314:	f019 0f01 	tst.w	r9, #1
 8005318:	d022      	beq.n	8005360 <__cvt+0xac>
 800531a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800531e:	eb07 0906 	add.w	r9, r7, r6
 8005322:	d110      	bne.n	8005346 <__cvt+0x92>
 8005324:	783b      	ldrb	r3, [r7, #0]
 8005326:	2b30      	cmp	r3, #48	; 0x30
 8005328:	d10a      	bne.n	8005340 <__cvt+0x8c>
 800532a:	2200      	movs	r2, #0
 800532c:	2300      	movs	r3, #0
 800532e:	4620      	mov	r0, r4
 8005330:	4629      	mov	r1, r5
 8005332:	f7fb fc31 	bl	8000b98 <__aeabi_dcmpeq>
 8005336:	b918      	cbnz	r0, 8005340 <__cvt+0x8c>
 8005338:	f1c6 0601 	rsb	r6, r6, #1
 800533c:	f8ca 6000 	str.w	r6, [sl]
 8005340:	f8da 3000 	ldr.w	r3, [sl]
 8005344:	4499      	add	r9, r3
 8005346:	2200      	movs	r2, #0
 8005348:	2300      	movs	r3, #0
 800534a:	4620      	mov	r0, r4
 800534c:	4629      	mov	r1, r5
 800534e:	f7fb fc23 	bl	8000b98 <__aeabi_dcmpeq>
 8005352:	b108      	cbz	r0, 8005358 <__cvt+0xa4>
 8005354:	f8cd 900c 	str.w	r9, [sp, #12]
 8005358:	2230      	movs	r2, #48	; 0x30
 800535a:	9b03      	ldr	r3, [sp, #12]
 800535c:	454b      	cmp	r3, r9
 800535e:	d307      	bcc.n	8005370 <__cvt+0xbc>
 8005360:	9b03      	ldr	r3, [sp, #12]
 8005362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005364:	1bdb      	subs	r3, r3, r7
 8005366:	4638      	mov	r0, r7
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	b004      	add	sp, #16
 800536c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005370:	1c59      	adds	r1, r3, #1
 8005372:	9103      	str	r1, [sp, #12]
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	e7f0      	b.n	800535a <__cvt+0xa6>

08005378 <__exponent>:
 8005378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800537a:	4603      	mov	r3, r0
 800537c:	2900      	cmp	r1, #0
 800537e:	bfb8      	it	lt
 8005380:	4249      	neglt	r1, r1
 8005382:	f803 2b02 	strb.w	r2, [r3], #2
 8005386:	bfb4      	ite	lt
 8005388:	222d      	movlt	r2, #45	; 0x2d
 800538a:	222b      	movge	r2, #43	; 0x2b
 800538c:	2909      	cmp	r1, #9
 800538e:	7042      	strb	r2, [r0, #1]
 8005390:	dd2a      	ble.n	80053e8 <__exponent+0x70>
 8005392:	f10d 0407 	add.w	r4, sp, #7
 8005396:	46a4      	mov	ip, r4
 8005398:	270a      	movs	r7, #10
 800539a:	46a6      	mov	lr, r4
 800539c:	460a      	mov	r2, r1
 800539e:	fb91 f6f7 	sdiv	r6, r1, r7
 80053a2:	fb07 1516 	mls	r5, r7, r6, r1
 80053a6:	3530      	adds	r5, #48	; 0x30
 80053a8:	2a63      	cmp	r2, #99	; 0x63
 80053aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80053ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053b2:	4631      	mov	r1, r6
 80053b4:	dcf1      	bgt.n	800539a <__exponent+0x22>
 80053b6:	3130      	adds	r1, #48	; 0x30
 80053b8:	f1ae 0502 	sub.w	r5, lr, #2
 80053bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053c0:	1c44      	adds	r4, r0, #1
 80053c2:	4629      	mov	r1, r5
 80053c4:	4561      	cmp	r1, ip
 80053c6:	d30a      	bcc.n	80053de <__exponent+0x66>
 80053c8:	f10d 0209 	add.w	r2, sp, #9
 80053cc:	eba2 020e 	sub.w	r2, r2, lr
 80053d0:	4565      	cmp	r5, ip
 80053d2:	bf88      	it	hi
 80053d4:	2200      	movhi	r2, #0
 80053d6:	4413      	add	r3, r2
 80053d8:	1a18      	subs	r0, r3, r0
 80053da:	b003      	add	sp, #12
 80053dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053e6:	e7ed      	b.n	80053c4 <__exponent+0x4c>
 80053e8:	2330      	movs	r3, #48	; 0x30
 80053ea:	3130      	adds	r1, #48	; 0x30
 80053ec:	7083      	strb	r3, [r0, #2]
 80053ee:	70c1      	strb	r1, [r0, #3]
 80053f0:	1d03      	adds	r3, r0, #4
 80053f2:	e7f1      	b.n	80053d8 <__exponent+0x60>

080053f4 <_printf_float>:
 80053f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f8:	ed2d 8b02 	vpush	{d8}
 80053fc:	b08d      	sub	sp, #52	; 0x34
 80053fe:	460c      	mov	r4, r1
 8005400:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005404:	4616      	mov	r6, r2
 8005406:	461f      	mov	r7, r3
 8005408:	4605      	mov	r5, r0
 800540a:	f001 fa57 	bl	80068bc <_localeconv_r>
 800540e:	f8d0 a000 	ldr.w	sl, [r0]
 8005412:	4650      	mov	r0, sl
 8005414:	f7fa ff44 	bl	80002a0 <strlen>
 8005418:	2300      	movs	r3, #0
 800541a:	930a      	str	r3, [sp, #40]	; 0x28
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	9305      	str	r3, [sp, #20]
 8005420:	f8d8 3000 	ldr.w	r3, [r8]
 8005424:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005428:	3307      	adds	r3, #7
 800542a:	f023 0307 	bic.w	r3, r3, #7
 800542e:	f103 0208 	add.w	r2, r3, #8
 8005432:	f8c8 2000 	str.w	r2, [r8]
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800543e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005442:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005446:	9307      	str	r3, [sp, #28]
 8005448:	f8cd 8018 	str.w	r8, [sp, #24]
 800544c:	ee08 0a10 	vmov	s16, r0
 8005450:	4b9f      	ldr	r3, [pc, #636]	; (80056d0 <_printf_float+0x2dc>)
 8005452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005456:	f04f 32ff 	mov.w	r2, #4294967295
 800545a:	f7fb fbcf 	bl	8000bfc <__aeabi_dcmpun>
 800545e:	bb88      	cbnz	r0, 80054c4 <_printf_float+0xd0>
 8005460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005464:	4b9a      	ldr	r3, [pc, #616]	; (80056d0 <_printf_float+0x2dc>)
 8005466:	f04f 32ff 	mov.w	r2, #4294967295
 800546a:	f7fb fba9 	bl	8000bc0 <__aeabi_dcmple>
 800546e:	bb48      	cbnz	r0, 80054c4 <_printf_float+0xd0>
 8005470:	2200      	movs	r2, #0
 8005472:	2300      	movs	r3, #0
 8005474:	4640      	mov	r0, r8
 8005476:	4649      	mov	r1, r9
 8005478:	f7fb fb98 	bl	8000bac <__aeabi_dcmplt>
 800547c:	b110      	cbz	r0, 8005484 <_printf_float+0x90>
 800547e:	232d      	movs	r3, #45	; 0x2d
 8005480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005484:	4b93      	ldr	r3, [pc, #588]	; (80056d4 <_printf_float+0x2e0>)
 8005486:	4894      	ldr	r0, [pc, #592]	; (80056d8 <_printf_float+0x2e4>)
 8005488:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800548c:	bf94      	ite	ls
 800548e:	4698      	movls	r8, r3
 8005490:	4680      	movhi	r8, r0
 8005492:	2303      	movs	r3, #3
 8005494:	6123      	str	r3, [r4, #16]
 8005496:	9b05      	ldr	r3, [sp, #20]
 8005498:	f023 0204 	bic.w	r2, r3, #4
 800549c:	6022      	str	r2, [r4, #0]
 800549e:	f04f 0900 	mov.w	r9, #0
 80054a2:	9700      	str	r7, [sp, #0]
 80054a4:	4633      	mov	r3, r6
 80054a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80054a8:	4621      	mov	r1, r4
 80054aa:	4628      	mov	r0, r5
 80054ac:	f000 f9d8 	bl	8005860 <_printf_common>
 80054b0:	3001      	adds	r0, #1
 80054b2:	f040 8090 	bne.w	80055d6 <_printf_float+0x1e2>
 80054b6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ba:	b00d      	add	sp, #52	; 0x34
 80054bc:	ecbd 8b02 	vpop	{d8}
 80054c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c4:	4642      	mov	r2, r8
 80054c6:	464b      	mov	r3, r9
 80054c8:	4640      	mov	r0, r8
 80054ca:	4649      	mov	r1, r9
 80054cc:	f7fb fb96 	bl	8000bfc <__aeabi_dcmpun>
 80054d0:	b140      	cbz	r0, 80054e4 <_printf_float+0xf0>
 80054d2:	464b      	mov	r3, r9
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bfbc      	itt	lt
 80054d8:	232d      	movlt	r3, #45	; 0x2d
 80054da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054de:	487f      	ldr	r0, [pc, #508]	; (80056dc <_printf_float+0x2e8>)
 80054e0:	4b7f      	ldr	r3, [pc, #508]	; (80056e0 <_printf_float+0x2ec>)
 80054e2:	e7d1      	b.n	8005488 <_printf_float+0x94>
 80054e4:	6863      	ldr	r3, [r4, #4]
 80054e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054ea:	9206      	str	r2, [sp, #24]
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	d13f      	bne.n	8005570 <_printf_float+0x17c>
 80054f0:	2306      	movs	r3, #6
 80054f2:	6063      	str	r3, [r4, #4]
 80054f4:	9b05      	ldr	r3, [sp, #20]
 80054f6:	6861      	ldr	r1, [r4, #4]
 80054f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054fc:	2300      	movs	r3, #0
 80054fe:	9303      	str	r3, [sp, #12]
 8005500:	ab0a      	add	r3, sp, #40	; 0x28
 8005502:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005506:	ab09      	add	r3, sp, #36	; 0x24
 8005508:	ec49 8b10 	vmov	d0, r8, r9
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	6022      	str	r2, [r4, #0]
 8005510:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005514:	4628      	mov	r0, r5
 8005516:	f7ff fecd 	bl	80052b4 <__cvt>
 800551a:	9b06      	ldr	r3, [sp, #24]
 800551c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800551e:	2b47      	cmp	r3, #71	; 0x47
 8005520:	4680      	mov	r8, r0
 8005522:	d108      	bne.n	8005536 <_printf_float+0x142>
 8005524:	1cc8      	adds	r0, r1, #3
 8005526:	db02      	blt.n	800552e <_printf_float+0x13a>
 8005528:	6863      	ldr	r3, [r4, #4]
 800552a:	4299      	cmp	r1, r3
 800552c:	dd41      	ble.n	80055b2 <_printf_float+0x1be>
 800552e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005532:	fa5f fb8b 	uxtb.w	fp, fp
 8005536:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800553a:	d820      	bhi.n	800557e <_printf_float+0x18a>
 800553c:	3901      	subs	r1, #1
 800553e:	465a      	mov	r2, fp
 8005540:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005544:	9109      	str	r1, [sp, #36]	; 0x24
 8005546:	f7ff ff17 	bl	8005378 <__exponent>
 800554a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800554c:	1813      	adds	r3, r2, r0
 800554e:	2a01      	cmp	r2, #1
 8005550:	4681      	mov	r9, r0
 8005552:	6123      	str	r3, [r4, #16]
 8005554:	dc02      	bgt.n	800555c <_printf_float+0x168>
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	07d2      	lsls	r2, r2, #31
 800555a:	d501      	bpl.n	8005560 <_printf_float+0x16c>
 800555c:	3301      	adds	r3, #1
 800555e:	6123      	str	r3, [r4, #16]
 8005560:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005564:	2b00      	cmp	r3, #0
 8005566:	d09c      	beq.n	80054a2 <_printf_float+0xae>
 8005568:	232d      	movs	r3, #45	; 0x2d
 800556a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800556e:	e798      	b.n	80054a2 <_printf_float+0xae>
 8005570:	9a06      	ldr	r2, [sp, #24]
 8005572:	2a47      	cmp	r2, #71	; 0x47
 8005574:	d1be      	bne.n	80054f4 <_printf_float+0x100>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1bc      	bne.n	80054f4 <_printf_float+0x100>
 800557a:	2301      	movs	r3, #1
 800557c:	e7b9      	b.n	80054f2 <_printf_float+0xfe>
 800557e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005582:	d118      	bne.n	80055b6 <_printf_float+0x1c2>
 8005584:	2900      	cmp	r1, #0
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	dd0b      	ble.n	80055a2 <_printf_float+0x1ae>
 800558a:	6121      	str	r1, [r4, #16]
 800558c:	b913      	cbnz	r3, 8005594 <_printf_float+0x1a0>
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	07d0      	lsls	r0, r2, #31
 8005592:	d502      	bpl.n	800559a <_printf_float+0x1a6>
 8005594:	3301      	adds	r3, #1
 8005596:	440b      	add	r3, r1
 8005598:	6123      	str	r3, [r4, #16]
 800559a:	65a1      	str	r1, [r4, #88]	; 0x58
 800559c:	f04f 0900 	mov.w	r9, #0
 80055a0:	e7de      	b.n	8005560 <_printf_float+0x16c>
 80055a2:	b913      	cbnz	r3, 80055aa <_printf_float+0x1b6>
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	07d2      	lsls	r2, r2, #31
 80055a8:	d501      	bpl.n	80055ae <_printf_float+0x1ba>
 80055aa:	3302      	adds	r3, #2
 80055ac:	e7f4      	b.n	8005598 <_printf_float+0x1a4>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e7f2      	b.n	8005598 <_printf_float+0x1a4>
 80055b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b8:	4299      	cmp	r1, r3
 80055ba:	db05      	blt.n	80055c8 <_printf_float+0x1d4>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	6121      	str	r1, [r4, #16]
 80055c0:	07d8      	lsls	r0, r3, #31
 80055c2:	d5ea      	bpl.n	800559a <_printf_float+0x1a6>
 80055c4:	1c4b      	adds	r3, r1, #1
 80055c6:	e7e7      	b.n	8005598 <_printf_float+0x1a4>
 80055c8:	2900      	cmp	r1, #0
 80055ca:	bfd4      	ite	le
 80055cc:	f1c1 0202 	rsble	r2, r1, #2
 80055d0:	2201      	movgt	r2, #1
 80055d2:	4413      	add	r3, r2
 80055d4:	e7e0      	b.n	8005598 <_printf_float+0x1a4>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	055a      	lsls	r2, r3, #21
 80055da:	d407      	bmi.n	80055ec <_printf_float+0x1f8>
 80055dc:	6923      	ldr	r3, [r4, #16]
 80055de:	4642      	mov	r2, r8
 80055e0:	4631      	mov	r1, r6
 80055e2:	4628      	mov	r0, r5
 80055e4:	47b8      	blx	r7
 80055e6:	3001      	adds	r0, #1
 80055e8:	d12c      	bne.n	8005644 <_printf_float+0x250>
 80055ea:	e764      	b.n	80054b6 <_printf_float+0xc2>
 80055ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055f0:	f240 80e0 	bls.w	80057b4 <_printf_float+0x3c0>
 80055f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055f8:	2200      	movs	r2, #0
 80055fa:	2300      	movs	r3, #0
 80055fc:	f7fb facc 	bl	8000b98 <__aeabi_dcmpeq>
 8005600:	2800      	cmp	r0, #0
 8005602:	d034      	beq.n	800566e <_printf_float+0x27a>
 8005604:	4a37      	ldr	r2, [pc, #220]	; (80056e4 <_printf_float+0x2f0>)
 8005606:	2301      	movs	r3, #1
 8005608:	4631      	mov	r1, r6
 800560a:	4628      	mov	r0, r5
 800560c:	47b8      	blx	r7
 800560e:	3001      	adds	r0, #1
 8005610:	f43f af51 	beq.w	80054b6 <_printf_float+0xc2>
 8005614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005618:	429a      	cmp	r2, r3
 800561a:	db02      	blt.n	8005622 <_printf_float+0x22e>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	07d8      	lsls	r0, r3, #31
 8005620:	d510      	bpl.n	8005644 <_printf_float+0x250>
 8005622:	ee18 3a10 	vmov	r3, s16
 8005626:	4652      	mov	r2, sl
 8005628:	4631      	mov	r1, r6
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	f43f af41 	beq.w	80054b6 <_printf_float+0xc2>
 8005634:	f04f 0800 	mov.w	r8, #0
 8005638:	f104 091a 	add.w	r9, r4, #26
 800563c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800563e:	3b01      	subs	r3, #1
 8005640:	4543      	cmp	r3, r8
 8005642:	dc09      	bgt.n	8005658 <_printf_float+0x264>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	079b      	lsls	r3, r3, #30
 8005648:	f100 8105 	bmi.w	8005856 <_printf_float+0x462>
 800564c:	68e0      	ldr	r0, [r4, #12]
 800564e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005650:	4298      	cmp	r0, r3
 8005652:	bfb8      	it	lt
 8005654:	4618      	movlt	r0, r3
 8005656:	e730      	b.n	80054ba <_printf_float+0xc6>
 8005658:	2301      	movs	r3, #1
 800565a:	464a      	mov	r2, r9
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	f43f af27 	beq.w	80054b6 <_printf_float+0xc2>
 8005668:	f108 0801 	add.w	r8, r8, #1
 800566c:	e7e6      	b.n	800563c <_printf_float+0x248>
 800566e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005670:	2b00      	cmp	r3, #0
 8005672:	dc39      	bgt.n	80056e8 <_printf_float+0x2f4>
 8005674:	4a1b      	ldr	r2, [pc, #108]	; (80056e4 <_printf_float+0x2f0>)
 8005676:	2301      	movs	r3, #1
 8005678:	4631      	mov	r1, r6
 800567a:	4628      	mov	r0, r5
 800567c:	47b8      	blx	r7
 800567e:	3001      	adds	r0, #1
 8005680:	f43f af19 	beq.w	80054b6 <_printf_float+0xc2>
 8005684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005688:	4313      	orrs	r3, r2
 800568a:	d102      	bne.n	8005692 <_printf_float+0x29e>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	07d9      	lsls	r1, r3, #31
 8005690:	d5d8      	bpl.n	8005644 <_printf_float+0x250>
 8005692:	ee18 3a10 	vmov	r3, s16
 8005696:	4652      	mov	r2, sl
 8005698:	4631      	mov	r1, r6
 800569a:	4628      	mov	r0, r5
 800569c:	47b8      	blx	r7
 800569e:	3001      	adds	r0, #1
 80056a0:	f43f af09 	beq.w	80054b6 <_printf_float+0xc2>
 80056a4:	f04f 0900 	mov.w	r9, #0
 80056a8:	f104 0a1a 	add.w	sl, r4, #26
 80056ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ae:	425b      	negs	r3, r3
 80056b0:	454b      	cmp	r3, r9
 80056b2:	dc01      	bgt.n	80056b8 <_printf_float+0x2c4>
 80056b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b6:	e792      	b.n	80055de <_printf_float+0x1ea>
 80056b8:	2301      	movs	r3, #1
 80056ba:	4652      	mov	r2, sl
 80056bc:	4631      	mov	r1, r6
 80056be:	4628      	mov	r0, r5
 80056c0:	47b8      	blx	r7
 80056c2:	3001      	adds	r0, #1
 80056c4:	f43f aef7 	beq.w	80054b6 <_printf_float+0xc2>
 80056c8:	f109 0901 	add.w	r9, r9, #1
 80056cc:	e7ee      	b.n	80056ac <_printf_float+0x2b8>
 80056ce:	bf00      	nop
 80056d0:	7fefffff 	.word	0x7fefffff
 80056d4:	0801b55c 	.word	0x0801b55c
 80056d8:	0801b560 	.word	0x0801b560
 80056dc:	0801b568 	.word	0x0801b568
 80056e0:	0801b564 	.word	0x0801b564
 80056e4:	0801b56c 	.word	0x0801b56c
 80056e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056ec:	429a      	cmp	r2, r3
 80056ee:	bfa8      	it	ge
 80056f0:	461a      	movge	r2, r3
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	4691      	mov	r9, r2
 80056f6:	dc37      	bgt.n	8005768 <_printf_float+0x374>
 80056f8:	f04f 0b00 	mov.w	fp, #0
 80056fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005700:	f104 021a 	add.w	r2, r4, #26
 8005704:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005706:	9305      	str	r3, [sp, #20]
 8005708:	eba3 0309 	sub.w	r3, r3, r9
 800570c:	455b      	cmp	r3, fp
 800570e:	dc33      	bgt.n	8005778 <_printf_float+0x384>
 8005710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005714:	429a      	cmp	r2, r3
 8005716:	db3b      	blt.n	8005790 <_printf_float+0x39c>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	07da      	lsls	r2, r3, #31
 800571c:	d438      	bmi.n	8005790 <_printf_float+0x39c>
 800571e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005720:	9a05      	ldr	r2, [sp, #20]
 8005722:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005724:	1a9a      	subs	r2, r3, r2
 8005726:	eba3 0901 	sub.w	r9, r3, r1
 800572a:	4591      	cmp	r9, r2
 800572c:	bfa8      	it	ge
 800572e:	4691      	movge	r9, r2
 8005730:	f1b9 0f00 	cmp.w	r9, #0
 8005734:	dc35      	bgt.n	80057a2 <_printf_float+0x3ae>
 8005736:	f04f 0800 	mov.w	r8, #0
 800573a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800573e:	f104 0a1a 	add.w	sl, r4, #26
 8005742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	eba3 0309 	sub.w	r3, r3, r9
 800574c:	4543      	cmp	r3, r8
 800574e:	f77f af79 	ble.w	8005644 <_printf_float+0x250>
 8005752:	2301      	movs	r3, #1
 8005754:	4652      	mov	r2, sl
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	47b8      	blx	r7
 800575c:	3001      	adds	r0, #1
 800575e:	f43f aeaa 	beq.w	80054b6 <_printf_float+0xc2>
 8005762:	f108 0801 	add.w	r8, r8, #1
 8005766:	e7ec      	b.n	8005742 <_printf_float+0x34e>
 8005768:	4613      	mov	r3, r2
 800576a:	4631      	mov	r1, r6
 800576c:	4642      	mov	r2, r8
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	d1c0      	bne.n	80056f8 <_printf_float+0x304>
 8005776:	e69e      	b.n	80054b6 <_printf_float+0xc2>
 8005778:	2301      	movs	r3, #1
 800577a:	4631      	mov	r1, r6
 800577c:	4628      	mov	r0, r5
 800577e:	9205      	str	r2, [sp, #20]
 8005780:	47b8      	blx	r7
 8005782:	3001      	adds	r0, #1
 8005784:	f43f ae97 	beq.w	80054b6 <_printf_float+0xc2>
 8005788:	9a05      	ldr	r2, [sp, #20]
 800578a:	f10b 0b01 	add.w	fp, fp, #1
 800578e:	e7b9      	b.n	8005704 <_printf_float+0x310>
 8005790:	ee18 3a10 	vmov	r3, s16
 8005794:	4652      	mov	r2, sl
 8005796:	4631      	mov	r1, r6
 8005798:	4628      	mov	r0, r5
 800579a:	47b8      	blx	r7
 800579c:	3001      	adds	r0, #1
 800579e:	d1be      	bne.n	800571e <_printf_float+0x32a>
 80057a0:	e689      	b.n	80054b6 <_printf_float+0xc2>
 80057a2:	9a05      	ldr	r2, [sp, #20]
 80057a4:	464b      	mov	r3, r9
 80057a6:	4442      	add	r2, r8
 80057a8:	4631      	mov	r1, r6
 80057aa:	4628      	mov	r0, r5
 80057ac:	47b8      	blx	r7
 80057ae:	3001      	adds	r0, #1
 80057b0:	d1c1      	bne.n	8005736 <_printf_float+0x342>
 80057b2:	e680      	b.n	80054b6 <_printf_float+0xc2>
 80057b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057b6:	2a01      	cmp	r2, #1
 80057b8:	dc01      	bgt.n	80057be <_printf_float+0x3ca>
 80057ba:	07db      	lsls	r3, r3, #31
 80057bc:	d538      	bpl.n	8005830 <_printf_float+0x43c>
 80057be:	2301      	movs	r3, #1
 80057c0:	4642      	mov	r2, r8
 80057c2:	4631      	mov	r1, r6
 80057c4:	4628      	mov	r0, r5
 80057c6:	47b8      	blx	r7
 80057c8:	3001      	adds	r0, #1
 80057ca:	f43f ae74 	beq.w	80054b6 <_printf_float+0xc2>
 80057ce:	ee18 3a10 	vmov	r3, s16
 80057d2:	4652      	mov	r2, sl
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	3001      	adds	r0, #1
 80057dc:	f43f ae6b 	beq.w	80054b6 <_printf_float+0xc2>
 80057e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057e4:	2200      	movs	r2, #0
 80057e6:	2300      	movs	r3, #0
 80057e8:	f7fb f9d6 	bl	8000b98 <__aeabi_dcmpeq>
 80057ec:	b9d8      	cbnz	r0, 8005826 <_printf_float+0x432>
 80057ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f0:	f108 0201 	add.w	r2, r8, #1
 80057f4:	3b01      	subs	r3, #1
 80057f6:	4631      	mov	r1, r6
 80057f8:	4628      	mov	r0, r5
 80057fa:	47b8      	blx	r7
 80057fc:	3001      	adds	r0, #1
 80057fe:	d10e      	bne.n	800581e <_printf_float+0x42a>
 8005800:	e659      	b.n	80054b6 <_printf_float+0xc2>
 8005802:	2301      	movs	r3, #1
 8005804:	4652      	mov	r2, sl
 8005806:	4631      	mov	r1, r6
 8005808:	4628      	mov	r0, r5
 800580a:	47b8      	blx	r7
 800580c:	3001      	adds	r0, #1
 800580e:	f43f ae52 	beq.w	80054b6 <_printf_float+0xc2>
 8005812:	f108 0801 	add.w	r8, r8, #1
 8005816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005818:	3b01      	subs	r3, #1
 800581a:	4543      	cmp	r3, r8
 800581c:	dcf1      	bgt.n	8005802 <_printf_float+0x40e>
 800581e:	464b      	mov	r3, r9
 8005820:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005824:	e6dc      	b.n	80055e0 <_printf_float+0x1ec>
 8005826:	f04f 0800 	mov.w	r8, #0
 800582a:	f104 0a1a 	add.w	sl, r4, #26
 800582e:	e7f2      	b.n	8005816 <_printf_float+0x422>
 8005830:	2301      	movs	r3, #1
 8005832:	4642      	mov	r2, r8
 8005834:	e7df      	b.n	80057f6 <_printf_float+0x402>
 8005836:	2301      	movs	r3, #1
 8005838:	464a      	mov	r2, r9
 800583a:	4631      	mov	r1, r6
 800583c:	4628      	mov	r0, r5
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	f43f ae38 	beq.w	80054b6 <_printf_float+0xc2>
 8005846:	f108 0801 	add.w	r8, r8, #1
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800584e:	1a5b      	subs	r3, r3, r1
 8005850:	4543      	cmp	r3, r8
 8005852:	dcf0      	bgt.n	8005836 <_printf_float+0x442>
 8005854:	e6fa      	b.n	800564c <_printf_float+0x258>
 8005856:	f04f 0800 	mov.w	r8, #0
 800585a:	f104 0919 	add.w	r9, r4, #25
 800585e:	e7f4      	b.n	800584a <_printf_float+0x456>

08005860 <_printf_common>:
 8005860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005864:	4616      	mov	r6, r2
 8005866:	4699      	mov	r9, r3
 8005868:	688a      	ldr	r2, [r1, #8]
 800586a:	690b      	ldr	r3, [r1, #16]
 800586c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005870:	4293      	cmp	r3, r2
 8005872:	bfb8      	it	lt
 8005874:	4613      	movlt	r3, r2
 8005876:	6033      	str	r3, [r6, #0]
 8005878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800587c:	4607      	mov	r7, r0
 800587e:	460c      	mov	r4, r1
 8005880:	b10a      	cbz	r2, 8005886 <_printf_common+0x26>
 8005882:	3301      	adds	r3, #1
 8005884:	6033      	str	r3, [r6, #0]
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	0699      	lsls	r1, r3, #26
 800588a:	bf42      	ittt	mi
 800588c:	6833      	ldrmi	r3, [r6, #0]
 800588e:	3302      	addmi	r3, #2
 8005890:	6033      	strmi	r3, [r6, #0]
 8005892:	6825      	ldr	r5, [r4, #0]
 8005894:	f015 0506 	ands.w	r5, r5, #6
 8005898:	d106      	bne.n	80058a8 <_printf_common+0x48>
 800589a:	f104 0a19 	add.w	sl, r4, #25
 800589e:	68e3      	ldr	r3, [r4, #12]
 80058a0:	6832      	ldr	r2, [r6, #0]
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	42ab      	cmp	r3, r5
 80058a6:	dc26      	bgt.n	80058f6 <_printf_common+0x96>
 80058a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058ac:	1e13      	subs	r3, r2, #0
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	bf18      	it	ne
 80058b2:	2301      	movne	r3, #1
 80058b4:	0692      	lsls	r2, r2, #26
 80058b6:	d42b      	bmi.n	8005910 <_printf_common+0xb0>
 80058b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058bc:	4649      	mov	r1, r9
 80058be:	4638      	mov	r0, r7
 80058c0:	47c0      	blx	r8
 80058c2:	3001      	adds	r0, #1
 80058c4:	d01e      	beq.n	8005904 <_printf_common+0xa4>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	68e5      	ldr	r5, [r4, #12]
 80058ca:	6832      	ldr	r2, [r6, #0]
 80058cc:	f003 0306 	and.w	r3, r3, #6
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	bf08      	it	eq
 80058d4:	1aad      	subeq	r5, r5, r2
 80058d6:	68a3      	ldr	r3, [r4, #8]
 80058d8:	6922      	ldr	r2, [r4, #16]
 80058da:	bf0c      	ite	eq
 80058dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e0:	2500      	movne	r5, #0
 80058e2:	4293      	cmp	r3, r2
 80058e4:	bfc4      	itt	gt
 80058e6:	1a9b      	subgt	r3, r3, r2
 80058e8:	18ed      	addgt	r5, r5, r3
 80058ea:	2600      	movs	r6, #0
 80058ec:	341a      	adds	r4, #26
 80058ee:	42b5      	cmp	r5, r6
 80058f0:	d11a      	bne.n	8005928 <_printf_common+0xc8>
 80058f2:	2000      	movs	r0, #0
 80058f4:	e008      	b.n	8005908 <_printf_common+0xa8>
 80058f6:	2301      	movs	r3, #1
 80058f8:	4652      	mov	r2, sl
 80058fa:	4649      	mov	r1, r9
 80058fc:	4638      	mov	r0, r7
 80058fe:	47c0      	blx	r8
 8005900:	3001      	adds	r0, #1
 8005902:	d103      	bne.n	800590c <_printf_common+0xac>
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590c:	3501      	adds	r5, #1
 800590e:	e7c6      	b.n	800589e <_printf_common+0x3e>
 8005910:	18e1      	adds	r1, r4, r3
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	2030      	movs	r0, #48	; 0x30
 8005916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800591a:	4422      	add	r2, r4
 800591c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005924:	3302      	adds	r3, #2
 8005926:	e7c7      	b.n	80058b8 <_printf_common+0x58>
 8005928:	2301      	movs	r3, #1
 800592a:	4622      	mov	r2, r4
 800592c:	4649      	mov	r1, r9
 800592e:	4638      	mov	r0, r7
 8005930:	47c0      	blx	r8
 8005932:	3001      	adds	r0, #1
 8005934:	d0e6      	beq.n	8005904 <_printf_common+0xa4>
 8005936:	3601      	adds	r6, #1
 8005938:	e7d9      	b.n	80058ee <_printf_common+0x8e>
	...

0800593c <_printf_i>:
 800593c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	7e0f      	ldrb	r7, [r1, #24]
 8005942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005944:	2f78      	cmp	r7, #120	; 0x78
 8005946:	4691      	mov	r9, r2
 8005948:	4680      	mov	r8, r0
 800594a:	460c      	mov	r4, r1
 800594c:	469a      	mov	sl, r3
 800594e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005952:	d807      	bhi.n	8005964 <_printf_i+0x28>
 8005954:	2f62      	cmp	r7, #98	; 0x62
 8005956:	d80a      	bhi.n	800596e <_printf_i+0x32>
 8005958:	2f00      	cmp	r7, #0
 800595a:	f000 80d8 	beq.w	8005b0e <_printf_i+0x1d2>
 800595e:	2f58      	cmp	r7, #88	; 0x58
 8005960:	f000 80a3 	beq.w	8005aaa <_printf_i+0x16e>
 8005964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800596c:	e03a      	b.n	80059e4 <_printf_i+0xa8>
 800596e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005972:	2b15      	cmp	r3, #21
 8005974:	d8f6      	bhi.n	8005964 <_printf_i+0x28>
 8005976:	a101      	add	r1, pc, #4	; (adr r1, 800597c <_printf_i+0x40>)
 8005978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800597c:	080059d5 	.word	0x080059d5
 8005980:	080059e9 	.word	0x080059e9
 8005984:	08005965 	.word	0x08005965
 8005988:	08005965 	.word	0x08005965
 800598c:	08005965 	.word	0x08005965
 8005990:	08005965 	.word	0x08005965
 8005994:	080059e9 	.word	0x080059e9
 8005998:	08005965 	.word	0x08005965
 800599c:	08005965 	.word	0x08005965
 80059a0:	08005965 	.word	0x08005965
 80059a4:	08005965 	.word	0x08005965
 80059a8:	08005af5 	.word	0x08005af5
 80059ac:	08005a19 	.word	0x08005a19
 80059b0:	08005ad7 	.word	0x08005ad7
 80059b4:	08005965 	.word	0x08005965
 80059b8:	08005965 	.word	0x08005965
 80059bc:	08005b17 	.word	0x08005b17
 80059c0:	08005965 	.word	0x08005965
 80059c4:	08005a19 	.word	0x08005a19
 80059c8:	08005965 	.word	0x08005965
 80059cc:	08005965 	.word	0x08005965
 80059d0:	08005adf 	.word	0x08005adf
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	1d1a      	adds	r2, r3, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	602a      	str	r2, [r5, #0]
 80059dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0a3      	b.n	8005b30 <_printf_i+0x1f4>
 80059e8:	6820      	ldr	r0, [r4, #0]
 80059ea:	6829      	ldr	r1, [r5, #0]
 80059ec:	0606      	lsls	r6, r0, #24
 80059ee:	f101 0304 	add.w	r3, r1, #4
 80059f2:	d50a      	bpl.n	8005a0a <_printf_i+0xce>
 80059f4:	680e      	ldr	r6, [r1, #0]
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	2e00      	cmp	r6, #0
 80059fa:	da03      	bge.n	8005a04 <_printf_i+0xc8>
 80059fc:	232d      	movs	r3, #45	; 0x2d
 80059fe:	4276      	negs	r6, r6
 8005a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a04:	485e      	ldr	r0, [pc, #376]	; (8005b80 <_printf_i+0x244>)
 8005a06:	230a      	movs	r3, #10
 8005a08:	e019      	b.n	8005a3e <_printf_i+0x102>
 8005a0a:	680e      	ldr	r6, [r1, #0]
 8005a0c:	602b      	str	r3, [r5, #0]
 8005a0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a12:	bf18      	it	ne
 8005a14:	b236      	sxthne	r6, r6
 8005a16:	e7ef      	b.n	80059f8 <_printf_i+0xbc>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	6820      	ldr	r0, [r4, #0]
 8005a1c:	1d19      	adds	r1, r3, #4
 8005a1e:	6029      	str	r1, [r5, #0]
 8005a20:	0601      	lsls	r1, r0, #24
 8005a22:	d501      	bpl.n	8005a28 <_printf_i+0xec>
 8005a24:	681e      	ldr	r6, [r3, #0]
 8005a26:	e002      	b.n	8005a2e <_printf_i+0xf2>
 8005a28:	0646      	lsls	r6, r0, #25
 8005a2a:	d5fb      	bpl.n	8005a24 <_printf_i+0xe8>
 8005a2c:	881e      	ldrh	r6, [r3, #0]
 8005a2e:	4854      	ldr	r0, [pc, #336]	; (8005b80 <_printf_i+0x244>)
 8005a30:	2f6f      	cmp	r7, #111	; 0x6f
 8005a32:	bf0c      	ite	eq
 8005a34:	2308      	moveq	r3, #8
 8005a36:	230a      	movne	r3, #10
 8005a38:	2100      	movs	r1, #0
 8005a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a3e:	6865      	ldr	r5, [r4, #4]
 8005a40:	60a5      	str	r5, [r4, #8]
 8005a42:	2d00      	cmp	r5, #0
 8005a44:	bfa2      	ittt	ge
 8005a46:	6821      	ldrge	r1, [r4, #0]
 8005a48:	f021 0104 	bicge.w	r1, r1, #4
 8005a4c:	6021      	strge	r1, [r4, #0]
 8005a4e:	b90e      	cbnz	r6, 8005a54 <_printf_i+0x118>
 8005a50:	2d00      	cmp	r5, #0
 8005a52:	d04d      	beq.n	8005af0 <_printf_i+0x1b4>
 8005a54:	4615      	mov	r5, r2
 8005a56:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a5a:	fb03 6711 	mls	r7, r3, r1, r6
 8005a5e:	5dc7      	ldrb	r7, [r0, r7]
 8005a60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a64:	4637      	mov	r7, r6
 8005a66:	42bb      	cmp	r3, r7
 8005a68:	460e      	mov	r6, r1
 8005a6a:	d9f4      	bls.n	8005a56 <_printf_i+0x11a>
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d10b      	bne.n	8005a88 <_printf_i+0x14c>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	07de      	lsls	r6, r3, #31
 8005a74:	d508      	bpl.n	8005a88 <_printf_i+0x14c>
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	6861      	ldr	r1, [r4, #4]
 8005a7a:	4299      	cmp	r1, r3
 8005a7c:	bfde      	ittt	le
 8005a7e:	2330      	movle	r3, #48	; 0x30
 8005a80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a88:	1b52      	subs	r2, r2, r5
 8005a8a:	6122      	str	r2, [r4, #16]
 8005a8c:	f8cd a000 	str.w	sl, [sp]
 8005a90:	464b      	mov	r3, r9
 8005a92:	aa03      	add	r2, sp, #12
 8005a94:	4621      	mov	r1, r4
 8005a96:	4640      	mov	r0, r8
 8005a98:	f7ff fee2 	bl	8005860 <_printf_common>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d14c      	bne.n	8005b3a <_printf_i+0x1fe>
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa4:	b004      	add	sp, #16
 8005aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aaa:	4835      	ldr	r0, [pc, #212]	; (8005b80 <_printf_i+0x244>)
 8005aac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ab0:	6829      	ldr	r1, [r5, #0]
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ab8:	6029      	str	r1, [r5, #0]
 8005aba:	061d      	lsls	r5, r3, #24
 8005abc:	d514      	bpl.n	8005ae8 <_printf_i+0x1ac>
 8005abe:	07df      	lsls	r7, r3, #31
 8005ac0:	bf44      	itt	mi
 8005ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ac6:	6023      	strmi	r3, [r4, #0]
 8005ac8:	b91e      	cbnz	r6, 8005ad2 <_printf_i+0x196>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	f023 0320 	bic.w	r3, r3, #32
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	e7b0      	b.n	8005a38 <_printf_i+0xfc>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	f043 0320 	orr.w	r3, r3, #32
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	2378      	movs	r3, #120	; 0x78
 8005ae0:	4828      	ldr	r0, [pc, #160]	; (8005b84 <_printf_i+0x248>)
 8005ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ae6:	e7e3      	b.n	8005ab0 <_printf_i+0x174>
 8005ae8:	0659      	lsls	r1, r3, #25
 8005aea:	bf48      	it	mi
 8005aec:	b2b6      	uxthmi	r6, r6
 8005aee:	e7e6      	b.n	8005abe <_printf_i+0x182>
 8005af0:	4615      	mov	r5, r2
 8005af2:	e7bb      	b.n	8005a6c <_printf_i+0x130>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	6826      	ldr	r6, [r4, #0]
 8005af8:	6961      	ldr	r1, [r4, #20]
 8005afa:	1d18      	adds	r0, r3, #4
 8005afc:	6028      	str	r0, [r5, #0]
 8005afe:	0635      	lsls	r5, r6, #24
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	d501      	bpl.n	8005b08 <_printf_i+0x1cc>
 8005b04:	6019      	str	r1, [r3, #0]
 8005b06:	e002      	b.n	8005b0e <_printf_i+0x1d2>
 8005b08:	0670      	lsls	r0, r6, #25
 8005b0a:	d5fb      	bpl.n	8005b04 <_printf_i+0x1c8>
 8005b0c:	8019      	strh	r1, [r3, #0]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	6123      	str	r3, [r4, #16]
 8005b12:	4615      	mov	r5, r2
 8005b14:	e7ba      	b.n	8005a8c <_printf_i+0x150>
 8005b16:	682b      	ldr	r3, [r5, #0]
 8005b18:	1d1a      	adds	r2, r3, #4
 8005b1a:	602a      	str	r2, [r5, #0]
 8005b1c:	681d      	ldr	r5, [r3, #0]
 8005b1e:	6862      	ldr	r2, [r4, #4]
 8005b20:	2100      	movs	r1, #0
 8005b22:	4628      	mov	r0, r5
 8005b24:	f7fa fbc4 	bl	80002b0 <memchr>
 8005b28:	b108      	cbz	r0, 8005b2e <_printf_i+0x1f2>
 8005b2a:	1b40      	subs	r0, r0, r5
 8005b2c:	6060      	str	r0, [r4, #4]
 8005b2e:	6863      	ldr	r3, [r4, #4]
 8005b30:	6123      	str	r3, [r4, #16]
 8005b32:	2300      	movs	r3, #0
 8005b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b38:	e7a8      	b.n	8005a8c <_printf_i+0x150>
 8005b3a:	6923      	ldr	r3, [r4, #16]
 8005b3c:	462a      	mov	r2, r5
 8005b3e:	4649      	mov	r1, r9
 8005b40:	4640      	mov	r0, r8
 8005b42:	47d0      	blx	sl
 8005b44:	3001      	adds	r0, #1
 8005b46:	d0ab      	beq.n	8005aa0 <_printf_i+0x164>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	079b      	lsls	r3, r3, #30
 8005b4c:	d413      	bmi.n	8005b76 <_printf_i+0x23a>
 8005b4e:	68e0      	ldr	r0, [r4, #12]
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	4298      	cmp	r0, r3
 8005b54:	bfb8      	it	lt
 8005b56:	4618      	movlt	r0, r3
 8005b58:	e7a4      	b.n	8005aa4 <_printf_i+0x168>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	4649      	mov	r1, r9
 8005b60:	4640      	mov	r0, r8
 8005b62:	47d0      	blx	sl
 8005b64:	3001      	adds	r0, #1
 8005b66:	d09b      	beq.n	8005aa0 <_printf_i+0x164>
 8005b68:	3501      	adds	r5, #1
 8005b6a:	68e3      	ldr	r3, [r4, #12]
 8005b6c:	9903      	ldr	r1, [sp, #12]
 8005b6e:	1a5b      	subs	r3, r3, r1
 8005b70:	42ab      	cmp	r3, r5
 8005b72:	dcf2      	bgt.n	8005b5a <_printf_i+0x21e>
 8005b74:	e7eb      	b.n	8005b4e <_printf_i+0x212>
 8005b76:	2500      	movs	r5, #0
 8005b78:	f104 0619 	add.w	r6, r4, #25
 8005b7c:	e7f5      	b.n	8005b6a <_printf_i+0x22e>
 8005b7e:	bf00      	nop
 8005b80:	0801b56e 	.word	0x0801b56e
 8005b84:	0801b57f 	.word	0x0801b57f

08005b88 <siprintf>:
 8005b88:	b40e      	push	{r1, r2, r3}
 8005b8a:	b500      	push	{lr}
 8005b8c:	b09c      	sub	sp, #112	; 0x70
 8005b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b90:	9002      	str	r0, [sp, #8]
 8005b92:	9006      	str	r0, [sp, #24]
 8005b94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b98:	4809      	ldr	r0, [pc, #36]	; (8005bc0 <siprintf+0x38>)
 8005b9a:	9107      	str	r1, [sp, #28]
 8005b9c:	9104      	str	r1, [sp, #16]
 8005b9e:	4909      	ldr	r1, [pc, #36]	; (8005bc4 <siprintf+0x3c>)
 8005ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba4:	9105      	str	r1, [sp, #20]
 8005ba6:	6800      	ldr	r0, [r0, #0]
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	a902      	add	r1, sp, #8
 8005bac:	f001 fb76 	bl	800729c <_svfiprintf_r>
 8005bb0:	9b02      	ldr	r3, [sp, #8]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	b01c      	add	sp, #112	; 0x70
 8005bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bbc:	b003      	add	sp, #12
 8005bbe:	4770      	bx	lr
 8005bc0:	20000014 	.word	0x20000014
 8005bc4:	ffff0208 	.word	0xffff0208

08005bc8 <quorem>:
 8005bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	6903      	ldr	r3, [r0, #16]
 8005bce:	690c      	ldr	r4, [r1, #16]
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	4607      	mov	r7, r0
 8005bd4:	f2c0 8081 	blt.w	8005cda <quorem+0x112>
 8005bd8:	3c01      	subs	r4, #1
 8005bda:	f101 0814 	add.w	r8, r1, #20
 8005bde:	f100 0514 	add.w	r5, r0, #20
 8005be2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c00:	d331      	bcc.n	8005c66 <quorem+0x9e>
 8005c02:	f04f 0e00 	mov.w	lr, #0
 8005c06:	4640      	mov	r0, r8
 8005c08:	46ac      	mov	ip, r5
 8005c0a:	46f2      	mov	sl, lr
 8005c0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c10:	b293      	uxth	r3, r2
 8005c12:	fb06 e303 	mla	r3, r6, r3, lr
 8005c16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	ebaa 0303 	sub.w	r3, sl, r3
 8005c20:	f8dc a000 	ldr.w	sl, [ip]
 8005c24:	0c12      	lsrs	r2, r2, #16
 8005c26:	fa13 f38a 	uxtah	r3, r3, sl
 8005c2a:	fb06 e202 	mla	r2, r6, r2, lr
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	9b00      	ldr	r3, [sp, #0]
 8005c32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c36:	b292      	uxth	r2, r2
 8005c38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c40:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c44:	4581      	cmp	r9, r0
 8005c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c4a:	f84c 3b04 	str.w	r3, [ip], #4
 8005c4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c52:	d2db      	bcs.n	8005c0c <quorem+0x44>
 8005c54:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c58:	b92b      	cbnz	r3, 8005c66 <quorem+0x9e>
 8005c5a:	9b01      	ldr	r3, [sp, #4]
 8005c5c:	3b04      	subs	r3, #4
 8005c5e:	429d      	cmp	r5, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	d32e      	bcc.n	8005cc2 <quorem+0xfa>
 8005c64:	613c      	str	r4, [r7, #16]
 8005c66:	4638      	mov	r0, r7
 8005c68:	f001 f8c4 	bl	8006df4 <__mcmp>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	db24      	blt.n	8005cba <quorem+0xf2>
 8005c70:	3601      	adds	r6, #1
 8005c72:	4628      	mov	r0, r5
 8005c74:	f04f 0c00 	mov.w	ip, #0
 8005c78:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c7c:	f8d0 e000 	ldr.w	lr, [r0]
 8005c80:	b293      	uxth	r3, r2
 8005c82:	ebac 0303 	sub.w	r3, ip, r3
 8005c86:	0c12      	lsrs	r2, r2, #16
 8005c88:	fa13 f38e 	uxtah	r3, r3, lr
 8005c8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c9a:	45c1      	cmp	r9, r8
 8005c9c:	f840 3b04 	str.w	r3, [r0], #4
 8005ca0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ca4:	d2e8      	bcs.n	8005c78 <quorem+0xb0>
 8005ca6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005caa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cae:	b922      	cbnz	r2, 8005cba <quorem+0xf2>
 8005cb0:	3b04      	subs	r3, #4
 8005cb2:	429d      	cmp	r5, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	d30a      	bcc.n	8005cce <quorem+0x106>
 8005cb8:	613c      	str	r4, [r7, #16]
 8005cba:	4630      	mov	r0, r6
 8005cbc:	b003      	add	sp, #12
 8005cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	3b04      	subs	r3, #4
 8005cc6:	2a00      	cmp	r2, #0
 8005cc8:	d1cc      	bne.n	8005c64 <quorem+0x9c>
 8005cca:	3c01      	subs	r4, #1
 8005ccc:	e7c7      	b.n	8005c5e <quorem+0x96>
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	3b04      	subs	r3, #4
 8005cd2:	2a00      	cmp	r2, #0
 8005cd4:	d1f0      	bne.n	8005cb8 <quorem+0xf0>
 8005cd6:	3c01      	subs	r4, #1
 8005cd8:	e7eb      	b.n	8005cb2 <quorem+0xea>
 8005cda:	2000      	movs	r0, #0
 8005cdc:	e7ee      	b.n	8005cbc <quorem+0xf4>
	...

08005ce0 <_dtoa_r>:
 8005ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce4:	ed2d 8b04 	vpush	{d8-d9}
 8005ce8:	ec57 6b10 	vmov	r6, r7, d0
 8005cec:	b093      	sub	sp, #76	; 0x4c
 8005cee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005cf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005cf4:	9106      	str	r1, [sp, #24]
 8005cf6:	ee10 aa10 	vmov	sl, s0
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8005cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8005d00:	46bb      	mov	fp, r7
 8005d02:	b975      	cbnz	r5, 8005d22 <_dtoa_r+0x42>
 8005d04:	2010      	movs	r0, #16
 8005d06:	f000 fddd 	bl	80068c4 <malloc>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	6260      	str	r0, [r4, #36]	; 0x24
 8005d0e:	b920      	cbnz	r0, 8005d1a <_dtoa_r+0x3a>
 8005d10:	4ba7      	ldr	r3, [pc, #668]	; (8005fb0 <_dtoa_r+0x2d0>)
 8005d12:	21ea      	movs	r1, #234	; 0xea
 8005d14:	48a7      	ldr	r0, [pc, #668]	; (8005fb4 <_dtoa_r+0x2d4>)
 8005d16:	f001 fbd1 	bl	80074bc <__assert_func>
 8005d1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d1e:	6005      	str	r5, [r0, #0]
 8005d20:	60c5      	str	r5, [r0, #12]
 8005d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d24:	6819      	ldr	r1, [r3, #0]
 8005d26:	b151      	cbz	r1, 8005d3e <_dtoa_r+0x5e>
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	604a      	str	r2, [r1, #4]
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4093      	lsls	r3, r2
 8005d30:	608b      	str	r3, [r1, #8]
 8005d32:	4620      	mov	r0, r4
 8005d34:	f000 fe1c 	bl	8006970 <_Bfree>
 8005d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	1e3b      	subs	r3, r7, #0
 8005d40:	bfaa      	itet	ge
 8005d42:	2300      	movge	r3, #0
 8005d44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005d48:	f8c8 3000 	strge.w	r3, [r8]
 8005d4c:	4b9a      	ldr	r3, [pc, #616]	; (8005fb8 <_dtoa_r+0x2d8>)
 8005d4e:	bfbc      	itt	lt
 8005d50:	2201      	movlt	r2, #1
 8005d52:	f8c8 2000 	strlt.w	r2, [r8]
 8005d56:	ea33 030b 	bics.w	r3, r3, fp
 8005d5a:	d11b      	bne.n	8005d94 <_dtoa_r+0xb4>
 8005d5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d68:	4333      	orrs	r3, r6
 8005d6a:	f000 8592 	beq.w	8006892 <_dtoa_r+0xbb2>
 8005d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d70:	b963      	cbnz	r3, 8005d8c <_dtoa_r+0xac>
 8005d72:	4b92      	ldr	r3, [pc, #584]	; (8005fbc <_dtoa_r+0x2dc>)
 8005d74:	e022      	b.n	8005dbc <_dtoa_r+0xdc>
 8005d76:	4b92      	ldr	r3, [pc, #584]	; (8005fc0 <_dtoa_r+0x2e0>)
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	9801      	ldr	r0, [sp, #4]
 8005d82:	b013      	add	sp, #76	; 0x4c
 8005d84:	ecbd 8b04 	vpop	{d8-d9}
 8005d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8c:	4b8b      	ldr	r3, [pc, #556]	; (8005fbc <_dtoa_r+0x2dc>)
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	3303      	adds	r3, #3
 8005d92:	e7f3      	b.n	8005d7c <_dtoa_r+0x9c>
 8005d94:	2200      	movs	r2, #0
 8005d96:	2300      	movs	r3, #0
 8005d98:	4650      	mov	r0, sl
 8005d9a:	4659      	mov	r1, fp
 8005d9c:	f7fa fefc 	bl	8000b98 <__aeabi_dcmpeq>
 8005da0:	ec4b ab19 	vmov	d9, sl, fp
 8005da4:	4680      	mov	r8, r0
 8005da6:	b158      	cbz	r0, 8005dc0 <_dtoa_r+0xe0>
 8005da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005daa:	2301      	movs	r3, #1
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 856b 	beq.w	800688c <_dtoa_r+0xbac>
 8005db6:	4883      	ldr	r0, [pc, #524]	; (8005fc4 <_dtoa_r+0x2e4>)
 8005db8:	6018      	str	r0, [r3, #0]
 8005dba:	1e43      	subs	r3, r0, #1
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	e7df      	b.n	8005d80 <_dtoa_r+0xa0>
 8005dc0:	ec4b ab10 	vmov	d0, sl, fp
 8005dc4:	aa10      	add	r2, sp, #64	; 0x40
 8005dc6:	a911      	add	r1, sp, #68	; 0x44
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f001 f8b9 	bl	8006f40 <__d2b>
 8005dce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005dd2:	ee08 0a10 	vmov	s16, r0
 8005dd6:	2d00      	cmp	r5, #0
 8005dd8:	f000 8084 	beq.w	8005ee4 <_dtoa_r+0x204>
 8005ddc:	ee19 3a90 	vmov	r3, s19
 8005de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005de4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005de8:	4656      	mov	r6, sl
 8005dea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005dee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005df2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005df6:	4b74      	ldr	r3, [pc, #464]	; (8005fc8 <_dtoa_r+0x2e8>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	f7fa faab 	bl	8000358 <__aeabi_dsub>
 8005e02:	a365      	add	r3, pc, #404	; (adr r3, 8005f98 <_dtoa_r+0x2b8>)
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	f7fa fc5e 	bl	80006c8 <__aeabi_dmul>
 8005e0c:	a364      	add	r3, pc, #400	; (adr r3, 8005fa0 <_dtoa_r+0x2c0>)
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa faa3 	bl	800035c <__adddf3>
 8005e16:	4606      	mov	r6, r0
 8005e18:	4628      	mov	r0, r5
 8005e1a:	460f      	mov	r7, r1
 8005e1c:	f7fa fbea 	bl	80005f4 <__aeabi_i2d>
 8005e20:	a361      	add	r3, pc, #388	; (adr r3, 8005fa8 <_dtoa_r+0x2c8>)
 8005e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e26:	f7fa fc4f 	bl	80006c8 <__aeabi_dmul>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4630      	mov	r0, r6
 8005e30:	4639      	mov	r1, r7
 8005e32:	f7fa fa93 	bl	800035c <__adddf3>
 8005e36:	4606      	mov	r6, r0
 8005e38:	460f      	mov	r7, r1
 8005e3a:	f7fa fef5 	bl	8000c28 <__aeabi_d2iz>
 8005e3e:	2200      	movs	r2, #0
 8005e40:	9000      	str	r0, [sp, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	4630      	mov	r0, r6
 8005e46:	4639      	mov	r1, r7
 8005e48:	f7fa feb0 	bl	8000bac <__aeabi_dcmplt>
 8005e4c:	b150      	cbz	r0, 8005e64 <_dtoa_r+0x184>
 8005e4e:	9800      	ldr	r0, [sp, #0]
 8005e50:	f7fa fbd0 	bl	80005f4 <__aeabi_i2d>
 8005e54:	4632      	mov	r2, r6
 8005e56:	463b      	mov	r3, r7
 8005e58:	f7fa fe9e 	bl	8000b98 <__aeabi_dcmpeq>
 8005e5c:	b910      	cbnz	r0, 8005e64 <_dtoa_r+0x184>
 8005e5e:	9b00      	ldr	r3, [sp, #0]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	9b00      	ldr	r3, [sp, #0]
 8005e66:	2b16      	cmp	r3, #22
 8005e68:	d85a      	bhi.n	8005f20 <_dtoa_r+0x240>
 8005e6a:	9a00      	ldr	r2, [sp, #0]
 8005e6c:	4b57      	ldr	r3, [pc, #348]	; (8005fcc <_dtoa_r+0x2ec>)
 8005e6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	ec51 0b19 	vmov	r0, r1, d9
 8005e7a:	f7fa fe97 	bl	8000bac <__aeabi_dcmplt>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d050      	beq.n	8005f24 <_dtoa_r+0x244>
 8005e82:	9b00      	ldr	r3, [sp, #0]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e8e:	1b5d      	subs	r5, r3, r5
 8005e90:	1e6b      	subs	r3, r5, #1
 8005e92:	9305      	str	r3, [sp, #20]
 8005e94:	bf45      	ittet	mi
 8005e96:	f1c5 0301 	rsbmi	r3, r5, #1
 8005e9a:	9304      	strmi	r3, [sp, #16]
 8005e9c:	2300      	movpl	r3, #0
 8005e9e:	2300      	movmi	r3, #0
 8005ea0:	bf4c      	ite	mi
 8005ea2:	9305      	strmi	r3, [sp, #20]
 8005ea4:	9304      	strpl	r3, [sp, #16]
 8005ea6:	9b00      	ldr	r3, [sp, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	db3d      	blt.n	8005f28 <_dtoa_r+0x248>
 8005eac:	9b05      	ldr	r3, [sp, #20]
 8005eae:	9a00      	ldr	r2, [sp, #0]
 8005eb0:	920a      	str	r2, [sp, #40]	; 0x28
 8005eb2:	4413      	add	r3, r2
 8005eb4:	9305      	str	r3, [sp, #20]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	9307      	str	r3, [sp, #28]
 8005eba:	9b06      	ldr	r3, [sp, #24]
 8005ebc:	2b09      	cmp	r3, #9
 8005ebe:	f200 8089 	bhi.w	8005fd4 <_dtoa_r+0x2f4>
 8005ec2:	2b05      	cmp	r3, #5
 8005ec4:	bfc4      	itt	gt
 8005ec6:	3b04      	subgt	r3, #4
 8005ec8:	9306      	strgt	r3, [sp, #24]
 8005eca:	9b06      	ldr	r3, [sp, #24]
 8005ecc:	f1a3 0302 	sub.w	r3, r3, #2
 8005ed0:	bfcc      	ite	gt
 8005ed2:	2500      	movgt	r5, #0
 8005ed4:	2501      	movle	r5, #1
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	f200 8087 	bhi.w	8005fea <_dtoa_r+0x30a>
 8005edc:	e8df f003 	tbb	[pc, r3]
 8005ee0:	59383a2d 	.word	0x59383a2d
 8005ee4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ee8:	441d      	add	r5, r3
 8005eea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	bfc1      	itttt	gt
 8005ef2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ef6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005efa:	fa0b f303 	lslgt.w	r3, fp, r3
 8005efe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f02:	bfda      	itte	le
 8005f04:	f1c3 0320 	rsble	r3, r3, #32
 8005f08:	fa06 f003 	lslle.w	r0, r6, r3
 8005f0c:	4318      	orrgt	r0, r3
 8005f0e:	f7fa fb61 	bl	80005d4 <__aeabi_ui2d>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4606      	mov	r6, r0
 8005f16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f1a:	3d01      	subs	r5, #1
 8005f1c:	930e      	str	r3, [sp, #56]	; 0x38
 8005f1e:	e76a      	b.n	8005df6 <_dtoa_r+0x116>
 8005f20:	2301      	movs	r3, #1
 8005f22:	e7b2      	b.n	8005e8a <_dtoa_r+0x1aa>
 8005f24:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f26:	e7b1      	b.n	8005e8c <_dtoa_r+0x1ac>
 8005f28:	9b04      	ldr	r3, [sp, #16]
 8005f2a:	9a00      	ldr	r2, [sp, #0]
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	9304      	str	r3, [sp, #16]
 8005f30:	4253      	negs	r3, r2
 8005f32:	9307      	str	r3, [sp, #28]
 8005f34:	2300      	movs	r3, #0
 8005f36:	930a      	str	r3, [sp, #40]	; 0x28
 8005f38:	e7bf      	b.n	8005eba <_dtoa_r+0x1da>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9308      	str	r3, [sp, #32]
 8005f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	dc55      	bgt.n	8005ff0 <_dtoa_r+0x310>
 8005f44:	2301      	movs	r3, #1
 8005f46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f4e:	e00c      	b.n	8005f6a <_dtoa_r+0x28a>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e7f3      	b.n	8005f3c <_dtoa_r+0x25c>
 8005f54:	2300      	movs	r3, #0
 8005f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f58:	9308      	str	r3, [sp, #32]
 8005f5a:	9b00      	ldr	r3, [sp, #0]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	9302      	str	r3, [sp, #8]
 8005f60:	3301      	adds	r3, #1
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	9303      	str	r3, [sp, #12]
 8005f66:	bfb8      	it	lt
 8005f68:	2301      	movlt	r3, #1
 8005f6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	6042      	str	r2, [r0, #4]
 8005f70:	2204      	movs	r2, #4
 8005f72:	f102 0614 	add.w	r6, r2, #20
 8005f76:	429e      	cmp	r6, r3
 8005f78:	6841      	ldr	r1, [r0, #4]
 8005f7a:	d93d      	bls.n	8005ff8 <_dtoa_r+0x318>
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 fcb7 	bl	80068f0 <_Balloc>
 8005f82:	9001      	str	r0, [sp, #4]
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d13b      	bne.n	8006000 <_dtoa_r+0x320>
 8005f88:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <_dtoa_r+0x2f0>)
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f90:	e6c0      	b.n	8005d14 <_dtoa_r+0x34>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e7df      	b.n	8005f56 <_dtoa_r+0x276>
 8005f96:	bf00      	nop
 8005f98:	636f4361 	.word	0x636f4361
 8005f9c:	3fd287a7 	.word	0x3fd287a7
 8005fa0:	8b60c8b3 	.word	0x8b60c8b3
 8005fa4:	3fc68a28 	.word	0x3fc68a28
 8005fa8:	509f79fb 	.word	0x509f79fb
 8005fac:	3fd34413 	.word	0x3fd34413
 8005fb0:	0801b59d 	.word	0x0801b59d
 8005fb4:	0801b5b4 	.word	0x0801b5b4
 8005fb8:	7ff00000 	.word	0x7ff00000
 8005fbc:	0801b599 	.word	0x0801b599
 8005fc0:	0801b590 	.word	0x0801b590
 8005fc4:	0801b56d 	.word	0x0801b56d
 8005fc8:	3ff80000 	.word	0x3ff80000
 8005fcc:	0801b6a8 	.word	0x0801b6a8
 8005fd0:	0801b60f 	.word	0x0801b60f
 8005fd4:	2501      	movs	r5, #1
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	9306      	str	r3, [sp, #24]
 8005fda:	9508      	str	r5, [sp, #32]
 8005fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2312      	movs	r3, #18
 8005fe8:	e7b0      	b.n	8005f4c <_dtoa_r+0x26c>
 8005fea:	2301      	movs	r3, #1
 8005fec:	9308      	str	r3, [sp, #32]
 8005fee:	e7f5      	b.n	8005fdc <_dtoa_r+0x2fc>
 8005ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005ff6:	e7b8      	b.n	8005f6a <_dtoa_r+0x28a>
 8005ff8:	3101      	adds	r1, #1
 8005ffa:	6041      	str	r1, [r0, #4]
 8005ffc:	0052      	lsls	r2, r2, #1
 8005ffe:	e7b8      	b.n	8005f72 <_dtoa_r+0x292>
 8006000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006002:	9a01      	ldr	r2, [sp, #4]
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	9b03      	ldr	r3, [sp, #12]
 8006008:	2b0e      	cmp	r3, #14
 800600a:	f200 809d 	bhi.w	8006148 <_dtoa_r+0x468>
 800600e:	2d00      	cmp	r5, #0
 8006010:	f000 809a 	beq.w	8006148 <_dtoa_r+0x468>
 8006014:	9b00      	ldr	r3, [sp, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	dd32      	ble.n	8006080 <_dtoa_r+0x3a0>
 800601a:	4ab7      	ldr	r2, [pc, #732]	; (80062f8 <_dtoa_r+0x618>)
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006024:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006028:	9b00      	ldr	r3, [sp, #0]
 800602a:	05d8      	lsls	r0, r3, #23
 800602c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006030:	d516      	bpl.n	8006060 <_dtoa_r+0x380>
 8006032:	4bb2      	ldr	r3, [pc, #712]	; (80062fc <_dtoa_r+0x61c>)
 8006034:	ec51 0b19 	vmov	r0, r1, d9
 8006038:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800603c:	f7fa fc6e 	bl	800091c <__aeabi_ddiv>
 8006040:	f007 070f 	and.w	r7, r7, #15
 8006044:	4682      	mov	sl, r0
 8006046:	468b      	mov	fp, r1
 8006048:	2503      	movs	r5, #3
 800604a:	4eac      	ldr	r6, [pc, #688]	; (80062fc <_dtoa_r+0x61c>)
 800604c:	b957      	cbnz	r7, 8006064 <_dtoa_r+0x384>
 800604e:	4642      	mov	r2, r8
 8006050:	464b      	mov	r3, r9
 8006052:	4650      	mov	r0, sl
 8006054:	4659      	mov	r1, fp
 8006056:	f7fa fc61 	bl	800091c <__aeabi_ddiv>
 800605a:	4682      	mov	sl, r0
 800605c:	468b      	mov	fp, r1
 800605e:	e028      	b.n	80060b2 <_dtoa_r+0x3d2>
 8006060:	2502      	movs	r5, #2
 8006062:	e7f2      	b.n	800604a <_dtoa_r+0x36a>
 8006064:	07f9      	lsls	r1, r7, #31
 8006066:	d508      	bpl.n	800607a <_dtoa_r+0x39a>
 8006068:	4640      	mov	r0, r8
 800606a:	4649      	mov	r1, r9
 800606c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006070:	f7fa fb2a 	bl	80006c8 <__aeabi_dmul>
 8006074:	3501      	adds	r5, #1
 8006076:	4680      	mov	r8, r0
 8006078:	4689      	mov	r9, r1
 800607a:	107f      	asrs	r7, r7, #1
 800607c:	3608      	adds	r6, #8
 800607e:	e7e5      	b.n	800604c <_dtoa_r+0x36c>
 8006080:	f000 809b 	beq.w	80061ba <_dtoa_r+0x4da>
 8006084:	9b00      	ldr	r3, [sp, #0]
 8006086:	4f9d      	ldr	r7, [pc, #628]	; (80062fc <_dtoa_r+0x61c>)
 8006088:	425e      	negs	r6, r3
 800608a:	4b9b      	ldr	r3, [pc, #620]	; (80062f8 <_dtoa_r+0x618>)
 800608c:	f006 020f 	and.w	r2, r6, #15
 8006090:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	ec51 0b19 	vmov	r0, r1, d9
 800609c:	f7fa fb14 	bl	80006c8 <__aeabi_dmul>
 80060a0:	1136      	asrs	r6, r6, #4
 80060a2:	4682      	mov	sl, r0
 80060a4:	468b      	mov	fp, r1
 80060a6:	2300      	movs	r3, #0
 80060a8:	2502      	movs	r5, #2
 80060aa:	2e00      	cmp	r6, #0
 80060ac:	d17a      	bne.n	80061a4 <_dtoa_r+0x4c4>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1d3      	bne.n	800605a <_dtoa_r+0x37a>
 80060b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8082 	beq.w	80061be <_dtoa_r+0x4de>
 80060ba:	4b91      	ldr	r3, [pc, #580]	; (8006300 <_dtoa_r+0x620>)
 80060bc:	2200      	movs	r2, #0
 80060be:	4650      	mov	r0, sl
 80060c0:	4659      	mov	r1, fp
 80060c2:	f7fa fd73 	bl	8000bac <__aeabi_dcmplt>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d079      	beq.n	80061be <_dtoa_r+0x4de>
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d076      	beq.n	80061be <_dtoa_r+0x4de>
 80060d0:	9b02      	ldr	r3, [sp, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	dd36      	ble.n	8006144 <_dtoa_r+0x464>
 80060d6:	9b00      	ldr	r3, [sp, #0]
 80060d8:	4650      	mov	r0, sl
 80060da:	4659      	mov	r1, fp
 80060dc:	1e5f      	subs	r7, r3, #1
 80060de:	2200      	movs	r2, #0
 80060e0:	4b88      	ldr	r3, [pc, #544]	; (8006304 <_dtoa_r+0x624>)
 80060e2:	f7fa faf1 	bl	80006c8 <__aeabi_dmul>
 80060e6:	9e02      	ldr	r6, [sp, #8]
 80060e8:	4682      	mov	sl, r0
 80060ea:	468b      	mov	fp, r1
 80060ec:	3501      	adds	r5, #1
 80060ee:	4628      	mov	r0, r5
 80060f0:	f7fa fa80 	bl	80005f4 <__aeabi_i2d>
 80060f4:	4652      	mov	r2, sl
 80060f6:	465b      	mov	r3, fp
 80060f8:	f7fa fae6 	bl	80006c8 <__aeabi_dmul>
 80060fc:	4b82      	ldr	r3, [pc, #520]	; (8006308 <_dtoa_r+0x628>)
 80060fe:	2200      	movs	r2, #0
 8006100:	f7fa f92c 	bl	800035c <__adddf3>
 8006104:	46d0      	mov	r8, sl
 8006106:	46d9      	mov	r9, fp
 8006108:	4682      	mov	sl, r0
 800610a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800610e:	2e00      	cmp	r6, #0
 8006110:	d158      	bne.n	80061c4 <_dtoa_r+0x4e4>
 8006112:	4b7e      	ldr	r3, [pc, #504]	; (800630c <_dtoa_r+0x62c>)
 8006114:	2200      	movs	r2, #0
 8006116:	4640      	mov	r0, r8
 8006118:	4649      	mov	r1, r9
 800611a:	f7fa f91d 	bl	8000358 <__aeabi_dsub>
 800611e:	4652      	mov	r2, sl
 8006120:	465b      	mov	r3, fp
 8006122:	4680      	mov	r8, r0
 8006124:	4689      	mov	r9, r1
 8006126:	f7fa fd5f 	bl	8000be8 <__aeabi_dcmpgt>
 800612a:	2800      	cmp	r0, #0
 800612c:	f040 8295 	bne.w	800665a <_dtoa_r+0x97a>
 8006130:	4652      	mov	r2, sl
 8006132:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006136:	4640      	mov	r0, r8
 8006138:	4649      	mov	r1, r9
 800613a:	f7fa fd37 	bl	8000bac <__aeabi_dcmplt>
 800613e:	2800      	cmp	r0, #0
 8006140:	f040 8289 	bne.w	8006656 <_dtoa_r+0x976>
 8006144:	ec5b ab19 	vmov	sl, fp, d9
 8006148:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800614a:	2b00      	cmp	r3, #0
 800614c:	f2c0 8148 	blt.w	80063e0 <_dtoa_r+0x700>
 8006150:	9a00      	ldr	r2, [sp, #0]
 8006152:	2a0e      	cmp	r2, #14
 8006154:	f300 8144 	bgt.w	80063e0 <_dtoa_r+0x700>
 8006158:	4b67      	ldr	r3, [pc, #412]	; (80062f8 <_dtoa_r+0x618>)
 800615a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800615e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	f280 80d5 	bge.w	8006314 <_dtoa_r+0x634>
 800616a:	9b03      	ldr	r3, [sp, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f300 80d1 	bgt.w	8006314 <_dtoa_r+0x634>
 8006172:	f040 826f 	bne.w	8006654 <_dtoa_r+0x974>
 8006176:	4b65      	ldr	r3, [pc, #404]	; (800630c <_dtoa_r+0x62c>)
 8006178:	2200      	movs	r2, #0
 800617a:	4640      	mov	r0, r8
 800617c:	4649      	mov	r1, r9
 800617e:	f7fa faa3 	bl	80006c8 <__aeabi_dmul>
 8006182:	4652      	mov	r2, sl
 8006184:	465b      	mov	r3, fp
 8006186:	f7fa fd25 	bl	8000bd4 <__aeabi_dcmpge>
 800618a:	9e03      	ldr	r6, [sp, #12]
 800618c:	4637      	mov	r7, r6
 800618e:	2800      	cmp	r0, #0
 8006190:	f040 8245 	bne.w	800661e <_dtoa_r+0x93e>
 8006194:	9d01      	ldr	r5, [sp, #4]
 8006196:	2331      	movs	r3, #49	; 0x31
 8006198:	f805 3b01 	strb.w	r3, [r5], #1
 800619c:	9b00      	ldr	r3, [sp, #0]
 800619e:	3301      	adds	r3, #1
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	e240      	b.n	8006626 <_dtoa_r+0x946>
 80061a4:	07f2      	lsls	r2, r6, #31
 80061a6:	d505      	bpl.n	80061b4 <_dtoa_r+0x4d4>
 80061a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ac:	f7fa fa8c 	bl	80006c8 <__aeabi_dmul>
 80061b0:	3501      	adds	r5, #1
 80061b2:	2301      	movs	r3, #1
 80061b4:	1076      	asrs	r6, r6, #1
 80061b6:	3708      	adds	r7, #8
 80061b8:	e777      	b.n	80060aa <_dtoa_r+0x3ca>
 80061ba:	2502      	movs	r5, #2
 80061bc:	e779      	b.n	80060b2 <_dtoa_r+0x3d2>
 80061be:	9f00      	ldr	r7, [sp, #0]
 80061c0:	9e03      	ldr	r6, [sp, #12]
 80061c2:	e794      	b.n	80060ee <_dtoa_r+0x40e>
 80061c4:	9901      	ldr	r1, [sp, #4]
 80061c6:	4b4c      	ldr	r3, [pc, #304]	; (80062f8 <_dtoa_r+0x618>)
 80061c8:	4431      	add	r1, r6
 80061ca:	910d      	str	r1, [sp, #52]	; 0x34
 80061cc:	9908      	ldr	r1, [sp, #32]
 80061ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061d6:	2900      	cmp	r1, #0
 80061d8:	d043      	beq.n	8006262 <_dtoa_r+0x582>
 80061da:	494d      	ldr	r1, [pc, #308]	; (8006310 <_dtoa_r+0x630>)
 80061dc:	2000      	movs	r0, #0
 80061de:	f7fa fb9d 	bl	800091c <__aeabi_ddiv>
 80061e2:	4652      	mov	r2, sl
 80061e4:	465b      	mov	r3, fp
 80061e6:	f7fa f8b7 	bl	8000358 <__aeabi_dsub>
 80061ea:	9d01      	ldr	r5, [sp, #4]
 80061ec:	4682      	mov	sl, r0
 80061ee:	468b      	mov	fp, r1
 80061f0:	4649      	mov	r1, r9
 80061f2:	4640      	mov	r0, r8
 80061f4:	f7fa fd18 	bl	8000c28 <__aeabi_d2iz>
 80061f8:	4606      	mov	r6, r0
 80061fa:	f7fa f9fb 	bl	80005f4 <__aeabi_i2d>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4640      	mov	r0, r8
 8006204:	4649      	mov	r1, r9
 8006206:	f7fa f8a7 	bl	8000358 <__aeabi_dsub>
 800620a:	3630      	adds	r6, #48	; 0x30
 800620c:	f805 6b01 	strb.w	r6, [r5], #1
 8006210:	4652      	mov	r2, sl
 8006212:	465b      	mov	r3, fp
 8006214:	4680      	mov	r8, r0
 8006216:	4689      	mov	r9, r1
 8006218:	f7fa fcc8 	bl	8000bac <__aeabi_dcmplt>
 800621c:	2800      	cmp	r0, #0
 800621e:	d163      	bne.n	80062e8 <_dtoa_r+0x608>
 8006220:	4642      	mov	r2, r8
 8006222:	464b      	mov	r3, r9
 8006224:	4936      	ldr	r1, [pc, #216]	; (8006300 <_dtoa_r+0x620>)
 8006226:	2000      	movs	r0, #0
 8006228:	f7fa f896 	bl	8000358 <__aeabi_dsub>
 800622c:	4652      	mov	r2, sl
 800622e:	465b      	mov	r3, fp
 8006230:	f7fa fcbc 	bl	8000bac <__aeabi_dcmplt>
 8006234:	2800      	cmp	r0, #0
 8006236:	f040 80b5 	bne.w	80063a4 <_dtoa_r+0x6c4>
 800623a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800623c:	429d      	cmp	r5, r3
 800623e:	d081      	beq.n	8006144 <_dtoa_r+0x464>
 8006240:	4b30      	ldr	r3, [pc, #192]	; (8006304 <_dtoa_r+0x624>)
 8006242:	2200      	movs	r2, #0
 8006244:	4650      	mov	r0, sl
 8006246:	4659      	mov	r1, fp
 8006248:	f7fa fa3e 	bl	80006c8 <__aeabi_dmul>
 800624c:	4b2d      	ldr	r3, [pc, #180]	; (8006304 <_dtoa_r+0x624>)
 800624e:	4682      	mov	sl, r0
 8006250:	468b      	mov	fp, r1
 8006252:	4640      	mov	r0, r8
 8006254:	4649      	mov	r1, r9
 8006256:	2200      	movs	r2, #0
 8006258:	f7fa fa36 	bl	80006c8 <__aeabi_dmul>
 800625c:	4680      	mov	r8, r0
 800625e:	4689      	mov	r9, r1
 8006260:	e7c6      	b.n	80061f0 <_dtoa_r+0x510>
 8006262:	4650      	mov	r0, sl
 8006264:	4659      	mov	r1, fp
 8006266:	f7fa fa2f 	bl	80006c8 <__aeabi_dmul>
 800626a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800626c:	9d01      	ldr	r5, [sp, #4]
 800626e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006270:	4682      	mov	sl, r0
 8006272:	468b      	mov	fp, r1
 8006274:	4649      	mov	r1, r9
 8006276:	4640      	mov	r0, r8
 8006278:	f7fa fcd6 	bl	8000c28 <__aeabi_d2iz>
 800627c:	4606      	mov	r6, r0
 800627e:	f7fa f9b9 	bl	80005f4 <__aeabi_i2d>
 8006282:	3630      	adds	r6, #48	; 0x30
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4640      	mov	r0, r8
 800628a:	4649      	mov	r1, r9
 800628c:	f7fa f864 	bl	8000358 <__aeabi_dsub>
 8006290:	f805 6b01 	strb.w	r6, [r5], #1
 8006294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006296:	429d      	cmp	r5, r3
 8006298:	4680      	mov	r8, r0
 800629a:	4689      	mov	r9, r1
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	d124      	bne.n	80062ec <_dtoa_r+0x60c>
 80062a2:	4b1b      	ldr	r3, [pc, #108]	; (8006310 <_dtoa_r+0x630>)
 80062a4:	4650      	mov	r0, sl
 80062a6:	4659      	mov	r1, fp
 80062a8:	f7fa f858 	bl	800035c <__adddf3>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4640      	mov	r0, r8
 80062b2:	4649      	mov	r1, r9
 80062b4:	f7fa fc98 	bl	8000be8 <__aeabi_dcmpgt>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d173      	bne.n	80063a4 <_dtoa_r+0x6c4>
 80062bc:	4652      	mov	r2, sl
 80062be:	465b      	mov	r3, fp
 80062c0:	4913      	ldr	r1, [pc, #76]	; (8006310 <_dtoa_r+0x630>)
 80062c2:	2000      	movs	r0, #0
 80062c4:	f7fa f848 	bl	8000358 <__aeabi_dsub>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4640      	mov	r0, r8
 80062ce:	4649      	mov	r1, r9
 80062d0:	f7fa fc6c 	bl	8000bac <__aeabi_dcmplt>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	f43f af35 	beq.w	8006144 <_dtoa_r+0x464>
 80062da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062dc:	1e6b      	subs	r3, r5, #1
 80062de:	930f      	str	r3, [sp, #60]	; 0x3c
 80062e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062e4:	2b30      	cmp	r3, #48	; 0x30
 80062e6:	d0f8      	beq.n	80062da <_dtoa_r+0x5fa>
 80062e8:	9700      	str	r7, [sp, #0]
 80062ea:	e049      	b.n	8006380 <_dtoa_r+0x6a0>
 80062ec:	4b05      	ldr	r3, [pc, #20]	; (8006304 <_dtoa_r+0x624>)
 80062ee:	f7fa f9eb 	bl	80006c8 <__aeabi_dmul>
 80062f2:	4680      	mov	r8, r0
 80062f4:	4689      	mov	r9, r1
 80062f6:	e7bd      	b.n	8006274 <_dtoa_r+0x594>
 80062f8:	0801b6a8 	.word	0x0801b6a8
 80062fc:	0801b680 	.word	0x0801b680
 8006300:	3ff00000 	.word	0x3ff00000
 8006304:	40240000 	.word	0x40240000
 8006308:	401c0000 	.word	0x401c0000
 800630c:	40140000 	.word	0x40140000
 8006310:	3fe00000 	.word	0x3fe00000
 8006314:	9d01      	ldr	r5, [sp, #4]
 8006316:	4656      	mov	r6, sl
 8006318:	465f      	mov	r7, fp
 800631a:	4642      	mov	r2, r8
 800631c:	464b      	mov	r3, r9
 800631e:	4630      	mov	r0, r6
 8006320:	4639      	mov	r1, r7
 8006322:	f7fa fafb 	bl	800091c <__aeabi_ddiv>
 8006326:	f7fa fc7f 	bl	8000c28 <__aeabi_d2iz>
 800632a:	4682      	mov	sl, r0
 800632c:	f7fa f962 	bl	80005f4 <__aeabi_i2d>
 8006330:	4642      	mov	r2, r8
 8006332:	464b      	mov	r3, r9
 8006334:	f7fa f9c8 	bl	80006c8 <__aeabi_dmul>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4630      	mov	r0, r6
 800633e:	4639      	mov	r1, r7
 8006340:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006344:	f7fa f808 	bl	8000358 <__aeabi_dsub>
 8006348:	f805 6b01 	strb.w	r6, [r5], #1
 800634c:	9e01      	ldr	r6, [sp, #4]
 800634e:	9f03      	ldr	r7, [sp, #12]
 8006350:	1bae      	subs	r6, r5, r6
 8006352:	42b7      	cmp	r7, r6
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	d135      	bne.n	80063c6 <_dtoa_r+0x6e6>
 800635a:	f7f9 ffff 	bl	800035c <__adddf3>
 800635e:	4642      	mov	r2, r8
 8006360:	464b      	mov	r3, r9
 8006362:	4606      	mov	r6, r0
 8006364:	460f      	mov	r7, r1
 8006366:	f7fa fc3f 	bl	8000be8 <__aeabi_dcmpgt>
 800636a:	b9d0      	cbnz	r0, 80063a2 <_dtoa_r+0x6c2>
 800636c:	4642      	mov	r2, r8
 800636e:	464b      	mov	r3, r9
 8006370:	4630      	mov	r0, r6
 8006372:	4639      	mov	r1, r7
 8006374:	f7fa fc10 	bl	8000b98 <__aeabi_dcmpeq>
 8006378:	b110      	cbz	r0, 8006380 <_dtoa_r+0x6a0>
 800637a:	f01a 0f01 	tst.w	sl, #1
 800637e:	d110      	bne.n	80063a2 <_dtoa_r+0x6c2>
 8006380:	4620      	mov	r0, r4
 8006382:	ee18 1a10 	vmov	r1, s16
 8006386:	f000 faf3 	bl	8006970 <_Bfree>
 800638a:	2300      	movs	r3, #0
 800638c:	9800      	ldr	r0, [sp, #0]
 800638e:	702b      	strb	r3, [r5, #0]
 8006390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006392:	3001      	adds	r0, #1
 8006394:	6018      	str	r0, [r3, #0]
 8006396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006398:	2b00      	cmp	r3, #0
 800639a:	f43f acf1 	beq.w	8005d80 <_dtoa_r+0xa0>
 800639e:	601d      	str	r5, [r3, #0]
 80063a0:	e4ee      	b.n	8005d80 <_dtoa_r+0xa0>
 80063a2:	9f00      	ldr	r7, [sp, #0]
 80063a4:	462b      	mov	r3, r5
 80063a6:	461d      	mov	r5, r3
 80063a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ac:	2a39      	cmp	r2, #57	; 0x39
 80063ae:	d106      	bne.n	80063be <_dtoa_r+0x6de>
 80063b0:	9a01      	ldr	r2, [sp, #4]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d1f7      	bne.n	80063a6 <_dtoa_r+0x6c6>
 80063b6:	9901      	ldr	r1, [sp, #4]
 80063b8:	2230      	movs	r2, #48	; 0x30
 80063ba:	3701      	adds	r7, #1
 80063bc:	700a      	strb	r2, [r1, #0]
 80063be:	781a      	ldrb	r2, [r3, #0]
 80063c0:	3201      	adds	r2, #1
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	e790      	b.n	80062e8 <_dtoa_r+0x608>
 80063c6:	4ba6      	ldr	r3, [pc, #664]	; (8006660 <_dtoa_r+0x980>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	f7fa f97d 	bl	80006c8 <__aeabi_dmul>
 80063ce:	2200      	movs	r2, #0
 80063d0:	2300      	movs	r3, #0
 80063d2:	4606      	mov	r6, r0
 80063d4:	460f      	mov	r7, r1
 80063d6:	f7fa fbdf 	bl	8000b98 <__aeabi_dcmpeq>
 80063da:	2800      	cmp	r0, #0
 80063dc:	d09d      	beq.n	800631a <_dtoa_r+0x63a>
 80063de:	e7cf      	b.n	8006380 <_dtoa_r+0x6a0>
 80063e0:	9a08      	ldr	r2, [sp, #32]
 80063e2:	2a00      	cmp	r2, #0
 80063e4:	f000 80d7 	beq.w	8006596 <_dtoa_r+0x8b6>
 80063e8:	9a06      	ldr	r2, [sp, #24]
 80063ea:	2a01      	cmp	r2, #1
 80063ec:	f300 80ba 	bgt.w	8006564 <_dtoa_r+0x884>
 80063f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063f2:	2a00      	cmp	r2, #0
 80063f4:	f000 80b2 	beq.w	800655c <_dtoa_r+0x87c>
 80063f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063fc:	9e07      	ldr	r6, [sp, #28]
 80063fe:	9d04      	ldr	r5, [sp, #16]
 8006400:	9a04      	ldr	r2, [sp, #16]
 8006402:	441a      	add	r2, r3
 8006404:	9204      	str	r2, [sp, #16]
 8006406:	9a05      	ldr	r2, [sp, #20]
 8006408:	2101      	movs	r1, #1
 800640a:	441a      	add	r2, r3
 800640c:	4620      	mov	r0, r4
 800640e:	9205      	str	r2, [sp, #20]
 8006410:	f000 fb66 	bl	8006ae0 <__i2b>
 8006414:	4607      	mov	r7, r0
 8006416:	2d00      	cmp	r5, #0
 8006418:	dd0c      	ble.n	8006434 <_dtoa_r+0x754>
 800641a:	9b05      	ldr	r3, [sp, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	dd09      	ble.n	8006434 <_dtoa_r+0x754>
 8006420:	42ab      	cmp	r3, r5
 8006422:	9a04      	ldr	r2, [sp, #16]
 8006424:	bfa8      	it	ge
 8006426:	462b      	movge	r3, r5
 8006428:	1ad2      	subs	r2, r2, r3
 800642a:	9204      	str	r2, [sp, #16]
 800642c:	9a05      	ldr	r2, [sp, #20]
 800642e:	1aed      	subs	r5, r5, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	9305      	str	r3, [sp, #20]
 8006434:	9b07      	ldr	r3, [sp, #28]
 8006436:	b31b      	cbz	r3, 8006480 <_dtoa_r+0x7a0>
 8006438:	9b08      	ldr	r3, [sp, #32]
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 80af 	beq.w	800659e <_dtoa_r+0x8be>
 8006440:	2e00      	cmp	r6, #0
 8006442:	dd13      	ble.n	800646c <_dtoa_r+0x78c>
 8006444:	4639      	mov	r1, r7
 8006446:	4632      	mov	r2, r6
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fc09 	bl	8006c60 <__pow5mult>
 800644e:	ee18 2a10 	vmov	r2, s16
 8006452:	4601      	mov	r1, r0
 8006454:	4607      	mov	r7, r0
 8006456:	4620      	mov	r0, r4
 8006458:	f000 fb58 	bl	8006b0c <__multiply>
 800645c:	ee18 1a10 	vmov	r1, s16
 8006460:	4680      	mov	r8, r0
 8006462:	4620      	mov	r0, r4
 8006464:	f000 fa84 	bl	8006970 <_Bfree>
 8006468:	ee08 8a10 	vmov	s16, r8
 800646c:	9b07      	ldr	r3, [sp, #28]
 800646e:	1b9a      	subs	r2, r3, r6
 8006470:	d006      	beq.n	8006480 <_dtoa_r+0x7a0>
 8006472:	ee18 1a10 	vmov	r1, s16
 8006476:	4620      	mov	r0, r4
 8006478:	f000 fbf2 	bl	8006c60 <__pow5mult>
 800647c:	ee08 0a10 	vmov	s16, r0
 8006480:	2101      	movs	r1, #1
 8006482:	4620      	mov	r0, r4
 8006484:	f000 fb2c 	bl	8006ae0 <__i2b>
 8006488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800648a:	2b00      	cmp	r3, #0
 800648c:	4606      	mov	r6, r0
 800648e:	f340 8088 	ble.w	80065a2 <_dtoa_r+0x8c2>
 8006492:	461a      	mov	r2, r3
 8006494:	4601      	mov	r1, r0
 8006496:	4620      	mov	r0, r4
 8006498:	f000 fbe2 	bl	8006c60 <__pow5mult>
 800649c:	9b06      	ldr	r3, [sp, #24]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	4606      	mov	r6, r0
 80064a2:	f340 8081 	ble.w	80065a8 <_dtoa_r+0x8c8>
 80064a6:	f04f 0800 	mov.w	r8, #0
 80064aa:	6933      	ldr	r3, [r6, #16]
 80064ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064b0:	6918      	ldr	r0, [r3, #16]
 80064b2:	f000 fac5 	bl	8006a40 <__hi0bits>
 80064b6:	f1c0 0020 	rsb	r0, r0, #32
 80064ba:	9b05      	ldr	r3, [sp, #20]
 80064bc:	4418      	add	r0, r3
 80064be:	f010 001f 	ands.w	r0, r0, #31
 80064c2:	f000 8092 	beq.w	80065ea <_dtoa_r+0x90a>
 80064c6:	f1c0 0320 	rsb	r3, r0, #32
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	f340 808a 	ble.w	80065e4 <_dtoa_r+0x904>
 80064d0:	f1c0 001c 	rsb	r0, r0, #28
 80064d4:	9b04      	ldr	r3, [sp, #16]
 80064d6:	4403      	add	r3, r0
 80064d8:	9304      	str	r3, [sp, #16]
 80064da:	9b05      	ldr	r3, [sp, #20]
 80064dc:	4403      	add	r3, r0
 80064de:	4405      	add	r5, r0
 80064e0:	9305      	str	r3, [sp, #20]
 80064e2:	9b04      	ldr	r3, [sp, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dd07      	ble.n	80064f8 <_dtoa_r+0x818>
 80064e8:	ee18 1a10 	vmov	r1, s16
 80064ec:	461a      	mov	r2, r3
 80064ee:	4620      	mov	r0, r4
 80064f0:	f000 fc10 	bl	8006d14 <__lshift>
 80064f4:	ee08 0a10 	vmov	s16, r0
 80064f8:	9b05      	ldr	r3, [sp, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	dd05      	ble.n	800650a <_dtoa_r+0x82a>
 80064fe:	4631      	mov	r1, r6
 8006500:	461a      	mov	r2, r3
 8006502:	4620      	mov	r0, r4
 8006504:	f000 fc06 	bl	8006d14 <__lshift>
 8006508:	4606      	mov	r6, r0
 800650a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d06e      	beq.n	80065ee <_dtoa_r+0x90e>
 8006510:	ee18 0a10 	vmov	r0, s16
 8006514:	4631      	mov	r1, r6
 8006516:	f000 fc6d 	bl	8006df4 <__mcmp>
 800651a:	2800      	cmp	r0, #0
 800651c:	da67      	bge.n	80065ee <_dtoa_r+0x90e>
 800651e:	9b00      	ldr	r3, [sp, #0]
 8006520:	3b01      	subs	r3, #1
 8006522:	ee18 1a10 	vmov	r1, s16
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	220a      	movs	r2, #10
 800652a:	2300      	movs	r3, #0
 800652c:	4620      	mov	r0, r4
 800652e:	f000 fa41 	bl	80069b4 <__multadd>
 8006532:	9b08      	ldr	r3, [sp, #32]
 8006534:	ee08 0a10 	vmov	s16, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 81b1 	beq.w	80068a0 <_dtoa_r+0xbc0>
 800653e:	2300      	movs	r3, #0
 8006540:	4639      	mov	r1, r7
 8006542:	220a      	movs	r2, #10
 8006544:	4620      	mov	r0, r4
 8006546:	f000 fa35 	bl	80069b4 <__multadd>
 800654a:	9b02      	ldr	r3, [sp, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	4607      	mov	r7, r0
 8006550:	f300 808e 	bgt.w	8006670 <_dtoa_r+0x990>
 8006554:	9b06      	ldr	r3, [sp, #24]
 8006556:	2b02      	cmp	r3, #2
 8006558:	dc51      	bgt.n	80065fe <_dtoa_r+0x91e>
 800655a:	e089      	b.n	8006670 <_dtoa_r+0x990>
 800655c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800655e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006562:	e74b      	b.n	80063fc <_dtoa_r+0x71c>
 8006564:	9b03      	ldr	r3, [sp, #12]
 8006566:	1e5e      	subs	r6, r3, #1
 8006568:	9b07      	ldr	r3, [sp, #28]
 800656a:	42b3      	cmp	r3, r6
 800656c:	bfbf      	itttt	lt
 800656e:	9b07      	ldrlt	r3, [sp, #28]
 8006570:	9607      	strlt	r6, [sp, #28]
 8006572:	1af2      	sublt	r2, r6, r3
 8006574:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006576:	bfb6      	itet	lt
 8006578:	189b      	addlt	r3, r3, r2
 800657a:	1b9e      	subge	r6, r3, r6
 800657c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800657e:	9b03      	ldr	r3, [sp, #12]
 8006580:	bfb8      	it	lt
 8006582:	2600      	movlt	r6, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	bfb7      	itett	lt
 8006588:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800658c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006590:	1a9d      	sublt	r5, r3, r2
 8006592:	2300      	movlt	r3, #0
 8006594:	e734      	b.n	8006400 <_dtoa_r+0x720>
 8006596:	9e07      	ldr	r6, [sp, #28]
 8006598:	9d04      	ldr	r5, [sp, #16]
 800659a:	9f08      	ldr	r7, [sp, #32]
 800659c:	e73b      	b.n	8006416 <_dtoa_r+0x736>
 800659e:	9a07      	ldr	r2, [sp, #28]
 80065a0:	e767      	b.n	8006472 <_dtoa_r+0x792>
 80065a2:	9b06      	ldr	r3, [sp, #24]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	dc18      	bgt.n	80065da <_dtoa_r+0x8fa>
 80065a8:	f1ba 0f00 	cmp.w	sl, #0
 80065ac:	d115      	bne.n	80065da <_dtoa_r+0x8fa>
 80065ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065b2:	b993      	cbnz	r3, 80065da <_dtoa_r+0x8fa>
 80065b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065b8:	0d1b      	lsrs	r3, r3, #20
 80065ba:	051b      	lsls	r3, r3, #20
 80065bc:	b183      	cbz	r3, 80065e0 <_dtoa_r+0x900>
 80065be:	9b04      	ldr	r3, [sp, #16]
 80065c0:	3301      	adds	r3, #1
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	9b05      	ldr	r3, [sp, #20]
 80065c6:	3301      	adds	r3, #1
 80065c8:	9305      	str	r3, [sp, #20]
 80065ca:	f04f 0801 	mov.w	r8, #1
 80065ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f47f af6a 	bne.w	80064aa <_dtoa_r+0x7ca>
 80065d6:	2001      	movs	r0, #1
 80065d8:	e76f      	b.n	80064ba <_dtoa_r+0x7da>
 80065da:	f04f 0800 	mov.w	r8, #0
 80065de:	e7f6      	b.n	80065ce <_dtoa_r+0x8ee>
 80065e0:	4698      	mov	r8, r3
 80065e2:	e7f4      	b.n	80065ce <_dtoa_r+0x8ee>
 80065e4:	f43f af7d 	beq.w	80064e2 <_dtoa_r+0x802>
 80065e8:	4618      	mov	r0, r3
 80065ea:	301c      	adds	r0, #28
 80065ec:	e772      	b.n	80064d4 <_dtoa_r+0x7f4>
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dc37      	bgt.n	8006664 <_dtoa_r+0x984>
 80065f4:	9b06      	ldr	r3, [sp, #24]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	dd34      	ble.n	8006664 <_dtoa_r+0x984>
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	9302      	str	r3, [sp, #8]
 80065fe:	9b02      	ldr	r3, [sp, #8]
 8006600:	b96b      	cbnz	r3, 800661e <_dtoa_r+0x93e>
 8006602:	4631      	mov	r1, r6
 8006604:	2205      	movs	r2, #5
 8006606:	4620      	mov	r0, r4
 8006608:	f000 f9d4 	bl	80069b4 <__multadd>
 800660c:	4601      	mov	r1, r0
 800660e:	4606      	mov	r6, r0
 8006610:	ee18 0a10 	vmov	r0, s16
 8006614:	f000 fbee 	bl	8006df4 <__mcmp>
 8006618:	2800      	cmp	r0, #0
 800661a:	f73f adbb 	bgt.w	8006194 <_dtoa_r+0x4b4>
 800661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006620:	9d01      	ldr	r5, [sp, #4]
 8006622:	43db      	mvns	r3, r3
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	f04f 0800 	mov.w	r8, #0
 800662a:	4631      	mov	r1, r6
 800662c:	4620      	mov	r0, r4
 800662e:	f000 f99f 	bl	8006970 <_Bfree>
 8006632:	2f00      	cmp	r7, #0
 8006634:	f43f aea4 	beq.w	8006380 <_dtoa_r+0x6a0>
 8006638:	f1b8 0f00 	cmp.w	r8, #0
 800663c:	d005      	beq.n	800664a <_dtoa_r+0x96a>
 800663e:	45b8      	cmp	r8, r7
 8006640:	d003      	beq.n	800664a <_dtoa_r+0x96a>
 8006642:	4641      	mov	r1, r8
 8006644:	4620      	mov	r0, r4
 8006646:	f000 f993 	bl	8006970 <_Bfree>
 800664a:	4639      	mov	r1, r7
 800664c:	4620      	mov	r0, r4
 800664e:	f000 f98f 	bl	8006970 <_Bfree>
 8006652:	e695      	b.n	8006380 <_dtoa_r+0x6a0>
 8006654:	2600      	movs	r6, #0
 8006656:	4637      	mov	r7, r6
 8006658:	e7e1      	b.n	800661e <_dtoa_r+0x93e>
 800665a:	9700      	str	r7, [sp, #0]
 800665c:	4637      	mov	r7, r6
 800665e:	e599      	b.n	8006194 <_dtoa_r+0x4b4>
 8006660:	40240000 	.word	0x40240000
 8006664:	9b08      	ldr	r3, [sp, #32]
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 80ca 	beq.w	8006800 <_dtoa_r+0xb20>
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	9302      	str	r3, [sp, #8]
 8006670:	2d00      	cmp	r5, #0
 8006672:	dd05      	ble.n	8006680 <_dtoa_r+0x9a0>
 8006674:	4639      	mov	r1, r7
 8006676:	462a      	mov	r2, r5
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fb4b 	bl	8006d14 <__lshift>
 800667e:	4607      	mov	r7, r0
 8006680:	f1b8 0f00 	cmp.w	r8, #0
 8006684:	d05b      	beq.n	800673e <_dtoa_r+0xa5e>
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	4620      	mov	r0, r4
 800668a:	f000 f931 	bl	80068f0 <_Balloc>
 800668e:	4605      	mov	r5, r0
 8006690:	b928      	cbnz	r0, 800669e <_dtoa_r+0x9be>
 8006692:	4b87      	ldr	r3, [pc, #540]	; (80068b0 <_dtoa_r+0xbd0>)
 8006694:	4602      	mov	r2, r0
 8006696:	f240 21ea 	movw	r1, #746	; 0x2ea
 800669a:	f7ff bb3b 	b.w	8005d14 <_dtoa_r+0x34>
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	3202      	adds	r2, #2
 80066a2:	0092      	lsls	r2, r2, #2
 80066a4:	f107 010c 	add.w	r1, r7, #12
 80066a8:	300c      	adds	r0, #12
 80066aa:	f000 f913 	bl	80068d4 <memcpy>
 80066ae:	2201      	movs	r2, #1
 80066b0:	4629      	mov	r1, r5
 80066b2:	4620      	mov	r0, r4
 80066b4:	f000 fb2e 	bl	8006d14 <__lshift>
 80066b8:	9b01      	ldr	r3, [sp, #4]
 80066ba:	f103 0901 	add.w	r9, r3, #1
 80066be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80066c2:	4413      	add	r3, r2
 80066c4:	9305      	str	r3, [sp, #20]
 80066c6:	f00a 0301 	and.w	r3, sl, #1
 80066ca:	46b8      	mov	r8, r7
 80066cc:	9304      	str	r3, [sp, #16]
 80066ce:	4607      	mov	r7, r0
 80066d0:	4631      	mov	r1, r6
 80066d2:	ee18 0a10 	vmov	r0, s16
 80066d6:	f7ff fa77 	bl	8005bc8 <quorem>
 80066da:	4641      	mov	r1, r8
 80066dc:	9002      	str	r0, [sp, #8]
 80066de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80066e2:	ee18 0a10 	vmov	r0, s16
 80066e6:	f000 fb85 	bl	8006df4 <__mcmp>
 80066ea:	463a      	mov	r2, r7
 80066ec:	9003      	str	r0, [sp, #12]
 80066ee:	4631      	mov	r1, r6
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 fb9b 	bl	8006e2c <__mdiff>
 80066f6:	68c2      	ldr	r2, [r0, #12]
 80066f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80066fc:	4605      	mov	r5, r0
 80066fe:	bb02      	cbnz	r2, 8006742 <_dtoa_r+0xa62>
 8006700:	4601      	mov	r1, r0
 8006702:	ee18 0a10 	vmov	r0, s16
 8006706:	f000 fb75 	bl	8006df4 <__mcmp>
 800670a:	4602      	mov	r2, r0
 800670c:	4629      	mov	r1, r5
 800670e:	4620      	mov	r0, r4
 8006710:	9207      	str	r2, [sp, #28]
 8006712:	f000 f92d 	bl	8006970 <_Bfree>
 8006716:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800671a:	ea43 0102 	orr.w	r1, r3, r2
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	430b      	orrs	r3, r1
 8006722:	464d      	mov	r5, r9
 8006724:	d10f      	bne.n	8006746 <_dtoa_r+0xa66>
 8006726:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800672a:	d02a      	beq.n	8006782 <_dtoa_r+0xaa2>
 800672c:	9b03      	ldr	r3, [sp, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	dd02      	ble.n	8006738 <_dtoa_r+0xa58>
 8006732:	9b02      	ldr	r3, [sp, #8]
 8006734:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006738:	f88b a000 	strb.w	sl, [fp]
 800673c:	e775      	b.n	800662a <_dtoa_r+0x94a>
 800673e:	4638      	mov	r0, r7
 8006740:	e7ba      	b.n	80066b8 <_dtoa_r+0x9d8>
 8006742:	2201      	movs	r2, #1
 8006744:	e7e2      	b.n	800670c <_dtoa_r+0xa2c>
 8006746:	9b03      	ldr	r3, [sp, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	db04      	blt.n	8006756 <_dtoa_r+0xa76>
 800674c:	9906      	ldr	r1, [sp, #24]
 800674e:	430b      	orrs	r3, r1
 8006750:	9904      	ldr	r1, [sp, #16]
 8006752:	430b      	orrs	r3, r1
 8006754:	d122      	bne.n	800679c <_dtoa_r+0xabc>
 8006756:	2a00      	cmp	r2, #0
 8006758:	ddee      	ble.n	8006738 <_dtoa_r+0xa58>
 800675a:	ee18 1a10 	vmov	r1, s16
 800675e:	2201      	movs	r2, #1
 8006760:	4620      	mov	r0, r4
 8006762:	f000 fad7 	bl	8006d14 <__lshift>
 8006766:	4631      	mov	r1, r6
 8006768:	ee08 0a10 	vmov	s16, r0
 800676c:	f000 fb42 	bl	8006df4 <__mcmp>
 8006770:	2800      	cmp	r0, #0
 8006772:	dc03      	bgt.n	800677c <_dtoa_r+0xa9c>
 8006774:	d1e0      	bne.n	8006738 <_dtoa_r+0xa58>
 8006776:	f01a 0f01 	tst.w	sl, #1
 800677a:	d0dd      	beq.n	8006738 <_dtoa_r+0xa58>
 800677c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006780:	d1d7      	bne.n	8006732 <_dtoa_r+0xa52>
 8006782:	2339      	movs	r3, #57	; 0x39
 8006784:	f88b 3000 	strb.w	r3, [fp]
 8006788:	462b      	mov	r3, r5
 800678a:	461d      	mov	r5, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006792:	2a39      	cmp	r2, #57	; 0x39
 8006794:	d071      	beq.n	800687a <_dtoa_r+0xb9a>
 8006796:	3201      	adds	r2, #1
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	e746      	b.n	800662a <_dtoa_r+0x94a>
 800679c:	2a00      	cmp	r2, #0
 800679e:	dd07      	ble.n	80067b0 <_dtoa_r+0xad0>
 80067a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067a4:	d0ed      	beq.n	8006782 <_dtoa_r+0xaa2>
 80067a6:	f10a 0301 	add.w	r3, sl, #1
 80067aa:	f88b 3000 	strb.w	r3, [fp]
 80067ae:	e73c      	b.n	800662a <_dtoa_r+0x94a>
 80067b0:	9b05      	ldr	r3, [sp, #20]
 80067b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80067b6:	4599      	cmp	r9, r3
 80067b8:	d047      	beq.n	800684a <_dtoa_r+0xb6a>
 80067ba:	ee18 1a10 	vmov	r1, s16
 80067be:	2300      	movs	r3, #0
 80067c0:	220a      	movs	r2, #10
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 f8f6 	bl	80069b4 <__multadd>
 80067c8:	45b8      	cmp	r8, r7
 80067ca:	ee08 0a10 	vmov	s16, r0
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	f04f 020a 	mov.w	r2, #10
 80067d6:	4641      	mov	r1, r8
 80067d8:	4620      	mov	r0, r4
 80067da:	d106      	bne.n	80067ea <_dtoa_r+0xb0a>
 80067dc:	f000 f8ea 	bl	80069b4 <__multadd>
 80067e0:	4680      	mov	r8, r0
 80067e2:	4607      	mov	r7, r0
 80067e4:	f109 0901 	add.w	r9, r9, #1
 80067e8:	e772      	b.n	80066d0 <_dtoa_r+0x9f0>
 80067ea:	f000 f8e3 	bl	80069b4 <__multadd>
 80067ee:	4639      	mov	r1, r7
 80067f0:	4680      	mov	r8, r0
 80067f2:	2300      	movs	r3, #0
 80067f4:	220a      	movs	r2, #10
 80067f6:	4620      	mov	r0, r4
 80067f8:	f000 f8dc 	bl	80069b4 <__multadd>
 80067fc:	4607      	mov	r7, r0
 80067fe:	e7f1      	b.n	80067e4 <_dtoa_r+0xb04>
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	9302      	str	r3, [sp, #8]
 8006804:	9d01      	ldr	r5, [sp, #4]
 8006806:	ee18 0a10 	vmov	r0, s16
 800680a:	4631      	mov	r1, r6
 800680c:	f7ff f9dc 	bl	8005bc8 <quorem>
 8006810:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006814:	9b01      	ldr	r3, [sp, #4]
 8006816:	f805 ab01 	strb.w	sl, [r5], #1
 800681a:	1aea      	subs	r2, r5, r3
 800681c:	9b02      	ldr	r3, [sp, #8]
 800681e:	4293      	cmp	r3, r2
 8006820:	dd09      	ble.n	8006836 <_dtoa_r+0xb56>
 8006822:	ee18 1a10 	vmov	r1, s16
 8006826:	2300      	movs	r3, #0
 8006828:	220a      	movs	r2, #10
 800682a:	4620      	mov	r0, r4
 800682c:	f000 f8c2 	bl	80069b4 <__multadd>
 8006830:	ee08 0a10 	vmov	s16, r0
 8006834:	e7e7      	b.n	8006806 <_dtoa_r+0xb26>
 8006836:	9b02      	ldr	r3, [sp, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	bfc8      	it	gt
 800683c:	461d      	movgt	r5, r3
 800683e:	9b01      	ldr	r3, [sp, #4]
 8006840:	bfd8      	it	le
 8006842:	2501      	movle	r5, #1
 8006844:	441d      	add	r5, r3
 8006846:	f04f 0800 	mov.w	r8, #0
 800684a:	ee18 1a10 	vmov	r1, s16
 800684e:	2201      	movs	r2, #1
 8006850:	4620      	mov	r0, r4
 8006852:	f000 fa5f 	bl	8006d14 <__lshift>
 8006856:	4631      	mov	r1, r6
 8006858:	ee08 0a10 	vmov	s16, r0
 800685c:	f000 faca 	bl	8006df4 <__mcmp>
 8006860:	2800      	cmp	r0, #0
 8006862:	dc91      	bgt.n	8006788 <_dtoa_r+0xaa8>
 8006864:	d102      	bne.n	800686c <_dtoa_r+0xb8c>
 8006866:	f01a 0f01 	tst.w	sl, #1
 800686a:	d18d      	bne.n	8006788 <_dtoa_r+0xaa8>
 800686c:	462b      	mov	r3, r5
 800686e:	461d      	mov	r5, r3
 8006870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006874:	2a30      	cmp	r2, #48	; 0x30
 8006876:	d0fa      	beq.n	800686e <_dtoa_r+0xb8e>
 8006878:	e6d7      	b.n	800662a <_dtoa_r+0x94a>
 800687a:	9a01      	ldr	r2, [sp, #4]
 800687c:	429a      	cmp	r2, r3
 800687e:	d184      	bne.n	800678a <_dtoa_r+0xaaa>
 8006880:	9b00      	ldr	r3, [sp, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	2331      	movs	r3, #49	; 0x31
 8006888:	7013      	strb	r3, [r2, #0]
 800688a:	e6ce      	b.n	800662a <_dtoa_r+0x94a>
 800688c:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <_dtoa_r+0xbd4>)
 800688e:	f7ff ba95 	b.w	8005dbc <_dtoa_r+0xdc>
 8006892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006894:	2b00      	cmp	r3, #0
 8006896:	f47f aa6e 	bne.w	8005d76 <_dtoa_r+0x96>
 800689a:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <_dtoa_r+0xbd8>)
 800689c:	f7ff ba8e 	b.w	8005dbc <_dtoa_r+0xdc>
 80068a0:	9b02      	ldr	r3, [sp, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	dcae      	bgt.n	8006804 <_dtoa_r+0xb24>
 80068a6:	9b06      	ldr	r3, [sp, #24]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	f73f aea8 	bgt.w	80065fe <_dtoa_r+0x91e>
 80068ae:	e7a9      	b.n	8006804 <_dtoa_r+0xb24>
 80068b0:	0801b60f 	.word	0x0801b60f
 80068b4:	0801b56c 	.word	0x0801b56c
 80068b8:	0801b590 	.word	0x0801b590

080068bc <_localeconv_r>:
 80068bc:	4800      	ldr	r0, [pc, #0]	; (80068c0 <_localeconv_r+0x4>)
 80068be:	4770      	bx	lr
 80068c0:	20000168 	.word	0x20000168

080068c4 <malloc>:
 80068c4:	4b02      	ldr	r3, [pc, #8]	; (80068d0 <malloc+0xc>)
 80068c6:	4601      	mov	r1, r0
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	f000 bc17 	b.w	80070fc <_malloc_r>
 80068ce:	bf00      	nop
 80068d0:	20000014 	.word	0x20000014

080068d4 <memcpy>:
 80068d4:	440a      	add	r2, r1
 80068d6:	4291      	cmp	r1, r2
 80068d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80068dc:	d100      	bne.n	80068e0 <memcpy+0xc>
 80068de:	4770      	bx	lr
 80068e0:	b510      	push	{r4, lr}
 80068e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ea:	4291      	cmp	r1, r2
 80068ec:	d1f9      	bne.n	80068e2 <memcpy+0xe>
 80068ee:	bd10      	pop	{r4, pc}

080068f0 <_Balloc>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068f4:	4604      	mov	r4, r0
 80068f6:	460d      	mov	r5, r1
 80068f8:	b976      	cbnz	r6, 8006918 <_Balloc+0x28>
 80068fa:	2010      	movs	r0, #16
 80068fc:	f7ff ffe2 	bl	80068c4 <malloc>
 8006900:	4602      	mov	r2, r0
 8006902:	6260      	str	r0, [r4, #36]	; 0x24
 8006904:	b920      	cbnz	r0, 8006910 <_Balloc+0x20>
 8006906:	4b18      	ldr	r3, [pc, #96]	; (8006968 <_Balloc+0x78>)
 8006908:	4818      	ldr	r0, [pc, #96]	; (800696c <_Balloc+0x7c>)
 800690a:	2166      	movs	r1, #102	; 0x66
 800690c:	f000 fdd6 	bl	80074bc <__assert_func>
 8006910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006914:	6006      	str	r6, [r0, #0]
 8006916:	60c6      	str	r6, [r0, #12]
 8006918:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800691a:	68f3      	ldr	r3, [r6, #12]
 800691c:	b183      	cbz	r3, 8006940 <_Balloc+0x50>
 800691e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006926:	b9b8      	cbnz	r0, 8006958 <_Balloc+0x68>
 8006928:	2101      	movs	r1, #1
 800692a:	fa01 f605 	lsl.w	r6, r1, r5
 800692e:	1d72      	adds	r2, r6, #5
 8006930:	0092      	lsls	r2, r2, #2
 8006932:	4620      	mov	r0, r4
 8006934:	f000 fb60 	bl	8006ff8 <_calloc_r>
 8006938:	b160      	cbz	r0, 8006954 <_Balloc+0x64>
 800693a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800693e:	e00e      	b.n	800695e <_Balloc+0x6e>
 8006940:	2221      	movs	r2, #33	; 0x21
 8006942:	2104      	movs	r1, #4
 8006944:	4620      	mov	r0, r4
 8006946:	f000 fb57 	bl	8006ff8 <_calloc_r>
 800694a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800694c:	60f0      	str	r0, [r6, #12]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e4      	bne.n	800691e <_Balloc+0x2e>
 8006954:	2000      	movs	r0, #0
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	6802      	ldr	r2, [r0, #0]
 800695a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800695e:	2300      	movs	r3, #0
 8006960:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006964:	e7f7      	b.n	8006956 <_Balloc+0x66>
 8006966:	bf00      	nop
 8006968:	0801b59d 	.word	0x0801b59d
 800696c:	0801b620 	.word	0x0801b620

08006970 <_Bfree>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006974:	4605      	mov	r5, r0
 8006976:	460c      	mov	r4, r1
 8006978:	b976      	cbnz	r6, 8006998 <_Bfree+0x28>
 800697a:	2010      	movs	r0, #16
 800697c:	f7ff ffa2 	bl	80068c4 <malloc>
 8006980:	4602      	mov	r2, r0
 8006982:	6268      	str	r0, [r5, #36]	; 0x24
 8006984:	b920      	cbnz	r0, 8006990 <_Bfree+0x20>
 8006986:	4b09      	ldr	r3, [pc, #36]	; (80069ac <_Bfree+0x3c>)
 8006988:	4809      	ldr	r0, [pc, #36]	; (80069b0 <_Bfree+0x40>)
 800698a:	218a      	movs	r1, #138	; 0x8a
 800698c:	f000 fd96 	bl	80074bc <__assert_func>
 8006990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006994:	6006      	str	r6, [r0, #0]
 8006996:	60c6      	str	r6, [r0, #12]
 8006998:	b13c      	cbz	r4, 80069aa <_Bfree+0x3a>
 800699a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800699c:	6862      	ldr	r2, [r4, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069a4:	6021      	str	r1, [r4, #0]
 80069a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	0801b59d 	.word	0x0801b59d
 80069b0:	0801b620 	.word	0x0801b620

080069b4 <__multadd>:
 80069b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b8:	690d      	ldr	r5, [r1, #16]
 80069ba:	4607      	mov	r7, r0
 80069bc:	460c      	mov	r4, r1
 80069be:	461e      	mov	r6, r3
 80069c0:	f101 0c14 	add.w	ip, r1, #20
 80069c4:	2000      	movs	r0, #0
 80069c6:	f8dc 3000 	ldr.w	r3, [ip]
 80069ca:	b299      	uxth	r1, r3
 80069cc:	fb02 6101 	mla	r1, r2, r1, r6
 80069d0:	0c1e      	lsrs	r6, r3, #16
 80069d2:	0c0b      	lsrs	r3, r1, #16
 80069d4:	fb02 3306 	mla	r3, r2, r6, r3
 80069d8:	b289      	uxth	r1, r1
 80069da:	3001      	adds	r0, #1
 80069dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069e0:	4285      	cmp	r5, r0
 80069e2:	f84c 1b04 	str.w	r1, [ip], #4
 80069e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069ea:	dcec      	bgt.n	80069c6 <__multadd+0x12>
 80069ec:	b30e      	cbz	r6, 8006a32 <__multadd+0x7e>
 80069ee:	68a3      	ldr	r3, [r4, #8]
 80069f0:	42ab      	cmp	r3, r5
 80069f2:	dc19      	bgt.n	8006a28 <__multadd+0x74>
 80069f4:	6861      	ldr	r1, [r4, #4]
 80069f6:	4638      	mov	r0, r7
 80069f8:	3101      	adds	r1, #1
 80069fa:	f7ff ff79 	bl	80068f0 <_Balloc>
 80069fe:	4680      	mov	r8, r0
 8006a00:	b928      	cbnz	r0, 8006a0e <__multadd+0x5a>
 8006a02:	4602      	mov	r2, r0
 8006a04:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <__multadd+0x84>)
 8006a06:	480d      	ldr	r0, [pc, #52]	; (8006a3c <__multadd+0x88>)
 8006a08:	21b5      	movs	r1, #181	; 0xb5
 8006a0a:	f000 fd57 	bl	80074bc <__assert_func>
 8006a0e:	6922      	ldr	r2, [r4, #16]
 8006a10:	3202      	adds	r2, #2
 8006a12:	f104 010c 	add.w	r1, r4, #12
 8006a16:	0092      	lsls	r2, r2, #2
 8006a18:	300c      	adds	r0, #12
 8006a1a:	f7ff ff5b 	bl	80068d4 <memcpy>
 8006a1e:	4621      	mov	r1, r4
 8006a20:	4638      	mov	r0, r7
 8006a22:	f7ff ffa5 	bl	8006970 <_Bfree>
 8006a26:	4644      	mov	r4, r8
 8006a28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a2c:	3501      	adds	r5, #1
 8006a2e:	615e      	str	r6, [r3, #20]
 8006a30:	6125      	str	r5, [r4, #16]
 8006a32:	4620      	mov	r0, r4
 8006a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a38:	0801b60f 	.word	0x0801b60f
 8006a3c:	0801b620 	.word	0x0801b620

08006a40 <__hi0bits>:
 8006a40:	0c03      	lsrs	r3, r0, #16
 8006a42:	041b      	lsls	r3, r3, #16
 8006a44:	b9d3      	cbnz	r3, 8006a7c <__hi0bits+0x3c>
 8006a46:	0400      	lsls	r0, r0, #16
 8006a48:	2310      	movs	r3, #16
 8006a4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a4e:	bf04      	itt	eq
 8006a50:	0200      	lsleq	r0, r0, #8
 8006a52:	3308      	addeq	r3, #8
 8006a54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a58:	bf04      	itt	eq
 8006a5a:	0100      	lsleq	r0, r0, #4
 8006a5c:	3304      	addeq	r3, #4
 8006a5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a62:	bf04      	itt	eq
 8006a64:	0080      	lsleq	r0, r0, #2
 8006a66:	3302      	addeq	r3, #2
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	db05      	blt.n	8006a78 <__hi0bits+0x38>
 8006a6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a70:	f103 0301 	add.w	r3, r3, #1
 8006a74:	bf08      	it	eq
 8006a76:	2320      	moveq	r3, #32
 8006a78:	4618      	mov	r0, r3
 8006a7a:	4770      	bx	lr
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e7e4      	b.n	8006a4a <__hi0bits+0xa>

08006a80 <__lo0bits>:
 8006a80:	6803      	ldr	r3, [r0, #0]
 8006a82:	f013 0207 	ands.w	r2, r3, #7
 8006a86:	4601      	mov	r1, r0
 8006a88:	d00b      	beq.n	8006aa2 <__lo0bits+0x22>
 8006a8a:	07da      	lsls	r2, r3, #31
 8006a8c:	d423      	bmi.n	8006ad6 <__lo0bits+0x56>
 8006a8e:	0798      	lsls	r0, r3, #30
 8006a90:	bf49      	itett	mi
 8006a92:	085b      	lsrmi	r3, r3, #1
 8006a94:	089b      	lsrpl	r3, r3, #2
 8006a96:	2001      	movmi	r0, #1
 8006a98:	600b      	strmi	r3, [r1, #0]
 8006a9a:	bf5c      	itt	pl
 8006a9c:	600b      	strpl	r3, [r1, #0]
 8006a9e:	2002      	movpl	r0, #2
 8006aa0:	4770      	bx	lr
 8006aa2:	b298      	uxth	r0, r3
 8006aa4:	b9a8      	cbnz	r0, 8006ad2 <__lo0bits+0x52>
 8006aa6:	0c1b      	lsrs	r3, r3, #16
 8006aa8:	2010      	movs	r0, #16
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	b90a      	cbnz	r2, 8006ab2 <__lo0bits+0x32>
 8006aae:	3008      	adds	r0, #8
 8006ab0:	0a1b      	lsrs	r3, r3, #8
 8006ab2:	071a      	lsls	r2, r3, #28
 8006ab4:	bf04      	itt	eq
 8006ab6:	091b      	lsreq	r3, r3, #4
 8006ab8:	3004      	addeq	r0, #4
 8006aba:	079a      	lsls	r2, r3, #30
 8006abc:	bf04      	itt	eq
 8006abe:	089b      	lsreq	r3, r3, #2
 8006ac0:	3002      	addeq	r0, #2
 8006ac2:	07da      	lsls	r2, r3, #31
 8006ac4:	d403      	bmi.n	8006ace <__lo0bits+0x4e>
 8006ac6:	085b      	lsrs	r3, r3, #1
 8006ac8:	f100 0001 	add.w	r0, r0, #1
 8006acc:	d005      	beq.n	8006ada <__lo0bits+0x5a>
 8006ace:	600b      	str	r3, [r1, #0]
 8006ad0:	4770      	bx	lr
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	e7e9      	b.n	8006aaa <__lo0bits+0x2a>
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	4770      	bx	lr
 8006ada:	2020      	movs	r0, #32
 8006adc:	4770      	bx	lr
	...

08006ae0 <__i2b>:
 8006ae0:	b510      	push	{r4, lr}
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	f7ff ff03 	bl	80068f0 <_Balloc>
 8006aea:	4602      	mov	r2, r0
 8006aec:	b928      	cbnz	r0, 8006afa <__i2b+0x1a>
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <__i2b+0x24>)
 8006af0:	4805      	ldr	r0, [pc, #20]	; (8006b08 <__i2b+0x28>)
 8006af2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006af6:	f000 fce1 	bl	80074bc <__assert_func>
 8006afa:	2301      	movs	r3, #1
 8006afc:	6144      	str	r4, [r0, #20]
 8006afe:	6103      	str	r3, [r0, #16]
 8006b00:	bd10      	pop	{r4, pc}
 8006b02:	bf00      	nop
 8006b04:	0801b60f 	.word	0x0801b60f
 8006b08:	0801b620 	.word	0x0801b620

08006b0c <__multiply>:
 8006b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	4691      	mov	r9, r2
 8006b12:	690a      	ldr	r2, [r1, #16]
 8006b14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	bfb8      	it	lt
 8006b1c:	460b      	movlt	r3, r1
 8006b1e:	460c      	mov	r4, r1
 8006b20:	bfbc      	itt	lt
 8006b22:	464c      	movlt	r4, r9
 8006b24:	4699      	movlt	r9, r3
 8006b26:	6927      	ldr	r7, [r4, #16]
 8006b28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b2c:	68a3      	ldr	r3, [r4, #8]
 8006b2e:	6861      	ldr	r1, [r4, #4]
 8006b30:	eb07 060a 	add.w	r6, r7, sl
 8006b34:	42b3      	cmp	r3, r6
 8006b36:	b085      	sub	sp, #20
 8006b38:	bfb8      	it	lt
 8006b3a:	3101      	addlt	r1, #1
 8006b3c:	f7ff fed8 	bl	80068f0 <_Balloc>
 8006b40:	b930      	cbnz	r0, 8006b50 <__multiply+0x44>
 8006b42:	4602      	mov	r2, r0
 8006b44:	4b44      	ldr	r3, [pc, #272]	; (8006c58 <__multiply+0x14c>)
 8006b46:	4845      	ldr	r0, [pc, #276]	; (8006c5c <__multiply+0x150>)
 8006b48:	f240 115d 	movw	r1, #349	; 0x15d
 8006b4c:	f000 fcb6 	bl	80074bc <__assert_func>
 8006b50:	f100 0514 	add.w	r5, r0, #20
 8006b54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b58:	462b      	mov	r3, r5
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	4543      	cmp	r3, r8
 8006b5e:	d321      	bcc.n	8006ba4 <__multiply+0x98>
 8006b60:	f104 0314 	add.w	r3, r4, #20
 8006b64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b68:	f109 0314 	add.w	r3, r9, #20
 8006b6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b70:	9202      	str	r2, [sp, #8]
 8006b72:	1b3a      	subs	r2, r7, r4
 8006b74:	3a15      	subs	r2, #21
 8006b76:	f022 0203 	bic.w	r2, r2, #3
 8006b7a:	3204      	adds	r2, #4
 8006b7c:	f104 0115 	add.w	r1, r4, #21
 8006b80:	428f      	cmp	r7, r1
 8006b82:	bf38      	it	cc
 8006b84:	2204      	movcc	r2, #4
 8006b86:	9201      	str	r2, [sp, #4]
 8006b88:	9a02      	ldr	r2, [sp, #8]
 8006b8a:	9303      	str	r3, [sp, #12]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d80c      	bhi.n	8006baa <__multiply+0x9e>
 8006b90:	2e00      	cmp	r6, #0
 8006b92:	dd03      	ble.n	8006b9c <__multiply+0x90>
 8006b94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d05a      	beq.n	8006c52 <__multiply+0x146>
 8006b9c:	6106      	str	r6, [r0, #16]
 8006b9e:	b005      	add	sp, #20
 8006ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba4:	f843 2b04 	str.w	r2, [r3], #4
 8006ba8:	e7d8      	b.n	8006b5c <__multiply+0x50>
 8006baa:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bae:	f1ba 0f00 	cmp.w	sl, #0
 8006bb2:	d024      	beq.n	8006bfe <__multiply+0xf2>
 8006bb4:	f104 0e14 	add.w	lr, r4, #20
 8006bb8:	46a9      	mov	r9, r5
 8006bba:	f04f 0c00 	mov.w	ip, #0
 8006bbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006bc2:	f8d9 1000 	ldr.w	r1, [r9]
 8006bc6:	fa1f fb82 	uxth.w	fp, r2
 8006bca:	b289      	uxth	r1, r1
 8006bcc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006bd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8006bd8:	4461      	add	r1, ip
 8006bda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bde:	fb0a c20b 	mla	r2, sl, fp, ip
 8006be2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006be6:	b289      	uxth	r1, r1
 8006be8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006bec:	4577      	cmp	r7, lr
 8006bee:	f849 1b04 	str.w	r1, [r9], #4
 8006bf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bf6:	d8e2      	bhi.n	8006bbe <__multiply+0xb2>
 8006bf8:	9a01      	ldr	r2, [sp, #4]
 8006bfa:	f845 c002 	str.w	ip, [r5, r2]
 8006bfe:	9a03      	ldr	r2, [sp, #12]
 8006c00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c04:	3304      	adds	r3, #4
 8006c06:	f1b9 0f00 	cmp.w	r9, #0
 8006c0a:	d020      	beq.n	8006c4e <__multiply+0x142>
 8006c0c:	6829      	ldr	r1, [r5, #0]
 8006c0e:	f104 0c14 	add.w	ip, r4, #20
 8006c12:	46ae      	mov	lr, r5
 8006c14:	f04f 0a00 	mov.w	sl, #0
 8006c18:	f8bc b000 	ldrh.w	fp, [ip]
 8006c1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c20:	fb09 220b 	mla	r2, r9, fp, r2
 8006c24:	4492      	add	sl, r2
 8006c26:	b289      	uxth	r1, r1
 8006c28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006c2c:	f84e 1b04 	str.w	r1, [lr], #4
 8006c30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006c34:	f8be 1000 	ldrh.w	r1, [lr]
 8006c38:	0c12      	lsrs	r2, r2, #16
 8006c3a:	fb09 1102 	mla	r1, r9, r2, r1
 8006c3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006c42:	4567      	cmp	r7, ip
 8006c44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c48:	d8e6      	bhi.n	8006c18 <__multiply+0x10c>
 8006c4a:	9a01      	ldr	r2, [sp, #4]
 8006c4c:	50a9      	str	r1, [r5, r2]
 8006c4e:	3504      	adds	r5, #4
 8006c50:	e79a      	b.n	8006b88 <__multiply+0x7c>
 8006c52:	3e01      	subs	r6, #1
 8006c54:	e79c      	b.n	8006b90 <__multiply+0x84>
 8006c56:	bf00      	nop
 8006c58:	0801b60f 	.word	0x0801b60f
 8006c5c:	0801b620 	.word	0x0801b620

08006c60 <__pow5mult>:
 8006c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c64:	4615      	mov	r5, r2
 8006c66:	f012 0203 	ands.w	r2, r2, #3
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	460f      	mov	r7, r1
 8006c6e:	d007      	beq.n	8006c80 <__pow5mult+0x20>
 8006c70:	4c25      	ldr	r4, [pc, #148]	; (8006d08 <__pow5mult+0xa8>)
 8006c72:	3a01      	subs	r2, #1
 8006c74:	2300      	movs	r3, #0
 8006c76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c7a:	f7ff fe9b 	bl	80069b4 <__multadd>
 8006c7e:	4607      	mov	r7, r0
 8006c80:	10ad      	asrs	r5, r5, #2
 8006c82:	d03d      	beq.n	8006d00 <__pow5mult+0xa0>
 8006c84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c86:	b97c      	cbnz	r4, 8006ca8 <__pow5mult+0x48>
 8006c88:	2010      	movs	r0, #16
 8006c8a:	f7ff fe1b 	bl	80068c4 <malloc>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	6270      	str	r0, [r6, #36]	; 0x24
 8006c92:	b928      	cbnz	r0, 8006ca0 <__pow5mult+0x40>
 8006c94:	4b1d      	ldr	r3, [pc, #116]	; (8006d0c <__pow5mult+0xac>)
 8006c96:	481e      	ldr	r0, [pc, #120]	; (8006d10 <__pow5mult+0xb0>)
 8006c98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c9c:	f000 fc0e 	bl	80074bc <__assert_func>
 8006ca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ca4:	6004      	str	r4, [r0, #0]
 8006ca6:	60c4      	str	r4, [r0, #12]
 8006ca8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006cac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cb0:	b94c      	cbnz	r4, 8006cc6 <__pow5mult+0x66>
 8006cb2:	f240 2171 	movw	r1, #625	; 0x271
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff ff12 	bl	8006ae0 <__i2b>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	6003      	str	r3, [r0, #0]
 8006cc6:	f04f 0900 	mov.w	r9, #0
 8006cca:	07eb      	lsls	r3, r5, #31
 8006ccc:	d50a      	bpl.n	8006ce4 <__pow5mult+0x84>
 8006cce:	4639      	mov	r1, r7
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f7ff ff1a 	bl	8006b0c <__multiply>
 8006cd8:	4639      	mov	r1, r7
 8006cda:	4680      	mov	r8, r0
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f7ff fe47 	bl	8006970 <_Bfree>
 8006ce2:	4647      	mov	r7, r8
 8006ce4:	106d      	asrs	r5, r5, #1
 8006ce6:	d00b      	beq.n	8006d00 <__pow5mult+0xa0>
 8006ce8:	6820      	ldr	r0, [r4, #0]
 8006cea:	b938      	cbnz	r0, 8006cfc <__pow5mult+0x9c>
 8006cec:	4622      	mov	r2, r4
 8006cee:	4621      	mov	r1, r4
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f7ff ff0b 	bl	8006b0c <__multiply>
 8006cf6:	6020      	str	r0, [r4, #0]
 8006cf8:	f8c0 9000 	str.w	r9, [r0]
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	e7e4      	b.n	8006cca <__pow5mult+0x6a>
 8006d00:	4638      	mov	r0, r7
 8006d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d06:	bf00      	nop
 8006d08:	0801b770 	.word	0x0801b770
 8006d0c:	0801b59d 	.word	0x0801b59d
 8006d10:	0801b620 	.word	0x0801b620

08006d14 <__lshift>:
 8006d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d18:	460c      	mov	r4, r1
 8006d1a:	6849      	ldr	r1, [r1, #4]
 8006d1c:	6923      	ldr	r3, [r4, #16]
 8006d1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d22:	68a3      	ldr	r3, [r4, #8]
 8006d24:	4607      	mov	r7, r0
 8006d26:	4691      	mov	r9, r2
 8006d28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d2c:	f108 0601 	add.w	r6, r8, #1
 8006d30:	42b3      	cmp	r3, r6
 8006d32:	db0b      	blt.n	8006d4c <__lshift+0x38>
 8006d34:	4638      	mov	r0, r7
 8006d36:	f7ff fddb 	bl	80068f0 <_Balloc>
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	b948      	cbnz	r0, 8006d52 <__lshift+0x3e>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	4b2a      	ldr	r3, [pc, #168]	; (8006dec <__lshift+0xd8>)
 8006d42:	482b      	ldr	r0, [pc, #172]	; (8006df0 <__lshift+0xdc>)
 8006d44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d48:	f000 fbb8 	bl	80074bc <__assert_func>
 8006d4c:	3101      	adds	r1, #1
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	e7ee      	b.n	8006d30 <__lshift+0x1c>
 8006d52:	2300      	movs	r3, #0
 8006d54:	f100 0114 	add.w	r1, r0, #20
 8006d58:	f100 0210 	add.w	r2, r0, #16
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	4553      	cmp	r3, sl
 8006d60:	db37      	blt.n	8006dd2 <__lshift+0xbe>
 8006d62:	6920      	ldr	r0, [r4, #16]
 8006d64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d68:	f104 0314 	add.w	r3, r4, #20
 8006d6c:	f019 091f 	ands.w	r9, r9, #31
 8006d70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006d78:	d02f      	beq.n	8006dda <__lshift+0xc6>
 8006d7a:	f1c9 0e20 	rsb	lr, r9, #32
 8006d7e:	468a      	mov	sl, r1
 8006d80:	f04f 0c00 	mov.w	ip, #0
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	fa02 f209 	lsl.w	r2, r2, r9
 8006d8a:	ea42 020c 	orr.w	r2, r2, ip
 8006d8e:	f84a 2b04 	str.w	r2, [sl], #4
 8006d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d96:	4298      	cmp	r0, r3
 8006d98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006d9c:	d8f2      	bhi.n	8006d84 <__lshift+0x70>
 8006d9e:	1b03      	subs	r3, r0, r4
 8006da0:	3b15      	subs	r3, #21
 8006da2:	f023 0303 	bic.w	r3, r3, #3
 8006da6:	3304      	adds	r3, #4
 8006da8:	f104 0215 	add.w	r2, r4, #21
 8006dac:	4290      	cmp	r0, r2
 8006dae:	bf38      	it	cc
 8006db0:	2304      	movcc	r3, #4
 8006db2:	f841 c003 	str.w	ip, [r1, r3]
 8006db6:	f1bc 0f00 	cmp.w	ip, #0
 8006dba:	d001      	beq.n	8006dc0 <__lshift+0xac>
 8006dbc:	f108 0602 	add.w	r6, r8, #2
 8006dc0:	3e01      	subs	r6, #1
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	612e      	str	r6, [r5, #16]
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	f7ff fdd2 	bl	8006970 <_Bfree>
 8006dcc:	4628      	mov	r0, r5
 8006dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	e7c1      	b.n	8006d5e <__lshift+0x4a>
 8006dda:	3904      	subs	r1, #4
 8006ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006de4:	4298      	cmp	r0, r3
 8006de6:	d8f9      	bhi.n	8006ddc <__lshift+0xc8>
 8006de8:	e7ea      	b.n	8006dc0 <__lshift+0xac>
 8006dea:	bf00      	nop
 8006dec:	0801b60f 	.word	0x0801b60f
 8006df0:	0801b620 	.word	0x0801b620

08006df4 <__mcmp>:
 8006df4:	b530      	push	{r4, r5, lr}
 8006df6:	6902      	ldr	r2, [r0, #16]
 8006df8:	690c      	ldr	r4, [r1, #16]
 8006dfa:	1b12      	subs	r2, r2, r4
 8006dfc:	d10e      	bne.n	8006e1c <__mcmp+0x28>
 8006dfe:	f100 0314 	add.w	r3, r0, #20
 8006e02:	3114      	adds	r1, #20
 8006e04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e14:	42a5      	cmp	r5, r4
 8006e16:	d003      	beq.n	8006e20 <__mcmp+0x2c>
 8006e18:	d305      	bcc.n	8006e26 <__mcmp+0x32>
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	bd30      	pop	{r4, r5, pc}
 8006e20:	4283      	cmp	r3, r0
 8006e22:	d3f3      	bcc.n	8006e0c <__mcmp+0x18>
 8006e24:	e7fa      	b.n	8006e1c <__mcmp+0x28>
 8006e26:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2a:	e7f7      	b.n	8006e1c <__mcmp+0x28>

08006e2c <__mdiff>:
 8006e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e30:	460c      	mov	r4, r1
 8006e32:	4606      	mov	r6, r0
 8006e34:	4611      	mov	r1, r2
 8006e36:	4620      	mov	r0, r4
 8006e38:	4690      	mov	r8, r2
 8006e3a:	f7ff ffdb 	bl	8006df4 <__mcmp>
 8006e3e:	1e05      	subs	r5, r0, #0
 8006e40:	d110      	bne.n	8006e64 <__mdiff+0x38>
 8006e42:	4629      	mov	r1, r5
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7ff fd53 	bl	80068f0 <_Balloc>
 8006e4a:	b930      	cbnz	r0, 8006e5a <__mdiff+0x2e>
 8006e4c:	4b3a      	ldr	r3, [pc, #232]	; (8006f38 <__mdiff+0x10c>)
 8006e4e:	4602      	mov	r2, r0
 8006e50:	f240 2132 	movw	r1, #562	; 0x232
 8006e54:	4839      	ldr	r0, [pc, #228]	; (8006f3c <__mdiff+0x110>)
 8006e56:	f000 fb31 	bl	80074bc <__assert_func>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e64:	bfa4      	itt	ge
 8006e66:	4643      	movge	r3, r8
 8006e68:	46a0      	movge	r8, r4
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e70:	bfa6      	itte	ge
 8006e72:	461c      	movge	r4, r3
 8006e74:	2500      	movge	r5, #0
 8006e76:	2501      	movlt	r5, #1
 8006e78:	f7ff fd3a 	bl	80068f0 <_Balloc>
 8006e7c:	b920      	cbnz	r0, 8006e88 <__mdiff+0x5c>
 8006e7e:	4b2e      	ldr	r3, [pc, #184]	; (8006f38 <__mdiff+0x10c>)
 8006e80:	4602      	mov	r2, r0
 8006e82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e86:	e7e5      	b.n	8006e54 <__mdiff+0x28>
 8006e88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e8c:	6926      	ldr	r6, [r4, #16]
 8006e8e:	60c5      	str	r5, [r0, #12]
 8006e90:	f104 0914 	add.w	r9, r4, #20
 8006e94:	f108 0514 	add.w	r5, r8, #20
 8006e98:	f100 0e14 	add.w	lr, r0, #20
 8006e9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ea0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ea4:	f108 0210 	add.w	r2, r8, #16
 8006ea8:	46f2      	mov	sl, lr
 8006eaa:	2100      	movs	r1, #0
 8006eac:	f859 3b04 	ldr.w	r3, [r9], #4
 8006eb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006eb4:	fa1f f883 	uxth.w	r8, r3
 8006eb8:	fa11 f18b 	uxtah	r1, r1, fp
 8006ebc:	0c1b      	lsrs	r3, r3, #16
 8006ebe:	eba1 0808 	sub.w	r8, r1, r8
 8006ec2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ec6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006eca:	fa1f f888 	uxth.w	r8, r8
 8006ece:	1419      	asrs	r1, r3, #16
 8006ed0:	454e      	cmp	r6, r9
 8006ed2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ed6:	f84a 3b04 	str.w	r3, [sl], #4
 8006eda:	d8e7      	bhi.n	8006eac <__mdiff+0x80>
 8006edc:	1b33      	subs	r3, r6, r4
 8006ede:	3b15      	subs	r3, #21
 8006ee0:	f023 0303 	bic.w	r3, r3, #3
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	3415      	adds	r4, #21
 8006ee8:	42a6      	cmp	r6, r4
 8006eea:	bf38      	it	cc
 8006eec:	2304      	movcc	r3, #4
 8006eee:	441d      	add	r5, r3
 8006ef0:	4473      	add	r3, lr
 8006ef2:	469e      	mov	lr, r3
 8006ef4:	462e      	mov	r6, r5
 8006ef6:	4566      	cmp	r6, ip
 8006ef8:	d30e      	bcc.n	8006f18 <__mdiff+0xec>
 8006efa:	f10c 0203 	add.w	r2, ip, #3
 8006efe:	1b52      	subs	r2, r2, r5
 8006f00:	f022 0203 	bic.w	r2, r2, #3
 8006f04:	3d03      	subs	r5, #3
 8006f06:	45ac      	cmp	ip, r5
 8006f08:	bf38      	it	cc
 8006f0a:	2200      	movcc	r2, #0
 8006f0c:	441a      	add	r2, r3
 8006f0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f12:	b17b      	cbz	r3, 8006f34 <__mdiff+0x108>
 8006f14:	6107      	str	r7, [r0, #16]
 8006f16:	e7a3      	b.n	8006e60 <__mdiff+0x34>
 8006f18:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f1c:	fa11 f288 	uxtah	r2, r1, r8
 8006f20:	1414      	asrs	r4, r2, #16
 8006f22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f26:	b292      	uxth	r2, r2
 8006f28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f2c:	f84e 2b04 	str.w	r2, [lr], #4
 8006f30:	1421      	asrs	r1, r4, #16
 8006f32:	e7e0      	b.n	8006ef6 <__mdiff+0xca>
 8006f34:	3f01      	subs	r7, #1
 8006f36:	e7ea      	b.n	8006f0e <__mdiff+0xe2>
 8006f38:	0801b60f 	.word	0x0801b60f
 8006f3c:	0801b620 	.word	0x0801b620

08006f40 <__d2b>:
 8006f40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f44:	4689      	mov	r9, r1
 8006f46:	2101      	movs	r1, #1
 8006f48:	ec57 6b10 	vmov	r6, r7, d0
 8006f4c:	4690      	mov	r8, r2
 8006f4e:	f7ff fccf 	bl	80068f0 <_Balloc>
 8006f52:	4604      	mov	r4, r0
 8006f54:	b930      	cbnz	r0, 8006f64 <__d2b+0x24>
 8006f56:	4602      	mov	r2, r0
 8006f58:	4b25      	ldr	r3, [pc, #148]	; (8006ff0 <__d2b+0xb0>)
 8006f5a:	4826      	ldr	r0, [pc, #152]	; (8006ff4 <__d2b+0xb4>)
 8006f5c:	f240 310a 	movw	r1, #778	; 0x30a
 8006f60:	f000 faac 	bl	80074bc <__assert_func>
 8006f64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006f68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f6c:	bb35      	cbnz	r5, 8006fbc <__d2b+0x7c>
 8006f6e:	2e00      	cmp	r6, #0
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	d028      	beq.n	8006fc6 <__d2b+0x86>
 8006f74:	4668      	mov	r0, sp
 8006f76:	9600      	str	r6, [sp, #0]
 8006f78:	f7ff fd82 	bl	8006a80 <__lo0bits>
 8006f7c:	9900      	ldr	r1, [sp, #0]
 8006f7e:	b300      	cbz	r0, 8006fc2 <__d2b+0x82>
 8006f80:	9a01      	ldr	r2, [sp, #4]
 8006f82:	f1c0 0320 	rsb	r3, r0, #32
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	430b      	orrs	r3, r1
 8006f8c:	40c2      	lsrs	r2, r0
 8006f8e:	6163      	str	r3, [r4, #20]
 8006f90:	9201      	str	r2, [sp, #4]
 8006f92:	9b01      	ldr	r3, [sp, #4]
 8006f94:	61a3      	str	r3, [r4, #24]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bf14      	ite	ne
 8006f9a:	2202      	movne	r2, #2
 8006f9c:	2201      	moveq	r2, #1
 8006f9e:	6122      	str	r2, [r4, #16]
 8006fa0:	b1d5      	cbz	r5, 8006fd8 <__d2b+0x98>
 8006fa2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fa6:	4405      	add	r5, r0
 8006fa8:	f8c9 5000 	str.w	r5, [r9]
 8006fac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fb0:	f8c8 0000 	str.w	r0, [r8]
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	b003      	add	sp, #12
 8006fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fc0:	e7d5      	b.n	8006f6e <__d2b+0x2e>
 8006fc2:	6161      	str	r1, [r4, #20]
 8006fc4:	e7e5      	b.n	8006f92 <__d2b+0x52>
 8006fc6:	a801      	add	r0, sp, #4
 8006fc8:	f7ff fd5a 	bl	8006a80 <__lo0bits>
 8006fcc:	9b01      	ldr	r3, [sp, #4]
 8006fce:	6163      	str	r3, [r4, #20]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	6122      	str	r2, [r4, #16]
 8006fd4:	3020      	adds	r0, #32
 8006fd6:	e7e3      	b.n	8006fa0 <__d2b+0x60>
 8006fd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fe0:	f8c9 0000 	str.w	r0, [r9]
 8006fe4:	6918      	ldr	r0, [r3, #16]
 8006fe6:	f7ff fd2b 	bl	8006a40 <__hi0bits>
 8006fea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fee:	e7df      	b.n	8006fb0 <__d2b+0x70>
 8006ff0:	0801b60f 	.word	0x0801b60f
 8006ff4:	0801b620 	.word	0x0801b620

08006ff8 <_calloc_r>:
 8006ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ffa:	fba1 2402 	umull	r2, r4, r1, r2
 8006ffe:	b94c      	cbnz	r4, 8007014 <_calloc_r+0x1c>
 8007000:	4611      	mov	r1, r2
 8007002:	9201      	str	r2, [sp, #4]
 8007004:	f000 f87a 	bl	80070fc <_malloc_r>
 8007008:	9a01      	ldr	r2, [sp, #4]
 800700a:	4605      	mov	r5, r0
 800700c:	b930      	cbnz	r0, 800701c <_calloc_r+0x24>
 800700e:	4628      	mov	r0, r5
 8007010:	b003      	add	sp, #12
 8007012:	bd30      	pop	{r4, r5, pc}
 8007014:	220c      	movs	r2, #12
 8007016:	6002      	str	r2, [r0, #0]
 8007018:	2500      	movs	r5, #0
 800701a:	e7f8      	b.n	800700e <_calloc_r+0x16>
 800701c:	4621      	mov	r1, r4
 800701e:	f7fe f941 	bl	80052a4 <memset>
 8007022:	e7f4      	b.n	800700e <_calloc_r+0x16>

08007024 <_free_r>:
 8007024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007026:	2900      	cmp	r1, #0
 8007028:	d044      	beq.n	80070b4 <_free_r+0x90>
 800702a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800702e:	9001      	str	r0, [sp, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	f1a1 0404 	sub.w	r4, r1, #4
 8007036:	bfb8      	it	lt
 8007038:	18e4      	addlt	r4, r4, r3
 800703a:	f000 fa9b 	bl	8007574 <__malloc_lock>
 800703e:	4a1e      	ldr	r2, [pc, #120]	; (80070b8 <_free_r+0x94>)
 8007040:	9801      	ldr	r0, [sp, #4]
 8007042:	6813      	ldr	r3, [r2, #0]
 8007044:	b933      	cbnz	r3, 8007054 <_free_r+0x30>
 8007046:	6063      	str	r3, [r4, #4]
 8007048:	6014      	str	r4, [r2, #0]
 800704a:	b003      	add	sp, #12
 800704c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007050:	f000 ba96 	b.w	8007580 <__malloc_unlock>
 8007054:	42a3      	cmp	r3, r4
 8007056:	d908      	bls.n	800706a <_free_r+0x46>
 8007058:	6825      	ldr	r5, [r4, #0]
 800705a:	1961      	adds	r1, r4, r5
 800705c:	428b      	cmp	r3, r1
 800705e:	bf01      	itttt	eq
 8007060:	6819      	ldreq	r1, [r3, #0]
 8007062:	685b      	ldreq	r3, [r3, #4]
 8007064:	1949      	addeq	r1, r1, r5
 8007066:	6021      	streq	r1, [r4, #0]
 8007068:	e7ed      	b.n	8007046 <_free_r+0x22>
 800706a:	461a      	mov	r2, r3
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	b10b      	cbz	r3, 8007074 <_free_r+0x50>
 8007070:	42a3      	cmp	r3, r4
 8007072:	d9fa      	bls.n	800706a <_free_r+0x46>
 8007074:	6811      	ldr	r1, [r2, #0]
 8007076:	1855      	adds	r5, r2, r1
 8007078:	42a5      	cmp	r5, r4
 800707a:	d10b      	bne.n	8007094 <_free_r+0x70>
 800707c:	6824      	ldr	r4, [r4, #0]
 800707e:	4421      	add	r1, r4
 8007080:	1854      	adds	r4, r2, r1
 8007082:	42a3      	cmp	r3, r4
 8007084:	6011      	str	r1, [r2, #0]
 8007086:	d1e0      	bne.n	800704a <_free_r+0x26>
 8007088:	681c      	ldr	r4, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	6053      	str	r3, [r2, #4]
 800708e:	4421      	add	r1, r4
 8007090:	6011      	str	r1, [r2, #0]
 8007092:	e7da      	b.n	800704a <_free_r+0x26>
 8007094:	d902      	bls.n	800709c <_free_r+0x78>
 8007096:	230c      	movs	r3, #12
 8007098:	6003      	str	r3, [r0, #0]
 800709a:	e7d6      	b.n	800704a <_free_r+0x26>
 800709c:	6825      	ldr	r5, [r4, #0]
 800709e:	1961      	adds	r1, r4, r5
 80070a0:	428b      	cmp	r3, r1
 80070a2:	bf04      	itt	eq
 80070a4:	6819      	ldreq	r1, [r3, #0]
 80070a6:	685b      	ldreq	r3, [r3, #4]
 80070a8:	6063      	str	r3, [r4, #4]
 80070aa:	bf04      	itt	eq
 80070ac:	1949      	addeq	r1, r1, r5
 80070ae:	6021      	streq	r1, [r4, #0]
 80070b0:	6054      	str	r4, [r2, #4]
 80070b2:	e7ca      	b.n	800704a <_free_r+0x26>
 80070b4:	b003      	add	sp, #12
 80070b6:	bd30      	pop	{r4, r5, pc}
 80070b8:	2000731c 	.word	0x2000731c

080070bc <sbrk_aligned>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	4e0e      	ldr	r6, [pc, #56]	; (80070f8 <sbrk_aligned+0x3c>)
 80070c0:	460c      	mov	r4, r1
 80070c2:	6831      	ldr	r1, [r6, #0]
 80070c4:	4605      	mov	r5, r0
 80070c6:	b911      	cbnz	r1, 80070ce <sbrk_aligned+0x12>
 80070c8:	f000 f9e8 	bl	800749c <_sbrk_r>
 80070cc:	6030      	str	r0, [r6, #0]
 80070ce:	4621      	mov	r1, r4
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 f9e3 	bl	800749c <_sbrk_r>
 80070d6:	1c43      	adds	r3, r0, #1
 80070d8:	d00a      	beq.n	80070f0 <sbrk_aligned+0x34>
 80070da:	1cc4      	adds	r4, r0, #3
 80070dc:	f024 0403 	bic.w	r4, r4, #3
 80070e0:	42a0      	cmp	r0, r4
 80070e2:	d007      	beq.n	80070f4 <sbrk_aligned+0x38>
 80070e4:	1a21      	subs	r1, r4, r0
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 f9d8 	bl	800749c <_sbrk_r>
 80070ec:	3001      	adds	r0, #1
 80070ee:	d101      	bne.n	80070f4 <sbrk_aligned+0x38>
 80070f0:	f04f 34ff 	mov.w	r4, #4294967295
 80070f4:	4620      	mov	r0, r4
 80070f6:	bd70      	pop	{r4, r5, r6, pc}
 80070f8:	20007320 	.word	0x20007320

080070fc <_malloc_r>:
 80070fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007100:	1ccd      	adds	r5, r1, #3
 8007102:	f025 0503 	bic.w	r5, r5, #3
 8007106:	3508      	adds	r5, #8
 8007108:	2d0c      	cmp	r5, #12
 800710a:	bf38      	it	cc
 800710c:	250c      	movcc	r5, #12
 800710e:	2d00      	cmp	r5, #0
 8007110:	4607      	mov	r7, r0
 8007112:	db01      	blt.n	8007118 <_malloc_r+0x1c>
 8007114:	42a9      	cmp	r1, r5
 8007116:	d905      	bls.n	8007124 <_malloc_r+0x28>
 8007118:	230c      	movs	r3, #12
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	2600      	movs	r6, #0
 800711e:	4630      	mov	r0, r6
 8007120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007124:	4e2e      	ldr	r6, [pc, #184]	; (80071e0 <_malloc_r+0xe4>)
 8007126:	f000 fa25 	bl	8007574 <__malloc_lock>
 800712a:	6833      	ldr	r3, [r6, #0]
 800712c:	461c      	mov	r4, r3
 800712e:	bb34      	cbnz	r4, 800717e <_malloc_r+0x82>
 8007130:	4629      	mov	r1, r5
 8007132:	4638      	mov	r0, r7
 8007134:	f7ff ffc2 	bl	80070bc <sbrk_aligned>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	4604      	mov	r4, r0
 800713c:	d14d      	bne.n	80071da <_malloc_r+0xde>
 800713e:	6834      	ldr	r4, [r6, #0]
 8007140:	4626      	mov	r6, r4
 8007142:	2e00      	cmp	r6, #0
 8007144:	d140      	bne.n	80071c8 <_malloc_r+0xcc>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	4631      	mov	r1, r6
 800714a:	4638      	mov	r0, r7
 800714c:	eb04 0803 	add.w	r8, r4, r3
 8007150:	f000 f9a4 	bl	800749c <_sbrk_r>
 8007154:	4580      	cmp	r8, r0
 8007156:	d13a      	bne.n	80071ce <_malloc_r+0xd2>
 8007158:	6821      	ldr	r1, [r4, #0]
 800715a:	3503      	adds	r5, #3
 800715c:	1a6d      	subs	r5, r5, r1
 800715e:	f025 0503 	bic.w	r5, r5, #3
 8007162:	3508      	adds	r5, #8
 8007164:	2d0c      	cmp	r5, #12
 8007166:	bf38      	it	cc
 8007168:	250c      	movcc	r5, #12
 800716a:	4629      	mov	r1, r5
 800716c:	4638      	mov	r0, r7
 800716e:	f7ff ffa5 	bl	80070bc <sbrk_aligned>
 8007172:	3001      	adds	r0, #1
 8007174:	d02b      	beq.n	80071ce <_malloc_r+0xd2>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	442b      	add	r3, r5
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	e00e      	b.n	800719c <_malloc_r+0xa0>
 800717e:	6822      	ldr	r2, [r4, #0]
 8007180:	1b52      	subs	r2, r2, r5
 8007182:	d41e      	bmi.n	80071c2 <_malloc_r+0xc6>
 8007184:	2a0b      	cmp	r2, #11
 8007186:	d916      	bls.n	80071b6 <_malloc_r+0xba>
 8007188:	1961      	adds	r1, r4, r5
 800718a:	42a3      	cmp	r3, r4
 800718c:	6025      	str	r5, [r4, #0]
 800718e:	bf18      	it	ne
 8007190:	6059      	strne	r1, [r3, #4]
 8007192:	6863      	ldr	r3, [r4, #4]
 8007194:	bf08      	it	eq
 8007196:	6031      	streq	r1, [r6, #0]
 8007198:	5162      	str	r2, [r4, r5]
 800719a:	604b      	str	r3, [r1, #4]
 800719c:	4638      	mov	r0, r7
 800719e:	f104 060b 	add.w	r6, r4, #11
 80071a2:	f000 f9ed 	bl	8007580 <__malloc_unlock>
 80071a6:	f026 0607 	bic.w	r6, r6, #7
 80071aa:	1d23      	adds	r3, r4, #4
 80071ac:	1af2      	subs	r2, r6, r3
 80071ae:	d0b6      	beq.n	800711e <_malloc_r+0x22>
 80071b0:	1b9b      	subs	r3, r3, r6
 80071b2:	50a3      	str	r3, [r4, r2]
 80071b4:	e7b3      	b.n	800711e <_malloc_r+0x22>
 80071b6:	6862      	ldr	r2, [r4, #4]
 80071b8:	42a3      	cmp	r3, r4
 80071ba:	bf0c      	ite	eq
 80071bc:	6032      	streq	r2, [r6, #0]
 80071be:	605a      	strne	r2, [r3, #4]
 80071c0:	e7ec      	b.n	800719c <_malloc_r+0xa0>
 80071c2:	4623      	mov	r3, r4
 80071c4:	6864      	ldr	r4, [r4, #4]
 80071c6:	e7b2      	b.n	800712e <_malloc_r+0x32>
 80071c8:	4634      	mov	r4, r6
 80071ca:	6876      	ldr	r6, [r6, #4]
 80071cc:	e7b9      	b.n	8007142 <_malloc_r+0x46>
 80071ce:	230c      	movs	r3, #12
 80071d0:	603b      	str	r3, [r7, #0]
 80071d2:	4638      	mov	r0, r7
 80071d4:	f000 f9d4 	bl	8007580 <__malloc_unlock>
 80071d8:	e7a1      	b.n	800711e <_malloc_r+0x22>
 80071da:	6025      	str	r5, [r4, #0]
 80071dc:	e7de      	b.n	800719c <_malloc_r+0xa0>
 80071de:	bf00      	nop
 80071e0:	2000731c 	.word	0x2000731c

080071e4 <__ssputs_r>:
 80071e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e8:	688e      	ldr	r6, [r1, #8]
 80071ea:	429e      	cmp	r6, r3
 80071ec:	4682      	mov	sl, r0
 80071ee:	460c      	mov	r4, r1
 80071f0:	4690      	mov	r8, r2
 80071f2:	461f      	mov	r7, r3
 80071f4:	d838      	bhi.n	8007268 <__ssputs_r+0x84>
 80071f6:	898a      	ldrh	r2, [r1, #12]
 80071f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071fc:	d032      	beq.n	8007264 <__ssputs_r+0x80>
 80071fe:	6825      	ldr	r5, [r4, #0]
 8007200:	6909      	ldr	r1, [r1, #16]
 8007202:	eba5 0901 	sub.w	r9, r5, r1
 8007206:	6965      	ldr	r5, [r4, #20]
 8007208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800720c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007210:	3301      	adds	r3, #1
 8007212:	444b      	add	r3, r9
 8007214:	106d      	asrs	r5, r5, #1
 8007216:	429d      	cmp	r5, r3
 8007218:	bf38      	it	cc
 800721a:	461d      	movcc	r5, r3
 800721c:	0553      	lsls	r3, r2, #21
 800721e:	d531      	bpl.n	8007284 <__ssputs_r+0xa0>
 8007220:	4629      	mov	r1, r5
 8007222:	f7ff ff6b 	bl	80070fc <_malloc_r>
 8007226:	4606      	mov	r6, r0
 8007228:	b950      	cbnz	r0, 8007240 <__ssputs_r+0x5c>
 800722a:	230c      	movs	r3, #12
 800722c:	f8ca 3000 	str.w	r3, [sl]
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007240:	6921      	ldr	r1, [r4, #16]
 8007242:	464a      	mov	r2, r9
 8007244:	f7ff fb46 	bl	80068d4 <memcpy>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800724e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007252:	81a3      	strh	r3, [r4, #12]
 8007254:	6126      	str	r6, [r4, #16]
 8007256:	6165      	str	r5, [r4, #20]
 8007258:	444e      	add	r6, r9
 800725a:	eba5 0509 	sub.w	r5, r5, r9
 800725e:	6026      	str	r6, [r4, #0]
 8007260:	60a5      	str	r5, [r4, #8]
 8007262:	463e      	mov	r6, r7
 8007264:	42be      	cmp	r6, r7
 8007266:	d900      	bls.n	800726a <__ssputs_r+0x86>
 8007268:	463e      	mov	r6, r7
 800726a:	6820      	ldr	r0, [r4, #0]
 800726c:	4632      	mov	r2, r6
 800726e:	4641      	mov	r1, r8
 8007270:	f000 f966 	bl	8007540 <memmove>
 8007274:	68a3      	ldr	r3, [r4, #8]
 8007276:	1b9b      	subs	r3, r3, r6
 8007278:	60a3      	str	r3, [r4, #8]
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	4433      	add	r3, r6
 800727e:	6023      	str	r3, [r4, #0]
 8007280:	2000      	movs	r0, #0
 8007282:	e7db      	b.n	800723c <__ssputs_r+0x58>
 8007284:	462a      	mov	r2, r5
 8007286:	f000 f981 	bl	800758c <_realloc_r>
 800728a:	4606      	mov	r6, r0
 800728c:	2800      	cmp	r0, #0
 800728e:	d1e1      	bne.n	8007254 <__ssputs_r+0x70>
 8007290:	6921      	ldr	r1, [r4, #16]
 8007292:	4650      	mov	r0, sl
 8007294:	f7ff fec6 	bl	8007024 <_free_r>
 8007298:	e7c7      	b.n	800722a <__ssputs_r+0x46>
	...

0800729c <_svfiprintf_r>:
 800729c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a0:	4698      	mov	r8, r3
 80072a2:	898b      	ldrh	r3, [r1, #12]
 80072a4:	061b      	lsls	r3, r3, #24
 80072a6:	b09d      	sub	sp, #116	; 0x74
 80072a8:	4607      	mov	r7, r0
 80072aa:	460d      	mov	r5, r1
 80072ac:	4614      	mov	r4, r2
 80072ae:	d50e      	bpl.n	80072ce <_svfiprintf_r+0x32>
 80072b0:	690b      	ldr	r3, [r1, #16]
 80072b2:	b963      	cbnz	r3, 80072ce <_svfiprintf_r+0x32>
 80072b4:	2140      	movs	r1, #64	; 0x40
 80072b6:	f7ff ff21 	bl	80070fc <_malloc_r>
 80072ba:	6028      	str	r0, [r5, #0]
 80072bc:	6128      	str	r0, [r5, #16]
 80072be:	b920      	cbnz	r0, 80072ca <_svfiprintf_r+0x2e>
 80072c0:	230c      	movs	r3, #12
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	f04f 30ff 	mov.w	r0, #4294967295
 80072c8:	e0d1      	b.n	800746e <_svfiprintf_r+0x1d2>
 80072ca:	2340      	movs	r3, #64	; 0x40
 80072cc:	616b      	str	r3, [r5, #20]
 80072ce:	2300      	movs	r3, #0
 80072d0:	9309      	str	r3, [sp, #36]	; 0x24
 80072d2:	2320      	movs	r3, #32
 80072d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80072dc:	2330      	movs	r3, #48	; 0x30
 80072de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007488 <_svfiprintf_r+0x1ec>
 80072e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072e6:	f04f 0901 	mov.w	r9, #1
 80072ea:	4623      	mov	r3, r4
 80072ec:	469a      	mov	sl, r3
 80072ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072f2:	b10a      	cbz	r2, 80072f8 <_svfiprintf_r+0x5c>
 80072f4:	2a25      	cmp	r2, #37	; 0x25
 80072f6:	d1f9      	bne.n	80072ec <_svfiprintf_r+0x50>
 80072f8:	ebba 0b04 	subs.w	fp, sl, r4
 80072fc:	d00b      	beq.n	8007316 <_svfiprintf_r+0x7a>
 80072fe:	465b      	mov	r3, fp
 8007300:	4622      	mov	r2, r4
 8007302:	4629      	mov	r1, r5
 8007304:	4638      	mov	r0, r7
 8007306:	f7ff ff6d 	bl	80071e4 <__ssputs_r>
 800730a:	3001      	adds	r0, #1
 800730c:	f000 80aa 	beq.w	8007464 <_svfiprintf_r+0x1c8>
 8007310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007312:	445a      	add	r2, fp
 8007314:	9209      	str	r2, [sp, #36]	; 0x24
 8007316:	f89a 3000 	ldrb.w	r3, [sl]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 80a2 	beq.w	8007464 <_svfiprintf_r+0x1c8>
 8007320:	2300      	movs	r3, #0
 8007322:	f04f 32ff 	mov.w	r2, #4294967295
 8007326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800732a:	f10a 0a01 	add.w	sl, sl, #1
 800732e:	9304      	str	r3, [sp, #16]
 8007330:	9307      	str	r3, [sp, #28]
 8007332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007336:	931a      	str	r3, [sp, #104]	; 0x68
 8007338:	4654      	mov	r4, sl
 800733a:	2205      	movs	r2, #5
 800733c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007340:	4851      	ldr	r0, [pc, #324]	; (8007488 <_svfiprintf_r+0x1ec>)
 8007342:	f7f8 ffb5 	bl	80002b0 <memchr>
 8007346:	9a04      	ldr	r2, [sp, #16]
 8007348:	b9d8      	cbnz	r0, 8007382 <_svfiprintf_r+0xe6>
 800734a:	06d0      	lsls	r0, r2, #27
 800734c:	bf44      	itt	mi
 800734e:	2320      	movmi	r3, #32
 8007350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007354:	0711      	lsls	r1, r2, #28
 8007356:	bf44      	itt	mi
 8007358:	232b      	movmi	r3, #43	; 0x2b
 800735a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800735e:	f89a 3000 	ldrb.w	r3, [sl]
 8007362:	2b2a      	cmp	r3, #42	; 0x2a
 8007364:	d015      	beq.n	8007392 <_svfiprintf_r+0xf6>
 8007366:	9a07      	ldr	r2, [sp, #28]
 8007368:	4654      	mov	r4, sl
 800736a:	2000      	movs	r0, #0
 800736c:	f04f 0c0a 	mov.w	ip, #10
 8007370:	4621      	mov	r1, r4
 8007372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007376:	3b30      	subs	r3, #48	; 0x30
 8007378:	2b09      	cmp	r3, #9
 800737a:	d94e      	bls.n	800741a <_svfiprintf_r+0x17e>
 800737c:	b1b0      	cbz	r0, 80073ac <_svfiprintf_r+0x110>
 800737e:	9207      	str	r2, [sp, #28]
 8007380:	e014      	b.n	80073ac <_svfiprintf_r+0x110>
 8007382:	eba0 0308 	sub.w	r3, r0, r8
 8007386:	fa09 f303 	lsl.w	r3, r9, r3
 800738a:	4313      	orrs	r3, r2
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	46a2      	mov	sl, r4
 8007390:	e7d2      	b.n	8007338 <_svfiprintf_r+0x9c>
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	1d19      	adds	r1, r3, #4
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	9103      	str	r1, [sp, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	bfbb      	ittet	lt
 800739e:	425b      	neglt	r3, r3
 80073a0:	f042 0202 	orrlt.w	r2, r2, #2
 80073a4:	9307      	strge	r3, [sp, #28]
 80073a6:	9307      	strlt	r3, [sp, #28]
 80073a8:	bfb8      	it	lt
 80073aa:	9204      	strlt	r2, [sp, #16]
 80073ac:	7823      	ldrb	r3, [r4, #0]
 80073ae:	2b2e      	cmp	r3, #46	; 0x2e
 80073b0:	d10c      	bne.n	80073cc <_svfiprintf_r+0x130>
 80073b2:	7863      	ldrb	r3, [r4, #1]
 80073b4:	2b2a      	cmp	r3, #42	; 0x2a
 80073b6:	d135      	bne.n	8007424 <_svfiprintf_r+0x188>
 80073b8:	9b03      	ldr	r3, [sp, #12]
 80073ba:	1d1a      	adds	r2, r3, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	9203      	str	r2, [sp, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	bfb8      	it	lt
 80073c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80073c8:	3402      	adds	r4, #2
 80073ca:	9305      	str	r3, [sp, #20]
 80073cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007498 <_svfiprintf_r+0x1fc>
 80073d0:	7821      	ldrb	r1, [r4, #0]
 80073d2:	2203      	movs	r2, #3
 80073d4:	4650      	mov	r0, sl
 80073d6:	f7f8 ff6b 	bl	80002b0 <memchr>
 80073da:	b140      	cbz	r0, 80073ee <_svfiprintf_r+0x152>
 80073dc:	2340      	movs	r3, #64	; 0x40
 80073de:	eba0 000a 	sub.w	r0, r0, sl
 80073e2:	fa03 f000 	lsl.w	r0, r3, r0
 80073e6:	9b04      	ldr	r3, [sp, #16]
 80073e8:	4303      	orrs	r3, r0
 80073ea:	3401      	adds	r4, #1
 80073ec:	9304      	str	r3, [sp, #16]
 80073ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f2:	4826      	ldr	r0, [pc, #152]	; (800748c <_svfiprintf_r+0x1f0>)
 80073f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073f8:	2206      	movs	r2, #6
 80073fa:	f7f8 ff59 	bl	80002b0 <memchr>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d038      	beq.n	8007474 <_svfiprintf_r+0x1d8>
 8007402:	4b23      	ldr	r3, [pc, #140]	; (8007490 <_svfiprintf_r+0x1f4>)
 8007404:	bb1b      	cbnz	r3, 800744e <_svfiprintf_r+0x1b2>
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	3307      	adds	r3, #7
 800740a:	f023 0307 	bic.w	r3, r3, #7
 800740e:	3308      	adds	r3, #8
 8007410:	9303      	str	r3, [sp, #12]
 8007412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007414:	4433      	add	r3, r6
 8007416:	9309      	str	r3, [sp, #36]	; 0x24
 8007418:	e767      	b.n	80072ea <_svfiprintf_r+0x4e>
 800741a:	fb0c 3202 	mla	r2, ip, r2, r3
 800741e:	460c      	mov	r4, r1
 8007420:	2001      	movs	r0, #1
 8007422:	e7a5      	b.n	8007370 <_svfiprintf_r+0xd4>
 8007424:	2300      	movs	r3, #0
 8007426:	3401      	adds	r4, #1
 8007428:	9305      	str	r3, [sp, #20]
 800742a:	4619      	mov	r1, r3
 800742c:	f04f 0c0a 	mov.w	ip, #10
 8007430:	4620      	mov	r0, r4
 8007432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007436:	3a30      	subs	r2, #48	; 0x30
 8007438:	2a09      	cmp	r2, #9
 800743a:	d903      	bls.n	8007444 <_svfiprintf_r+0x1a8>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0c5      	beq.n	80073cc <_svfiprintf_r+0x130>
 8007440:	9105      	str	r1, [sp, #20]
 8007442:	e7c3      	b.n	80073cc <_svfiprintf_r+0x130>
 8007444:	fb0c 2101 	mla	r1, ip, r1, r2
 8007448:	4604      	mov	r4, r0
 800744a:	2301      	movs	r3, #1
 800744c:	e7f0      	b.n	8007430 <_svfiprintf_r+0x194>
 800744e:	ab03      	add	r3, sp, #12
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	462a      	mov	r2, r5
 8007454:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <_svfiprintf_r+0x1f8>)
 8007456:	a904      	add	r1, sp, #16
 8007458:	4638      	mov	r0, r7
 800745a:	f7fd ffcb 	bl	80053f4 <_printf_float>
 800745e:	1c42      	adds	r2, r0, #1
 8007460:	4606      	mov	r6, r0
 8007462:	d1d6      	bne.n	8007412 <_svfiprintf_r+0x176>
 8007464:	89ab      	ldrh	r3, [r5, #12]
 8007466:	065b      	lsls	r3, r3, #25
 8007468:	f53f af2c 	bmi.w	80072c4 <_svfiprintf_r+0x28>
 800746c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800746e:	b01d      	add	sp, #116	; 0x74
 8007470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007474:	ab03      	add	r3, sp, #12
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	462a      	mov	r2, r5
 800747a:	4b06      	ldr	r3, [pc, #24]	; (8007494 <_svfiprintf_r+0x1f8>)
 800747c:	a904      	add	r1, sp, #16
 800747e:	4638      	mov	r0, r7
 8007480:	f7fe fa5c 	bl	800593c <_printf_i>
 8007484:	e7eb      	b.n	800745e <_svfiprintf_r+0x1c2>
 8007486:	bf00      	nop
 8007488:	0801b77c 	.word	0x0801b77c
 800748c:	0801b786 	.word	0x0801b786
 8007490:	080053f5 	.word	0x080053f5
 8007494:	080071e5 	.word	0x080071e5
 8007498:	0801b782 	.word	0x0801b782

0800749c <_sbrk_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4d06      	ldr	r5, [pc, #24]	; (80074b8 <_sbrk_r+0x1c>)
 80074a0:	2300      	movs	r3, #0
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	f7fa f8e2 	bl	8001670 <_sbrk>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_sbrk_r+0x1a>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_sbrk_r+0x1a>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	20007324 	.word	0x20007324

080074bc <__assert_func>:
 80074bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074be:	4614      	mov	r4, r2
 80074c0:	461a      	mov	r2, r3
 80074c2:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <__assert_func+0x2c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4605      	mov	r5, r0
 80074c8:	68d8      	ldr	r0, [r3, #12]
 80074ca:	b14c      	cbz	r4, 80074e0 <__assert_func+0x24>
 80074cc:	4b07      	ldr	r3, [pc, #28]	; (80074ec <__assert_func+0x30>)
 80074ce:	9100      	str	r1, [sp, #0]
 80074d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074d4:	4906      	ldr	r1, [pc, #24]	; (80074f0 <__assert_func+0x34>)
 80074d6:	462b      	mov	r3, r5
 80074d8:	f000 f80e 	bl	80074f8 <fiprintf>
 80074dc:	f000 faac 	bl	8007a38 <abort>
 80074e0:	4b04      	ldr	r3, [pc, #16]	; (80074f4 <__assert_func+0x38>)
 80074e2:	461c      	mov	r4, r3
 80074e4:	e7f3      	b.n	80074ce <__assert_func+0x12>
 80074e6:	bf00      	nop
 80074e8:	20000014 	.word	0x20000014
 80074ec:	0801b78d 	.word	0x0801b78d
 80074f0:	0801b79a 	.word	0x0801b79a
 80074f4:	0801b7c8 	.word	0x0801b7c8

080074f8 <fiprintf>:
 80074f8:	b40e      	push	{r1, r2, r3}
 80074fa:	b503      	push	{r0, r1, lr}
 80074fc:	4601      	mov	r1, r0
 80074fe:	ab03      	add	r3, sp, #12
 8007500:	4805      	ldr	r0, [pc, #20]	; (8007518 <fiprintf+0x20>)
 8007502:	f853 2b04 	ldr.w	r2, [r3], #4
 8007506:	6800      	ldr	r0, [r0, #0]
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	f000 f897 	bl	800763c <_vfiprintf_r>
 800750e:	b002      	add	sp, #8
 8007510:	f85d eb04 	ldr.w	lr, [sp], #4
 8007514:	b003      	add	sp, #12
 8007516:	4770      	bx	lr
 8007518:	20000014 	.word	0x20000014

0800751c <__ascii_mbtowc>:
 800751c:	b082      	sub	sp, #8
 800751e:	b901      	cbnz	r1, 8007522 <__ascii_mbtowc+0x6>
 8007520:	a901      	add	r1, sp, #4
 8007522:	b142      	cbz	r2, 8007536 <__ascii_mbtowc+0x1a>
 8007524:	b14b      	cbz	r3, 800753a <__ascii_mbtowc+0x1e>
 8007526:	7813      	ldrb	r3, [r2, #0]
 8007528:	600b      	str	r3, [r1, #0]
 800752a:	7812      	ldrb	r2, [r2, #0]
 800752c:	1e10      	subs	r0, r2, #0
 800752e:	bf18      	it	ne
 8007530:	2001      	movne	r0, #1
 8007532:	b002      	add	sp, #8
 8007534:	4770      	bx	lr
 8007536:	4610      	mov	r0, r2
 8007538:	e7fb      	b.n	8007532 <__ascii_mbtowc+0x16>
 800753a:	f06f 0001 	mvn.w	r0, #1
 800753e:	e7f8      	b.n	8007532 <__ascii_mbtowc+0x16>

08007540 <memmove>:
 8007540:	4288      	cmp	r0, r1
 8007542:	b510      	push	{r4, lr}
 8007544:	eb01 0402 	add.w	r4, r1, r2
 8007548:	d902      	bls.n	8007550 <memmove+0x10>
 800754a:	4284      	cmp	r4, r0
 800754c:	4623      	mov	r3, r4
 800754e:	d807      	bhi.n	8007560 <memmove+0x20>
 8007550:	1e43      	subs	r3, r0, #1
 8007552:	42a1      	cmp	r1, r4
 8007554:	d008      	beq.n	8007568 <memmove+0x28>
 8007556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800755a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800755e:	e7f8      	b.n	8007552 <memmove+0x12>
 8007560:	4402      	add	r2, r0
 8007562:	4601      	mov	r1, r0
 8007564:	428a      	cmp	r2, r1
 8007566:	d100      	bne.n	800756a <memmove+0x2a>
 8007568:	bd10      	pop	{r4, pc}
 800756a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800756e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007572:	e7f7      	b.n	8007564 <memmove+0x24>

08007574 <__malloc_lock>:
 8007574:	4801      	ldr	r0, [pc, #4]	; (800757c <__malloc_lock+0x8>)
 8007576:	f000 bc1f 	b.w	8007db8 <__retarget_lock_acquire_recursive>
 800757a:	bf00      	nop
 800757c:	20007328 	.word	0x20007328

08007580 <__malloc_unlock>:
 8007580:	4801      	ldr	r0, [pc, #4]	; (8007588 <__malloc_unlock+0x8>)
 8007582:	f000 bc1a 	b.w	8007dba <__retarget_lock_release_recursive>
 8007586:	bf00      	nop
 8007588:	20007328 	.word	0x20007328

0800758c <_realloc_r>:
 800758c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007590:	4680      	mov	r8, r0
 8007592:	4614      	mov	r4, r2
 8007594:	460e      	mov	r6, r1
 8007596:	b921      	cbnz	r1, 80075a2 <_realloc_r+0x16>
 8007598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800759c:	4611      	mov	r1, r2
 800759e:	f7ff bdad 	b.w	80070fc <_malloc_r>
 80075a2:	b92a      	cbnz	r2, 80075b0 <_realloc_r+0x24>
 80075a4:	f7ff fd3e 	bl	8007024 <_free_r>
 80075a8:	4625      	mov	r5, r4
 80075aa:	4628      	mov	r0, r5
 80075ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b0:	f000 fc6a 	bl	8007e88 <_malloc_usable_size_r>
 80075b4:	4284      	cmp	r4, r0
 80075b6:	4607      	mov	r7, r0
 80075b8:	d802      	bhi.n	80075c0 <_realloc_r+0x34>
 80075ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075be:	d812      	bhi.n	80075e6 <_realloc_r+0x5a>
 80075c0:	4621      	mov	r1, r4
 80075c2:	4640      	mov	r0, r8
 80075c4:	f7ff fd9a 	bl	80070fc <_malloc_r>
 80075c8:	4605      	mov	r5, r0
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d0ed      	beq.n	80075aa <_realloc_r+0x1e>
 80075ce:	42bc      	cmp	r4, r7
 80075d0:	4622      	mov	r2, r4
 80075d2:	4631      	mov	r1, r6
 80075d4:	bf28      	it	cs
 80075d6:	463a      	movcs	r2, r7
 80075d8:	f7ff f97c 	bl	80068d4 <memcpy>
 80075dc:	4631      	mov	r1, r6
 80075de:	4640      	mov	r0, r8
 80075e0:	f7ff fd20 	bl	8007024 <_free_r>
 80075e4:	e7e1      	b.n	80075aa <_realloc_r+0x1e>
 80075e6:	4635      	mov	r5, r6
 80075e8:	e7df      	b.n	80075aa <_realloc_r+0x1e>

080075ea <__sfputc_r>:
 80075ea:	6893      	ldr	r3, [r2, #8]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	b410      	push	{r4}
 80075f2:	6093      	str	r3, [r2, #8]
 80075f4:	da08      	bge.n	8007608 <__sfputc_r+0x1e>
 80075f6:	6994      	ldr	r4, [r2, #24]
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	db01      	blt.n	8007600 <__sfputc_r+0x16>
 80075fc:	290a      	cmp	r1, #10
 80075fe:	d103      	bne.n	8007608 <__sfputc_r+0x1e>
 8007600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007604:	f000 b94a 	b.w	800789c <__swbuf_r>
 8007608:	6813      	ldr	r3, [r2, #0]
 800760a:	1c58      	adds	r0, r3, #1
 800760c:	6010      	str	r0, [r2, #0]
 800760e:	7019      	strb	r1, [r3, #0]
 8007610:	4608      	mov	r0, r1
 8007612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007616:	4770      	bx	lr

08007618 <__sfputs_r>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	4606      	mov	r6, r0
 800761c:	460f      	mov	r7, r1
 800761e:	4614      	mov	r4, r2
 8007620:	18d5      	adds	r5, r2, r3
 8007622:	42ac      	cmp	r4, r5
 8007624:	d101      	bne.n	800762a <__sfputs_r+0x12>
 8007626:	2000      	movs	r0, #0
 8007628:	e007      	b.n	800763a <__sfputs_r+0x22>
 800762a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800762e:	463a      	mov	r2, r7
 8007630:	4630      	mov	r0, r6
 8007632:	f7ff ffda 	bl	80075ea <__sfputc_r>
 8007636:	1c43      	adds	r3, r0, #1
 8007638:	d1f3      	bne.n	8007622 <__sfputs_r+0xa>
 800763a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800763c <_vfiprintf_r>:
 800763c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	460d      	mov	r5, r1
 8007642:	b09d      	sub	sp, #116	; 0x74
 8007644:	4614      	mov	r4, r2
 8007646:	4698      	mov	r8, r3
 8007648:	4606      	mov	r6, r0
 800764a:	b118      	cbz	r0, 8007654 <_vfiprintf_r+0x18>
 800764c:	6983      	ldr	r3, [r0, #24]
 800764e:	b90b      	cbnz	r3, 8007654 <_vfiprintf_r+0x18>
 8007650:	f000 fb14 	bl	8007c7c <__sinit>
 8007654:	4b89      	ldr	r3, [pc, #548]	; (800787c <_vfiprintf_r+0x240>)
 8007656:	429d      	cmp	r5, r3
 8007658:	d11b      	bne.n	8007692 <_vfiprintf_r+0x56>
 800765a:	6875      	ldr	r5, [r6, #4]
 800765c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800765e:	07d9      	lsls	r1, r3, #31
 8007660:	d405      	bmi.n	800766e <_vfiprintf_r+0x32>
 8007662:	89ab      	ldrh	r3, [r5, #12]
 8007664:	059a      	lsls	r2, r3, #22
 8007666:	d402      	bmi.n	800766e <_vfiprintf_r+0x32>
 8007668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800766a:	f000 fba5 	bl	8007db8 <__retarget_lock_acquire_recursive>
 800766e:	89ab      	ldrh	r3, [r5, #12]
 8007670:	071b      	lsls	r3, r3, #28
 8007672:	d501      	bpl.n	8007678 <_vfiprintf_r+0x3c>
 8007674:	692b      	ldr	r3, [r5, #16]
 8007676:	b9eb      	cbnz	r3, 80076b4 <_vfiprintf_r+0x78>
 8007678:	4629      	mov	r1, r5
 800767a:	4630      	mov	r0, r6
 800767c:	f000 f96e 	bl	800795c <__swsetup_r>
 8007680:	b1c0      	cbz	r0, 80076b4 <_vfiprintf_r+0x78>
 8007682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007684:	07dc      	lsls	r4, r3, #31
 8007686:	d50e      	bpl.n	80076a6 <_vfiprintf_r+0x6a>
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	b01d      	add	sp, #116	; 0x74
 800768e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007692:	4b7b      	ldr	r3, [pc, #492]	; (8007880 <_vfiprintf_r+0x244>)
 8007694:	429d      	cmp	r5, r3
 8007696:	d101      	bne.n	800769c <_vfiprintf_r+0x60>
 8007698:	68b5      	ldr	r5, [r6, #8]
 800769a:	e7df      	b.n	800765c <_vfiprintf_r+0x20>
 800769c:	4b79      	ldr	r3, [pc, #484]	; (8007884 <_vfiprintf_r+0x248>)
 800769e:	429d      	cmp	r5, r3
 80076a0:	bf08      	it	eq
 80076a2:	68f5      	ldreq	r5, [r6, #12]
 80076a4:	e7da      	b.n	800765c <_vfiprintf_r+0x20>
 80076a6:	89ab      	ldrh	r3, [r5, #12]
 80076a8:	0598      	lsls	r0, r3, #22
 80076aa:	d4ed      	bmi.n	8007688 <_vfiprintf_r+0x4c>
 80076ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ae:	f000 fb84 	bl	8007dba <__retarget_lock_release_recursive>
 80076b2:	e7e9      	b.n	8007688 <_vfiprintf_r+0x4c>
 80076b4:	2300      	movs	r3, #0
 80076b6:	9309      	str	r3, [sp, #36]	; 0x24
 80076b8:	2320      	movs	r3, #32
 80076ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076be:	f8cd 800c 	str.w	r8, [sp, #12]
 80076c2:	2330      	movs	r3, #48	; 0x30
 80076c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007888 <_vfiprintf_r+0x24c>
 80076c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076cc:	f04f 0901 	mov.w	r9, #1
 80076d0:	4623      	mov	r3, r4
 80076d2:	469a      	mov	sl, r3
 80076d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d8:	b10a      	cbz	r2, 80076de <_vfiprintf_r+0xa2>
 80076da:	2a25      	cmp	r2, #37	; 0x25
 80076dc:	d1f9      	bne.n	80076d2 <_vfiprintf_r+0x96>
 80076de:	ebba 0b04 	subs.w	fp, sl, r4
 80076e2:	d00b      	beq.n	80076fc <_vfiprintf_r+0xc0>
 80076e4:	465b      	mov	r3, fp
 80076e6:	4622      	mov	r2, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7ff ff94 	bl	8007618 <__sfputs_r>
 80076f0:	3001      	adds	r0, #1
 80076f2:	f000 80aa 	beq.w	800784a <_vfiprintf_r+0x20e>
 80076f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076f8:	445a      	add	r2, fp
 80076fa:	9209      	str	r2, [sp, #36]	; 0x24
 80076fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 80a2 	beq.w	800784a <_vfiprintf_r+0x20e>
 8007706:	2300      	movs	r3, #0
 8007708:	f04f 32ff 	mov.w	r2, #4294967295
 800770c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007710:	f10a 0a01 	add.w	sl, sl, #1
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	9307      	str	r3, [sp, #28]
 8007718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800771c:	931a      	str	r3, [sp, #104]	; 0x68
 800771e:	4654      	mov	r4, sl
 8007720:	2205      	movs	r2, #5
 8007722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007726:	4858      	ldr	r0, [pc, #352]	; (8007888 <_vfiprintf_r+0x24c>)
 8007728:	f7f8 fdc2 	bl	80002b0 <memchr>
 800772c:	9a04      	ldr	r2, [sp, #16]
 800772e:	b9d8      	cbnz	r0, 8007768 <_vfiprintf_r+0x12c>
 8007730:	06d1      	lsls	r1, r2, #27
 8007732:	bf44      	itt	mi
 8007734:	2320      	movmi	r3, #32
 8007736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800773a:	0713      	lsls	r3, r2, #28
 800773c:	bf44      	itt	mi
 800773e:	232b      	movmi	r3, #43	; 0x2b
 8007740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007744:	f89a 3000 	ldrb.w	r3, [sl]
 8007748:	2b2a      	cmp	r3, #42	; 0x2a
 800774a:	d015      	beq.n	8007778 <_vfiprintf_r+0x13c>
 800774c:	9a07      	ldr	r2, [sp, #28]
 800774e:	4654      	mov	r4, sl
 8007750:	2000      	movs	r0, #0
 8007752:	f04f 0c0a 	mov.w	ip, #10
 8007756:	4621      	mov	r1, r4
 8007758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800775c:	3b30      	subs	r3, #48	; 0x30
 800775e:	2b09      	cmp	r3, #9
 8007760:	d94e      	bls.n	8007800 <_vfiprintf_r+0x1c4>
 8007762:	b1b0      	cbz	r0, 8007792 <_vfiprintf_r+0x156>
 8007764:	9207      	str	r2, [sp, #28]
 8007766:	e014      	b.n	8007792 <_vfiprintf_r+0x156>
 8007768:	eba0 0308 	sub.w	r3, r0, r8
 800776c:	fa09 f303 	lsl.w	r3, r9, r3
 8007770:	4313      	orrs	r3, r2
 8007772:	9304      	str	r3, [sp, #16]
 8007774:	46a2      	mov	sl, r4
 8007776:	e7d2      	b.n	800771e <_vfiprintf_r+0xe2>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	1d19      	adds	r1, r3, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	9103      	str	r1, [sp, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	bfbb      	ittet	lt
 8007784:	425b      	neglt	r3, r3
 8007786:	f042 0202 	orrlt.w	r2, r2, #2
 800778a:	9307      	strge	r3, [sp, #28]
 800778c:	9307      	strlt	r3, [sp, #28]
 800778e:	bfb8      	it	lt
 8007790:	9204      	strlt	r2, [sp, #16]
 8007792:	7823      	ldrb	r3, [r4, #0]
 8007794:	2b2e      	cmp	r3, #46	; 0x2e
 8007796:	d10c      	bne.n	80077b2 <_vfiprintf_r+0x176>
 8007798:	7863      	ldrb	r3, [r4, #1]
 800779a:	2b2a      	cmp	r3, #42	; 0x2a
 800779c:	d135      	bne.n	800780a <_vfiprintf_r+0x1ce>
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	1d1a      	adds	r2, r3, #4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	9203      	str	r2, [sp, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bfb8      	it	lt
 80077aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80077ae:	3402      	adds	r4, #2
 80077b0:	9305      	str	r3, [sp, #20]
 80077b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007898 <_vfiprintf_r+0x25c>
 80077b6:	7821      	ldrb	r1, [r4, #0]
 80077b8:	2203      	movs	r2, #3
 80077ba:	4650      	mov	r0, sl
 80077bc:	f7f8 fd78 	bl	80002b0 <memchr>
 80077c0:	b140      	cbz	r0, 80077d4 <_vfiprintf_r+0x198>
 80077c2:	2340      	movs	r3, #64	; 0x40
 80077c4:	eba0 000a 	sub.w	r0, r0, sl
 80077c8:	fa03 f000 	lsl.w	r0, r3, r0
 80077cc:	9b04      	ldr	r3, [sp, #16]
 80077ce:	4303      	orrs	r3, r0
 80077d0:	3401      	adds	r4, #1
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d8:	482c      	ldr	r0, [pc, #176]	; (800788c <_vfiprintf_r+0x250>)
 80077da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077de:	2206      	movs	r2, #6
 80077e0:	f7f8 fd66 	bl	80002b0 <memchr>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d03f      	beq.n	8007868 <_vfiprintf_r+0x22c>
 80077e8:	4b29      	ldr	r3, [pc, #164]	; (8007890 <_vfiprintf_r+0x254>)
 80077ea:	bb1b      	cbnz	r3, 8007834 <_vfiprintf_r+0x1f8>
 80077ec:	9b03      	ldr	r3, [sp, #12]
 80077ee:	3307      	adds	r3, #7
 80077f0:	f023 0307 	bic.w	r3, r3, #7
 80077f4:	3308      	adds	r3, #8
 80077f6:	9303      	str	r3, [sp, #12]
 80077f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077fa:	443b      	add	r3, r7
 80077fc:	9309      	str	r3, [sp, #36]	; 0x24
 80077fe:	e767      	b.n	80076d0 <_vfiprintf_r+0x94>
 8007800:	fb0c 3202 	mla	r2, ip, r2, r3
 8007804:	460c      	mov	r4, r1
 8007806:	2001      	movs	r0, #1
 8007808:	e7a5      	b.n	8007756 <_vfiprintf_r+0x11a>
 800780a:	2300      	movs	r3, #0
 800780c:	3401      	adds	r4, #1
 800780e:	9305      	str	r3, [sp, #20]
 8007810:	4619      	mov	r1, r3
 8007812:	f04f 0c0a 	mov.w	ip, #10
 8007816:	4620      	mov	r0, r4
 8007818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800781c:	3a30      	subs	r2, #48	; 0x30
 800781e:	2a09      	cmp	r2, #9
 8007820:	d903      	bls.n	800782a <_vfiprintf_r+0x1ee>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0c5      	beq.n	80077b2 <_vfiprintf_r+0x176>
 8007826:	9105      	str	r1, [sp, #20]
 8007828:	e7c3      	b.n	80077b2 <_vfiprintf_r+0x176>
 800782a:	fb0c 2101 	mla	r1, ip, r1, r2
 800782e:	4604      	mov	r4, r0
 8007830:	2301      	movs	r3, #1
 8007832:	e7f0      	b.n	8007816 <_vfiprintf_r+0x1da>
 8007834:	ab03      	add	r3, sp, #12
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	462a      	mov	r2, r5
 800783a:	4b16      	ldr	r3, [pc, #88]	; (8007894 <_vfiprintf_r+0x258>)
 800783c:	a904      	add	r1, sp, #16
 800783e:	4630      	mov	r0, r6
 8007840:	f7fd fdd8 	bl	80053f4 <_printf_float>
 8007844:	4607      	mov	r7, r0
 8007846:	1c78      	adds	r0, r7, #1
 8007848:	d1d6      	bne.n	80077f8 <_vfiprintf_r+0x1bc>
 800784a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800784c:	07d9      	lsls	r1, r3, #31
 800784e:	d405      	bmi.n	800785c <_vfiprintf_r+0x220>
 8007850:	89ab      	ldrh	r3, [r5, #12]
 8007852:	059a      	lsls	r2, r3, #22
 8007854:	d402      	bmi.n	800785c <_vfiprintf_r+0x220>
 8007856:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007858:	f000 faaf 	bl	8007dba <__retarget_lock_release_recursive>
 800785c:	89ab      	ldrh	r3, [r5, #12]
 800785e:	065b      	lsls	r3, r3, #25
 8007860:	f53f af12 	bmi.w	8007688 <_vfiprintf_r+0x4c>
 8007864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007866:	e711      	b.n	800768c <_vfiprintf_r+0x50>
 8007868:	ab03      	add	r3, sp, #12
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	462a      	mov	r2, r5
 800786e:	4b09      	ldr	r3, [pc, #36]	; (8007894 <_vfiprintf_r+0x258>)
 8007870:	a904      	add	r1, sp, #16
 8007872:	4630      	mov	r0, r6
 8007874:	f7fe f862 	bl	800593c <_printf_i>
 8007878:	e7e4      	b.n	8007844 <_vfiprintf_r+0x208>
 800787a:	bf00      	nop
 800787c:	0801b8f4 	.word	0x0801b8f4
 8007880:	0801b914 	.word	0x0801b914
 8007884:	0801b8d4 	.word	0x0801b8d4
 8007888:	0801b77c 	.word	0x0801b77c
 800788c:	0801b786 	.word	0x0801b786
 8007890:	080053f5 	.word	0x080053f5
 8007894:	08007619 	.word	0x08007619
 8007898:	0801b782 	.word	0x0801b782

0800789c <__swbuf_r>:
 800789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789e:	460e      	mov	r6, r1
 80078a0:	4614      	mov	r4, r2
 80078a2:	4605      	mov	r5, r0
 80078a4:	b118      	cbz	r0, 80078ae <__swbuf_r+0x12>
 80078a6:	6983      	ldr	r3, [r0, #24]
 80078a8:	b90b      	cbnz	r3, 80078ae <__swbuf_r+0x12>
 80078aa:	f000 f9e7 	bl	8007c7c <__sinit>
 80078ae:	4b21      	ldr	r3, [pc, #132]	; (8007934 <__swbuf_r+0x98>)
 80078b0:	429c      	cmp	r4, r3
 80078b2:	d12b      	bne.n	800790c <__swbuf_r+0x70>
 80078b4:	686c      	ldr	r4, [r5, #4]
 80078b6:	69a3      	ldr	r3, [r4, #24]
 80078b8:	60a3      	str	r3, [r4, #8]
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	071a      	lsls	r2, r3, #28
 80078be:	d52f      	bpl.n	8007920 <__swbuf_r+0x84>
 80078c0:	6923      	ldr	r3, [r4, #16]
 80078c2:	b36b      	cbz	r3, 8007920 <__swbuf_r+0x84>
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	6820      	ldr	r0, [r4, #0]
 80078c8:	1ac0      	subs	r0, r0, r3
 80078ca:	6963      	ldr	r3, [r4, #20]
 80078cc:	b2f6      	uxtb	r6, r6
 80078ce:	4283      	cmp	r3, r0
 80078d0:	4637      	mov	r7, r6
 80078d2:	dc04      	bgt.n	80078de <__swbuf_r+0x42>
 80078d4:	4621      	mov	r1, r4
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 f93c 	bl	8007b54 <_fflush_r>
 80078dc:	bb30      	cbnz	r0, 800792c <__swbuf_r+0x90>
 80078de:	68a3      	ldr	r3, [r4, #8]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	60a3      	str	r3, [r4, #8]
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	6022      	str	r2, [r4, #0]
 80078ea:	701e      	strb	r6, [r3, #0]
 80078ec:	6963      	ldr	r3, [r4, #20]
 80078ee:	3001      	adds	r0, #1
 80078f0:	4283      	cmp	r3, r0
 80078f2:	d004      	beq.n	80078fe <__swbuf_r+0x62>
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	07db      	lsls	r3, r3, #31
 80078f8:	d506      	bpl.n	8007908 <__swbuf_r+0x6c>
 80078fa:	2e0a      	cmp	r6, #10
 80078fc:	d104      	bne.n	8007908 <__swbuf_r+0x6c>
 80078fe:	4621      	mov	r1, r4
 8007900:	4628      	mov	r0, r5
 8007902:	f000 f927 	bl	8007b54 <_fflush_r>
 8007906:	b988      	cbnz	r0, 800792c <__swbuf_r+0x90>
 8007908:	4638      	mov	r0, r7
 800790a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800790c:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <__swbuf_r+0x9c>)
 800790e:	429c      	cmp	r4, r3
 8007910:	d101      	bne.n	8007916 <__swbuf_r+0x7a>
 8007912:	68ac      	ldr	r4, [r5, #8]
 8007914:	e7cf      	b.n	80078b6 <__swbuf_r+0x1a>
 8007916:	4b09      	ldr	r3, [pc, #36]	; (800793c <__swbuf_r+0xa0>)
 8007918:	429c      	cmp	r4, r3
 800791a:	bf08      	it	eq
 800791c:	68ec      	ldreq	r4, [r5, #12]
 800791e:	e7ca      	b.n	80078b6 <__swbuf_r+0x1a>
 8007920:	4621      	mov	r1, r4
 8007922:	4628      	mov	r0, r5
 8007924:	f000 f81a 	bl	800795c <__swsetup_r>
 8007928:	2800      	cmp	r0, #0
 800792a:	d0cb      	beq.n	80078c4 <__swbuf_r+0x28>
 800792c:	f04f 37ff 	mov.w	r7, #4294967295
 8007930:	e7ea      	b.n	8007908 <__swbuf_r+0x6c>
 8007932:	bf00      	nop
 8007934:	0801b8f4 	.word	0x0801b8f4
 8007938:	0801b914 	.word	0x0801b914
 800793c:	0801b8d4 	.word	0x0801b8d4

08007940 <__ascii_wctomb>:
 8007940:	b149      	cbz	r1, 8007956 <__ascii_wctomb+0x16>
 8007942:	2aff      	cmp	r2, #255	; 0xff
 8007944:	bf85      	ittet	hi
 8007946:	238a      	movhi	r3, #138	; 0x8a
 8007948:	6003      	strhi	r3, [r0, #0]
 800794a:	700a      	strbls	r2, [r1, #0]
 800794c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007950:	bf98      	it	ls
 8007952:	2001      	movls	r0, #1
 8007954:	4770      	bx	lr
 8007956:	4608      	mov	r0, r1
 8007958:	4770      	bx	lr
	...

0800795c <__swsetup_r>:
 800795c:	4b32      	ldr	r3, [pc, #200]	; (8007a28 <__swsetup_r+0xcc>)
 800795e:	b570      	push	{r4, r5, r6, lr}
 8007960:	681d      	ldr	r5, [r3, #0]
 8007962:	4606      	mov	r6, r0
 8007964:	460c      	mov	r4, r1
 8007966:	b125      	cbz	r5, 8007972 <__swsetup_r+0x16>
 8007968:	69ab      	ldr	r3, [r5, #24]
 800796a:	b913      	cbnz	r3, 8007972 <__swsetup_r+0x16>
 800796c:	4628      	mov	r0, r5
 800796e:	f000 f985 	bl	8007c7c <__sinit>
 8007972:	4b2e      	ldr	r3, [pc, #184]	; (8007a2c <__swsetup_r+0xd0>)
 8007974:	429c      	cmp	r4, r3
 8007976:	d10f      	bne.n	8007998 <__swsetup_r+0x3c>
 8007978:	686c      	ldr	r4, [r5, #4]
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007980:	0719      	lsls	r1, r3, #28
 8007982:	d42c      	bmi.n	80079de <__swsetup_r+0x82>
 8007984:	06dd      	lsls	r5, r3, #27
 8007986:	d411      	bmi.n	80079ac <__swsetup_r+0x50>
 8007988:	2309      	movs	r3, #9
 800798a:	6033      	str	r3, [r6, #0]
 800798c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007990:	81a3      	strh	r3, [r4, #12]
 8007992:	f04f 30ff 	mov.w	r0, #4294967295
 8007996:	e03e      	b.n	8007a16 <__swsetup_r+0xba>
 8007998:	4b25      	ldr	r3, [pc, #148]	; (8007a30 <__swsetup_r+0xd4>)
 800799a:	429c      	cmp	r4, r3
 800799c:	d101      	bne.n	80079a2 <__swsetup_r+0x46>
 800799e:	68ac      	ldr	r4, [r5, #8]
 80079a0:	e7eb      	b.n	800797a <__swsetup_r+0x1e>
 80079a2:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <__swsetup_r+0xd8>)
 80079a4:	429c      	cmp	r4, r3
 80079a6:	bf08      	it	eq
 80079a8:	68ec      	ldreq	r4, [r5, #12]
 80079aa:	e7e6      	b.n	800797a <__swsetup_r+0x1e>
 80079ac:	0758      	lsls	r0, r3, #29
 80079ae:	d512      	bpl.n	80079d6 <__swsetup_r+0x7a>
 80079b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079b2:	b141      	cbz	r1, 80079c6 <__swsetup_r+0x6a>
 80079b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079b8:	4299      	cmp	r1, r3
 80079ba:	d002      	beq.n	80079c2 <__swsetup_r+0x66>
 80079bc:	4630      	mov	r0, r6
 80079be:	f7ff fb31 	bl	8007024 <_free_r>
 80079c2:	2300      	movs	r3, #0
 80079c4:	6363      	str	r3, [r4, #52]	; 0x34
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	2300      	movs	r3, #0
 80079d0:	6063      	str	r3, [r4, #4]
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f043 0308 	orr.w	r3, r3, #8
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	b94b      	cbnz	r3, 80079f6 <__swsetup_r+0x9a>
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ec:	d003      	beq.n	80079f6 <__swsetup_r+0x9a>
 80079ee:	4621      	mov	r1, r4
 80079f0:	4630      	mov	r0, r6
 80079f2:	f000 fa09 	bl	8007e08 <__smakebuf_r>
 80079f6:	89a0      	ldrh	r0, [r4, #12]
 80079f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079fc:	f010 0301 	ands.w	r3, r0, #1
 8007a00:	d00a      	beq.n	8007a18 <__swsetup_r+0xbc>
 8007a02:	2300      	movs	r3, #0
 8007a04:	60a3      	str	r3, [r4, #8]
 8007a06:	6963      	ldr	r3, [r4, #20]
 8007a08:	425b      	negs	r3, r3
 8007a0a:	61a3      	str	r3, [r4, #24]
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	b943      	cbnz	r3, 8007a22 <__swsetup_r+0xc6>
 8007a10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a14:	d1ba      	bne.n	800798c <__swsetup_r+0x30>
 8007a16:	bd70      	pop	{r4, r5, r6, pc}
 8007a18:	0781      	lsls	r1, r0, #30
 8007a1a:	bf58      	it	pl
 8007a1c:	6963      	ldrpl	r3, [r4, #20]
 8007a1e:	60a3      	str	r3, [r4, #8]
 8007a20:	e7f4      	b.n	8007a0c <__swsetup_r+0xb0>
 8007a22:	2000      	movs	r0, #0
 8007a24:	e7f7      	b.n	8007a16 <__swsetup_r+0xba>
 8007a26:	bf00      	nop
 8007a28:	20000014 	.word	0x20000014
 8007a2c:	0801b8f4 	.word	0x0801b8f4
 8007a30:	0801b914 	.word	0x0801b914
 8007a34:	0801b8d4 	.word	0x0801b8d4

08007a38 <abort>:
 8007a38:	b508      	push	{r3, lr}
 8007a3a:	2006      	movs	r0, #6
 8007a3c:	f000 fa54 	bl	8007ee8 <raise>
 8007a40:	2001      	movs	r0, #1
 8007a42:	f7f9 fd9d 	bl	8001580 <_exit>
	...

08007a48 <__sflush_r>:
 8007a48:	898a      	ldrh	r2, [r1, #12]
 8007a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4e:	4605      	mov	r5, r0
 8007a50:	0710      	lsls	r0, r2, #28
 8007a52:	460c      	mov	r4, r1
 8007a54:	d458      	bmi.n	8007b08 <__sflush_r+0xc0>
 8007a56:	684b      	ldr	r3, [r1, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	dc05      	bgt.n	8007a68 <__sflush_r+0x20>
 8007a5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	dc02      	bgt.n	8007a68 <__sflush_r+0x20>
 8007a62:	2000      	movs	r0, #0
 8007a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a6a:	2e00      	cmp	r6, #0
 8007a6c:	d0f9      	beq.n	8007a62 <__sflush_r+0x1a>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a74:	682f      	ldr	r7, [r5, #0]
 8007a76:	602b      	str	r3, [r5, #0]
 8007a78:	d032      	beq.n	8007ae0 <__sflush_r+0x98>
 8007a7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	075a      	lsls	r2, r3, #29
 8007a80:	d505      	bpl.n	8007a8e <__sflush_r+0x46>
 8007a82:	6863      	ldr	r3, [r4, #4]
 8007a84:	1ac0      	subs	r0, r0, r3
 8007a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a88:	b10b      	cbz	r3, 8007a8e <__sflush_r+0x46>
 8007a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a8c:	1ac0      	subs	r0, r0, r3
 8007a8e:	2300      	movs	r3, #0
 8007a90:	4602      	mov	r2, r0
 8007a92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a94:	6a21      	ldr	r1, [r4, #32]
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b0      	blx	r6
 8007a9a:	1c43      	adds	r3, r0, #1
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	d106      	bne.n	8007aae <__sflush_r+0x66>
 8007aa0:	6829      	ldr	r1, [r5, #0]
 8007aa2:	291d      	cmp	r1, #29
 8007aa4:	d82c      	bhi.n	8007b00 <__sflush_r+0xb8>
 8007aa6:	4a2a      	ldr	r2, [pc, #168]	; (8007b50 <__sflush_r+0x108>)
 8007aa8:	40ca      	lsrs	r2, r1
 8007aaa:	07d6      	lsls	r6, r2, #31
 8007aac:	d528      	bpl.n	8007b00 <__sflush_r+0xb8>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	6062      	str	r2, [r4, #4]
 8007ab2:	04d9      	lsls	r1, r3, #19
 8007ab4:	6922      	ldr	r2, [r4, #16]
 8007ab6:	6022      	str	r2, [r4, #0]
 8007ab8:	d504      	bpl.n	8007ac4 <__sflush_r+0x7c>
 8007aba:	1c42      	adds	r2, r0, #1
 8007abc:	d101      	bne.n	8007ac2 <__sflush_r+0x7a>
 8007abe:	682b      	ldr	r3, [r5, #0]
 8007ac0:	b903      	cbnz	r3, 8007ac4 <__sflush_r+0x7c>
 8007ac2:	6560      	str	r0, [r4, #84]	; 0x54
 8007ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ac6:	602f      	str	r7, [r5, #0]
 8007ac8:	2900      	cmp	r1, #0
 8007aca:	d0ca      	beq.n	8007a62 <__sflush_r+0x1a>
 8007acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ad0:	4299      	cmp	r1, r3
 8007ad2:	d002      	beq.n	8007ada <__sflush_r+0x92>
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f7ff faa5 	bl	8007024 <_free_r>
 8007ada:	2000      	movs	r0, #0
 8007adc:	6360      	str	r0, [r4, #52]	; 0x34
 8007ade:	e7c1      	b.n	8007a64 <__sflush_r+0x1c>
 8007ae0:	6a21      	ldr	r1, [r4, #32]
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	47b0      	blx	r6
 8007ae8:	1c41      	adds	r1, r0, #1
 8007aea:	d1c7      	bne.n	8007a7c <__sflush_r+0x34>
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0c4      	beq.n	8007a7c <__sflush_r+0x34>
 8007af2:	2b1d      	cmp	r3, #29
 8007af4:	d001      	beq.n	8007afa <__sflush_r+0xb2>
 8007af6:	2b16      	cmp	r3, #22
 8007af8:	d101      	bne.n	8007afe <__sflush_r+0xb6>
 8007afa:	602f      	str	r7, [r5, #0]
 8007afc:	e7b1      	b.n	8007a62 <__sflush_r+0x1a>
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b04:	81a3      	strh	r3, [r4, #12]
 8007b06:	e7ad      	b.n	8007a64 <__sflush_r+0x1c>
 8007b08:	690f      	ldr	r7, [r1, #16]
 8007b0a:	2f00      	cmp	r7, #0
 8007b0c:	d0a9      	beq.n	8007a62 <__sflush_r+0x1a>
 8007b0e:	0793      	lsls	r3, r2, #30
 8007b10:	680e      	ldr	r6, [r1, #0]
 8007b12:	bf08      	it	eq
 8007b14:	694b      	ldreq	r3, [r1, #20]
 8007b16:	600f      	str	r7, [r1, #0]
 8007b18:	bf18      	it	ne
 8007b1a:	2300      	movne	r3, #0
 8007b1c:	eba6 0807 	sub.w	r8, r6, r7
 8007b20:	608b      	str	r3, [r1, #8]
 8007b22:	f1b8 0f00 	cmp.w	r8, #0
 8007b26:	dd9c      	ble.n	8007a62 <__sflush_r+0x1a>
 8007b28:	6a21      	ldr	r1, [r4, #32]
 8007b2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b2c:	4643      	mov	r3, r8
 8007b2e:	463a      	mov	r2, r7
 8007b30:	4628      	mov	r0, r5
 8007b32:	47b0      	blx	r6
 8007b34:	2800      	cmp	r0, #0
 8007b36:	dc06      	bgt.n	8007b46 <__sflush_r+0xfe>
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b3e:	81a3      	strh	r3, [r4, #12]
 8007b40:	f04f 30ff 	mov.w	r0, #4294967295
 8007b44:	e78e      	b.n	8007a64 <__sflush_r+0x1c>
 8007b46:	4407      	add	r7, r0
 8007b48:	eba8 0800 	sub.w	r8, r8, r0
 8007b4c:	e7e9      	b.n	8007b22 <__sflush_r+0xda>
 8007b4e:	bf00      	nop
 8007b50:	20400001 	.word	0x20400001

08007b54 <_fflush_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	690b      	ldr	r3, [r1, #16]
 8007b58:	4605      	mov	r5, r0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	b913      	cbnz	r3, 8007b64 <_fflush_r+0x10>
 8007b5e:	2500      	movs	r5, #0
 8007b60:	4628      	mov	r0, r5
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	b118      	cbz	r0, 8007b6e <_fflush_r+0x1a>
 8007b66:	6983      	ldr	r3, [r0, #24]
 8007b68:	b90b      	cbnz	r3, 8007b6e <_fflush_r+0x1a>
 8007b6a:	f000 f887 	bl	8007c7c <__sinit>
 8007b6e:	4b14      	ldr	r3, [pc, #80]	; (8007bc0 <_fflush_r+0x6c>)
 8007b70:	429c      	cmp	r4, r3
 8007b72:	d11b      	bne.n	8007bac <_fflush_r+0x58>
 8007b74:	686c      	ldr	r4, [r5, #4]
 8007b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0ef      	beq.n	8007b5e <_fflush_r+0xa>
 8007b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b80:	07d0      	lsls	r0, r2, #31
 8007b82:	d404      	bmi.n	8007b8e <_fflush_r+0x3a>
 8007b84:	0599      	lsls	r1, r3, #22
 8007b86:	d402      	bmi.n	8007b8e <_fflush_r+0x3a>
 8007b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b8a:	f000 f915 	bl	8007db8 <__retarget_lock_acquire_recursive>
 8007b8e:	4628      	mov	r0, r5
 8007b90:	4621      	mov	r1, r4
 8007b92:	f7ff ff59 	bl	8007a48 <__sflush_r>
 8007b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b98:	07da      	lsls	r2, r3, #31
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	d4e0      	bmi.n	8007b60 <_fflush_r+0xc>
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	059b      	lsls	r3, r3, #22
 8007ba2:	d4dd      	bmi.n	8007b60 <_fflush_r+0xc>
 8007ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ba6:	f000 f908 	bl	8007dba <__retarget_lock_release_recursive>
 8007baa:	e7d9      	b.n	8007b60 <_fflush_r+0xc>
 8007bac:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <_fflush_r+0x70>)
 8007bae:	429c      	cmp	r4, r3
 8007bb0:	d101      	bne.n	8007bb6 <_fflush_r+0x62>
 8007bb2:	68ac      	ldr	r4, [r5, #8]
 8007bb4:	e7df      	b.n	8007b76 <_fflush_r+0x22>
 8007bb6:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <_fflush_r+0x74>)
 8007bb8:	429c      	cmp	r4, r3
 8007bba:	bf08      	it	eq
 8007bbc:	68ec      	ldreq	r4, [r5, #12]
 8007bbe:	e7da      	b.n	8007b76 <_fflush_r+0x22>
 8007bc0:	0801b8f4 	.word	0x0801b8f4
 8007bc4:	0801b914 	.word	0x0801b914
 8007bc8:	0801b8d4 	.word	0x0801b8d4

08007bcc <std>:
 8007bcc:	2300      	movs	r3, #0
 8007bce:	b510      	push	{r4, lr}
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8007bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bda:	6083      	str	r3, [r0, #8]
 8007bdc:	8181      	strh	r1, [r0, #12]
 8007bde:	6643      	str	r3, [r0, #100]	; 0x64
 8007be0:	81c2      	strh	r2, [r0, #14]
 8007be2:	6183      	str	r3, [r0, #24]
 8007be4:	4619      	mov	r1, r3
 8007be6:	2208      	movs	r2, #8
 8007be8:	305c      	adds	r0, #92	; 0x5c
 8007bea:	f7fd fb5b 	bl	80052a4 <memset>
 8007bee:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <std+0x38>)
 8007bf0:	6263      	str	r3, [r4, #36]	; 0x24
 8007bf2:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <std+0x3c>)
 8007bf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bf6:	4b05      	ldr	r3, [pc, #20]	; (8007c0c <std+0x40>)
 8007bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bfa:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <std+0x44>)
 8007bfc:	6224      	str	r4, [r4, #32]
 8007bfe:	6323      	str	r3, [r4, #48]	; 0x30
 8007c00:	bd10      	pop	{r4, pc}
 8007c02:	bf00      	nop
 8007c04:	08007f21 	.word	0x08007f21
 8007c08:	08007f43 	.word	0x08007f43
 8007c0c:	08007f7b 	.word	0x08007f7b
 8007c10:	08007f9f 	.word	0x08007f9f

08007c14 <_cleanup_r>:
 8007c14:	4901      	ldr	r1, [pc, #4]	; (8007c1c <_cleanup_r+0x8>)
 8007c16:	f000 b8af 	b.w	8007d78 <_fwalk_reent>
 8007c1a:	bf00      	nop
 8007c1c:	08007b55 	.word	0x08007b55

08007c20 <__sfmoreglue>:
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	2268      	movs	r2, #104	; 0x68
 8007c24:	1e4d      	subs	r5, r1, #1
 8007c26:	4355      	muls	r5, r2
 8007c28:	460e      	mov	r6, r1
 8007c2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c2e:	f7ff fa65 	bl	80070fc <_malloc_r>
 8007c32:	4604      	mov	r4, r0
 8007c34:	b140      	cbz	r0, 8007c48 <__sfmoreglue+0x28>
 8007c36:	2100      	movs	r1, #0
 8007c38:	e9c0 1600 	strd	r1, r6, [r0]
 8007c3c:	300c      	adds	r0, #12
 8007c3e:	60a0      	str	r0, [r4, #8]
 8007c40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c44:	f7fd fb2e 	bl	80052a4 <memset>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}

08007c4c <__sfp_lock_acquire>:
 8007c4c:	4801      	ldr	r0, [pc, #4]	; (8007c54 <__sfp_lock_acquire+0x8>)
 8007c4e:	f000 b8b3 	b.w	8007db8 <__retarget_lock_acquire_recursive>
 8007c52:	bf00      	nop
 8007c54:	20007329 	.word	0x20007329

08007c58 <__sfp_lock_release>:
 8007c58:	4801      	ldr	r0, [pc, #4]	; (8007c60 <__sfp_lock_release+0x8>)
 8007c5a:	f000 b8ae 	b.w	8007dba <__retarget_lock_release_recursive>
 8007c5e:	bf00      	nop
 8007c60:	20007329 	.word	0x20007329

08007c64 <__sinit_lock_acquire>:
 8007c64:	4801      	ldr	r0, [pc, #4]	; (8007c6c <__sinit_lock_acquire+0x8>)
 8007c66:	f000 b8a7 	b.w	8007db8 <__retarget_lock_acquire_recursive>
 8007c6a:	bf00      	nop
 8007c6c:	2000732a 	.word	0x2000732a

08007c70 <__sinit_lock_release>:
 8007c70:	4801      	ldr	r0, [pc, #4]	; (8007c78 <__sinit_lock_release+0x8>)
 8007c72:	f000 b8a2 	b.w	8007dba <__retarget_lock_release_recursive>
 8007c76:	bf00      	nop
 8007c78:	2000732a 	.word	0x2000732a

08007c7c <__sinit>:
 8007c7c:	b510      	push	{r4, lr}
 8007c7e:	4604      	mov	r4, r0
 8007c80:	f7ff fff0 	bl	8007c64 <__sinit_lock_acquire>
 8007c84:	69a3      	ldr	r3, [r4, #24]
 8007c86:	b11b      	cbz	r3, 8007c90 <__sinit+0x14>
 8007c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c8c:	f7ff bff0 	b.w	8007c70 <__sinit_lock_release>
 8007c90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c94:	6523      	str	r3, [r4, #80]	; 0x50
 8007c96:	4b13      	ldr	r3, [pc, #76]	; (8007ce4 <__sinit+0x68>)
 8007c98:	4a13      	ldr	r2, [pc, #76]	; (8007ce8 <__sinit+0x6c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c9e:	42a3      	cmp	r3, r4
 8007ca0:	bf04      	itt	eq
 8007ca2:	2301      	moveq	r3, #1
 8007ca4:	61a3      	streq	r3, [r4, #24]
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f000 f820 	bl	8007cec <__sfp>
 8007cac:	6060      	str	r0, [r4, #4]
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 f81c 	bl	8007cec <__sfp>
 8007cb4:	60a0      	str	r0, [r4, #8]
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 f818 	bl	8007cec <__sfp>
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	60e0      	str	r0, [r4, #12]
 8007cc0:	2104      	movs	r1, #4
 8007cc2:	6860      	ldr	r0, [r4, #4]
 8007cc4:	f7ff ff82 	bl	8007bcc <std>
 8007cc8:	68a0      	ldr	r0, [r4, #8]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	2109      	movs	r1, #9
 8007cce:	f7ff ff7d 	bl	8007bcc <std>
 8007cd2:	68e0      	ldr	r0, [r4, #12]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	2112      	movs	r1, #18
 8007cd8:	f7ff ff78 	bl	8007bcc <std>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	61a3      	str	r3, [r4, #24]
 8007ce0:	e7d2      	b.n	8007c88 <__sinit+0xc>
 8007ce2:	bf00      	nop
 8007ce4:	0801b558 	.word	0x0801b558
 8007ce8:	08007c15 	.word	0x08007c15

08007cec <__sfp>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	4607      	mov	r7, r0
 8007cf0:	f7ff ffac 	bl	8007c4c <__sfp_lock_acquire>
 8007cf4:	4b1e      	ldr	r3, [pc, #120]	; (8007d70 <__sfp+0x84>)
 8007cf6:	681e      	ldr	r6, [r3, #0]
 8007cf8:	69b3      	ldr	r3, [r6, #24]
 8007cfa:	b913      	cbnz	r3, 8007d02 <__sfp+0x16>
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f7ff ffbd 	bl	8007c7c <__sinit>
 8007d02:	3648      	adds	r6, #72	; 0x48
 8007d04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	d503      	bpl.n	8007d14 <__sfp+0x28>
 8007d0c:	6833      	ldr	r3, [r6, #0]
 8007d0e:	b30b      	cbz	r3, 8007d54 <__sfp+0x68>
 8007d10:	6836      	ldr	r6, [r6, #0]
 8007d12:	e7f7      	b.n	8007d04 <__sfp+0x18>
 8007d14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d18:	b9d5      	cbnz	r5, 8007d50 <__sfp+0x64>
 8007d1a:	4b16      	ldr	r3, [pc, #88]	; (8007d74 <__sfp+0x88>)
 8007d1c:	60e3      	str	r3, [r4, #12]
 8007d1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d22:	6665      	str	r5, [r4, #100]	; 0x64
 8007d24:	f000 f847 	bl	8007db6 <__retarget_lock_init_recursive>
 8007d28:	f7ff ff96 	bl	8007c58 <__sfp_lock_release>
 8007d2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d34:	6025      	str	r5, [r4, #0]
 8007d36:	61a5      	str	r5, [r4, #24]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d40:	f7fd fab0 	bl	80052a4 <memset>
 8007d44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d50:	3468      	adds	r4, #104	; 0x68
 8007d52:	e7d9      	b.n	8007d08 <__sfp+0x1c>
 8007d54:	2104      	movs	r1, #4
 8007d56:	4638      	mov	r0, r7
 8007d58:	f7ff ff62 	bl	8007c20 <__sfmoreglue>
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	6030      	str	r0, [r6, #0]
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d1d5      	bne.n	8007d10 <__sfp+0x24>
 8007d64:	f7ff ff78 	bl	8007c58 <__sfp_lock_release>
 8007d68:	230c      	movs	r3, #12
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	e7ee      	b.n	8007d4c <__sfp+0x60>
 8007d6e:	bf00      	nop
 8007d70:	0801b558 	.word	0x0801b558
 8007d74:	ffff0001 	.word	0xffff0001

08007d78 <_fwalk_reent>:
 8007d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	4688      	mov	r8, r1
 8007d80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d84:	2700      	movs	r7, #0
 8007d86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d8a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d8e:	d505      	bpl.n	8007d9c <_fwalk_reent+0x24>
 8007d90:	6824      	ldr	r4, [r4, #0]
 8007d92:	2c00      	cmp	r4, #0
 8007d94:	d1f7      	bne.n	8007d86 <_fwalk_reent+0xe>
 8007d96:	4638      	mov	r0, r7
 8007d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d9c:	89ab      	ldrh	r3, [r5, #12]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d907      	bls.n	8007db2 <_fwalk_reent+0x3a>
 8007da2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007da6:	3301      	adds	r3, #1
 8007da8:	d003      	beq.n	8007db2 <_fwalk_reent+0x3a>
 8007daa:	4629      	mov	r1, r5
 8007dac:	4630      	mov	r0, r6
 8007dae:	47c0      	blx	r8
 8007db0:	4307      	orrs	r7, r0
 8007db2:	3568      	adds	r5, #104	; 0x68
 8007db4:	e7e9      	b.n	8007d8a <_fwalk_reent+0x12>

08007db6 <__retarget_lock_init_recursive>:
 8007db6:	4770      	bx	lr

08007db8 <__retarget_lock_acquire_recursive>:
 8007db8:	4770      	bx	lr

08007dba <__retarget_lock_release_recursive>:
 8007dba:	4770      	bx	lr

08007dbc <__swhatbuf_r>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	460e      	mov	r6, r1
 8007dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	b096      	sub	sp, #88	; 0x58
 8007dc8:	4614      	mov	r4, r2
 8007dca:	461d      	mov	r5, r3
 8007dcc:	da08      	bge.n	8007de0 <__swhatbuf_r+0x24>
 8007dce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	602a      	str	r2, [r5, #0]
 8007dd6:	061a      	lsls	r2, r3, #24
 8007dd8:	d410      	bmi.n	8007dfc <__swhatbuf_r+0x40>
 8007dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dde:	e00e      	b.n	8007dfe <__swhatbuf_r+0x42>
 8007de0:	466a      	mov	r2, sp
 8007de2:	f000 f903 	bl	8007fec <_fstat_r>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	dbf1      	blt.n	8007dce <__swhatbuf_r+0x12>
 8007dea:	9a01      	ldr	r2, [sp, #4]
 8007dec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007df0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007df4:	425a      	negs	r2, r3
 8007df6:	415a      	adcs	r2, r3
 8007df8:	602a      	str	r2, [r5, #0]
 8007dfa:	e7ee      	b.n	8007dda <__swhatbuf_r+0x1e>
 8007dfc:	2340      	movs	r3, #64	; 0x40
 8007dfe:	2000      	movs	r0, #0
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	b016      	add	sp, #88	; 0x58
 8007e04:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e08 <__smakebuf_r>:
 8007e08:	898b      	ldrh	r3, [r1, #12]
 8007e0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e0c:	079d      	lsls	r5, r3, #30
 8007e0e:	4606      	mov	r6, r0
 8007e10:	460c      	mov	r4, r1
 8007e12:	d507      	bpl.n	8007e24 <__smakebuf_r+0x1c>
 8007e14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	6123      	str	r3, [r4, #16]
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	6163      	str	r3, [r4, #20]
 8007e20:	b002      	add	sp, #8
 8007e22:	bd70      	pop	{r4, r5, r6, pc}
 8007e24:	ab01      	add	r3, sp, #4
 8007e26:	466a      	mov	r2, sp
 8007e28:	f7ff ffc8 	bl	8007dbc <__swhatbuf_r>
 8007e2c:	9900      	ldr	r1, [sp, #0]
 8007e2e:	4605      	mov	r5, r0
 8007e30:	4630      	mov	r0, r6
 8007e32:	f7ff f963 	bl	80070fc <_malloc_r>
 8007e36:	b948      	cbnz	r0, 8007e4c <__smakebuf_r+0x44>
 8007e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e3c:	059a      	lsls	r2, r3, #22
 8007e3e:	d4ef      	bmi.n	8007e20 <__smakebuf_r+0x18>
 8007e40:	f023 0303 	bic.w	r3, r3, #3
 8007e44:	f043 0302 	orr.w	r3, r3, #2
 8007e48:	81a3      	strh	r3, [r4, #12]
 8007e4a:	e7e3      	b.n	8007e14 <__smakebuf_r+0xc>
 8007e4c:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <__smakebuf_r+0x7c>)
 8007e4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	6020      	str	r0, [r4, #0]
 8007e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e58:	81a3      	strh	r3, [r4, #12]
 8007e5a:	9b00      	ldr	r3, [sp, #0]
 8007e5c:	6163      	str	r3, [r4, #20]
 8007e5e:	9b01      	ldr	r3, [sp, #4]
 8007e60:	6120      	str	r0, [r4, #16]
 8007e62:	b15b      	cbz	r3, 8007e7c <__smakebuf_r+0x74>
 8007e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f000 f8d1 	bl	8008010 <_isatty_r>
 8007e6e:	b128      	cbz	r0, 8007e7c <__smakebuf_r+0x74>
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	f023 0303 	bic.w	r3, r3, #3
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	81a3      	strh	r3, [r4, #12]
 8007e7c:	89a0      	ldrh	r0, [r4, #12]
 8007e7e:	4305      	orrs	r5, r0
 8007e80:	81a5      	strh	r5, [r4, #12]
 8007e82:	e7cd      	b.n	8007e20 <__smakebuf_r+0x18>
 8007e84:	08007c15 	.word	0x08007c15

08007e88 <_malloc_usable_size_r>:
 8007e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e8c:	1f18      	subs	r0, r3, #4
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bfbc      	itt	lt
 8007e92:	580b      	ldrlt	r3, [r1, r0]
 8007e94:	18c0      	addlt	r0, r0, r3
 8007e96:	4770      	bx	lr

08007e98 <_raise_r>:
 8007e98:	291f      	cmp	r1, #31
 8007e9a:	b538      	push	{r3, r4, r5, lr}
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	460d      	mov	r5, r1
 8007ea0:	d904      	bls.n	8007eac <_raise_r+0x14>
 8007ea2:	2316      	movs	r3, #22
 8007ea4:	6003      	str	r3, [r0, #0]
 8007ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007eae:	b112      	cbz	r2, 8007eb6 <_raise_r+0x1e>
 8007eb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007eb4:	b94b      	cbnz	r3, 8007eca <_raise_r+0x32>
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 f830 	bl	8007f1c <_getpid_r>
 8007ebc:	462a      	mov	r2, r5
 8007ebe:	4601      	mov	r1, r0
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec6:	f000 b817 	b.w	8007ef8 <_kill_r>
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d00a      	beq.n	8007ee4 <_raise_r+0x4c>
 8007ece:	1c59      	adds	r1, r3, #1
 8007ed0:	d103      	bne.n	8007eda <_raise_r+0x42>
 8007ed2:	2316      	movs	r3, #22
 8007ed4:	6003      	str	r3, [r0, #0]
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	e7e7      	b.n	8007eaa <_raise_r+0x12>
 8007eda:	2400      	movs	r4, #0
 8007edc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	4798      	blx	r3
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	e7e0      	b.n	8007eaa <_raise_r+0x12>

08007ee8 <raise>:
 8007ee8:	4b02      	ldr	r3, [pc, #8]	; (8007ef4 <raise+0xc>)
 8007eea:	4601      	mov	r1, r0
 8007eec:	6818      	ldr	r0, [r3, #0]
 8007eee:	f7ff bfd3 	b.w	8007e98 <_raise_r>
 8007ef2:	bf00      	nop
 8007ef4:	20000014 	.word	0x20000014

08007ef8 <_kill_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4d07      	ldr	r5, [pc, #28]	; (8007f18 <_kill_r+0x20>)
 8007efc:	2300      	movs	r3, #0
 8007efe:	4604      	mov	r4, r0
 8007f00:	4608      	mov	r0, r1
 8007f02:	4611      	mov	r1, r2
 8007f04:	602b      	str	r3, [r5, #0]
 8007f06:	f7f9 fb2b 	bl	8001560 <_kill>
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	d102      	bne.n	8007f14 <_kill_r+0x1c>
 8007f0e:	682b      	ldr	r3, [r5, #0]
 8007f10:	b103      	cbz	r3, 8007f14 <_kill_r+0x1c>
 8007f12:	6023      	str	r3, [r4, #0]
 8007f14:	bd38      	pop	{r3, r4, r5, pc}
 8007f16:	bf00      	nop
 8007f18:	20007324 	.word	0x20007324

08007f1c <_getpid_r>:
 8007f1c:	f7f9 bb18 	b.w	8001550 <_getpid>

08007f20 <__sread>:
 8007f20:	b510      	push	{r4, lr}
 8007f22:	460c      	mov	r4, r1
 8007f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f28:	f000 f894 	bl	8008054 <_read_r>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	bfab      	itete	ge
 8007f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f32:	89a3      	ldrhlt	r3, [r4, #12]
 8007f34:	181b      	addge	r3, r3, r0
 8007f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f3a:	bfac      	ite	ge
 8007f3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f3e:	81a3      	strhlt	r3, [r4, #12]
 8007f40:	bd10      	pop	{r4, pc}

08007f42 <__swrite>:
 8007f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f46:	461f      	mov	r7, r3
 8007f48:	898b      	ldrh	r3, [r1, #12]
 8007f4a:	05db      	lsls	r3, r3, #23
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	4616      	mov	r6, r2
 8007f52:	d505      	bpl.n	8007f60 <__swrite+0x1e>
 8007f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f58:	2302      	movs	r3, #2
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f000 f868 	bl	8008030 <_lseek_r>
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f6a:	81a3      	strh	r3, [r4, #12]
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	463b      	mov	r3, r7
 8007f70:	4628      	mov	r0, r5
 8007f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f76:	f000 b817 	b.w	8007fa8 <_write_r>

08007f7a <__sseek>:
 8007f7a:	b510      	push	{r4, lr}
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f82:	f000 f855 	bl	8008030 <_lseek_r>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	bf15      	itete	ne
 8007f8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f96:	81a3      	strheq	r3, [r4, #12]
 8007f98:	bf18      	it	ne
 8007f9a:	81a3      	strhne	r3, [r4, #12]
 8007f9c:	bd10      	pop	{r4, pc}

08007f9e <__sclose>:
 8007f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa2:	f000 b813 	b.w	8007fcc <_close_r>
	...

08007fa8 <_write_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4d07      	ldr	r5, [pc, #28]	; (8007fc8 <_write_r+0x20>)
 8007fac:	4604      	mov	r4, r0
 8007fae:	4608      	mov	r0, r1
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	602a      	str	r2, [r5, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f7f9 fb09 	bl	80015ce <_write>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_write_r+0x1e>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_write_r+0x1e>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	20007324 	.word	0x20007324

08007fcc <_close_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d06      	ldr	r5, [pc, #24]	; (8007fe8 <_close_r+0x1c>)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	f7f9 fb15 	bl	8001606 <_close>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_close_r+0x1a>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_close_r+0x1a>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	20007324 	.word	0x20007324

08007fec <_fstat_r>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	4d07      	ldr	r5, [pc, #28]	; (800800c <_fstat_r+0x20>)
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	4608      	mov	r0, r1
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	602b      	str	r3, [r5, #0]
 8007ffa:	f7f9 fb10 	bl	800161e <_fstat>
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	d102      	bne.n	8008008 <_fstat_r+0x1c>
 8008002:	682b      	ldr	r3, [r5, #0]
 8008004:	b103      	cbz	r3, 8008008 <_fstat_r+0x1c>
 8008006:	6023      	str	r3, [r4, #0]
 8008008:	bd38      	pop	{r3, r4, r5, pc}
 800800a:	bf00      	nop
 800800c:	20007324 	.word	0x20007324

08008010 <_isatty_r>:
 8008010:	b538      	push	{r3, r4, r5, lr}
 8008012:	4d06      	ldr	r5, [pc, #24]	; (800802c <_isatty_r+0x1c>)
 8008014:	2300      	movs	r3, #0
 8008016:	4604      	mov	r4, r0
 8008018:	4608      	mov	r0, r1
 800801a:	602b      	str	r3, [r5, #0]
 800801c:	f7f9 fb0f 	bl	800163e <_isatty>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d102      	bne.n	800802a <_isatty_r+0x1a>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b103      	cbz	r3, 800802a <_isatty_r+0x1a>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	20007324 	.word	0x20007324

08008030 <_lseek_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d07      	ldr	r5, [pc, #28]	; (8008050 <_lseek_r+0x20>)
 8008034:	4604      	mov	r4, r0
 8008036:	4608      	mov	r0, r1
 8008038:	4611      	mov	r1, r2
 800803a:	2200      	movs	r2, #0
 800803c:	602a      	str	r2, [r5, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	f7f9 fb08 	bl	8001654 <_lseek>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_lseek_r+0x1e>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_lseek_r+0x1e>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	20007324 	.word	0x20007324

08008054 <_read_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4d07      	ldr	r5, [pc, #28]	; (8008074 <_read_r+0x20>)
 8008058:	4604      	mov	r4, r0
 800805a:	4608      	mov	r0, r1
 800805c:	4611      	mov	r1, r2
 800805e:	2200      	movs	r2, #0
 8008060:	602a      	str	r2, [r5, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	f7f9 fa96 	bl	8001594 <_read>
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	d102      	bne.n	8008072 <_read_r+0x1e>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	b103      	cbz	r3, 8008072 <_read_r+0x1e>
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	20007324 	.word	0x20007324

08008078 <sqrtf>:
 8008078:	b508      	push	{r3, lr}
 800807a:	ed2d 8b02 	vpush	{d8}
 800807e:	eeb0 8a40 	vmov.f32	s16, s0
 8008082:	f000 f817 	bl	80080b4 <__ieee754_sqrtf>
 8008086:	eeb4 8a48 	vcmp.f32	s16, s16
 800808a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808e:	d60c      	bvs.n	80080aa <sqrtf+0x32>
 8008090:	eddf 8a07 	vldr	s17, [pc, #28]	; 80080b0 <sqrtf+0x38>
 8008094:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809c:	d505      	bpl.n	80080aa <sqrtf+0x32>
 800809e:	f7fd f8d7 	bl	8005250 <__errno>
 80080a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80080a6:	2321      	movs	r3, #33	; 0x21
 80080a8:	6003      	str	r3, [r0, #0]
 80080aa:	ecbd 8b02 	vpop	{d8}
 80080ae:	bd08      	pop	{r3, pc}
 80080b0:	00000000 	.word	0x00000000

080080b4 <__ieee754_sqrtf>:
 80080b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80080b8:	4770      	bx	lr
	...

080080bc <_init>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	bf00      	nop
 80080c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c2:	bc08      	pop	{r3}
 80080c4:	469e      	mov	lr, r3
 80080c6:	4770      	bx	lr

080080c8 <_fini>:
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	bf00      	nop
 80080cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ce:	bc08      	pop	{r3}
 80080d0:	469e      	mov	lr, r3
 80080d2:	4770      	bx	lr
